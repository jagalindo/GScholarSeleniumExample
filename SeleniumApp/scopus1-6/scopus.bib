
@ARTICLE{Dermeval20154950,
author={Dermeval, D.a  b  and Tenório, T.c  and Bittencourt, I.I.c  and Silva, A.c  and Isotani, S.d  and Ribeiro, M.c },
title={Ontology-based feature modeling: An empirical study in changing scenarios},
journal={Expert Systems with Applications},
year={2015},
volume={42},
number={11},
pages={4950-4964},
doi={10.1016/j.eswa.2015.02.020},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924777581&partnerID=40&md5=98f6106532ade1eaca24ddf4792f3555},
affiliation={Computing and Systems Department, Federal University of Campina Grande (UFCG), R. Aprígio Veloso, 882, Bodocongó, Campina Grande, PB, Brazil; Penedo, Campus Arapiraca, Federal University of Alagoas (UFAL), Av. Beira Rio, s/n, Penedo, AL, Brazil; Computing Institute, Federal University of Alagoas (UFAL), Campus A.C. Simões, Maceió, AL, Brazil; Institute of Mathematics and Computational Sciences, University of São Paulo (USP), Avenida Trabalhador São-carlense, 400 Centro, São Carlos, SP, Brazil},
abstract={A software product line (SPL) is a set of software systems that have a particular set of common features and that satisfy the needs of a particular market segment or mission. Feature modeling is one of the key activities involved in the design of SPLs. The feature diagram produced in this activity captures the commonalities and variabilities of SPLs. In some complex domains (e.g.; ubiquitous computing, autonomic systems and context-aware computing), it is difficult to foresee all functionalities and variabilities a specific SPL may require. Thus, Dynamic Software Product Lines (DSPLs) bind variation points at runtime to adapt to fluctuations in user needs as well as to adapt to changes in the environment. In this context, relying on formal representations of feature models is important to allow them to be automatically analyzed during system execution. Among the mechanisms used for representing and analyzing feature models, description logic (DL) based approaches demand to be better investigated in DSPLs since it provides capabilities, such as automated inconsistency detection, reasoning efficiency, scalability and expressivity. Ontology is the most common way to represent feature models knowledge based on DL reasoners. Previous works conceived ontologies for feature modeling either based on OWL classes and properties or based on OWL individuals. However, considering change or evolution scenarios of feature models, we need to compare whether a class-based or an individual-based feature modeling style is recommended to describe feature models to support SPLs, and especially its capabilities to deal with changes in feature models, as required by DSPLs. In this paper, we conduct a controlled experiment to empirically compare two approaches based on each one of these modeling styles in several changing scenarios (e.g.; add/remove mandatory feature, add/remove optional feature and so on). We measure time to perform changes, structural impact of changes (flexibility) and correctness for performing changes in our experiment. Our results indicate that using OWL individuals requires less time to change and is more flexible than using OWL classes and properties. These results provide insightful assumptions towards the definition of an approach relying on reasoning capabilities of ontologies that can effectively support products reconfiguration in the context of DSPL. © 2015 Elsevier Ltd. All rights reserved.},
author_keywords={Empirical software engineering;  Feature modeling;  Ontology;  Software product line},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lian2015191,
author={Lian, X. and Zhang, L.},
title={Optimized feature selection towards functional and non-functional requirements in Software Product Lines},
journal={2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings},
year={2015},
pages={191-200},
doi={10.1109/SANER.2015.7081829},
art_number={7081829},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928679034&partnerID=40&md5=9b9194e9ba1020911c7ec379b8437d34},
affiliation={School of Computer Science and Engineering, Beihang University, Beijing, China},
abstract={As an important research issue in software product line, feature selection is extensively studied. Besides the basic functional requirements (FRs), the non-functional requirements (NFRs) are also critical during feature selection. Some NFRs have numerical constraints, while some have not. Without clear criteria, the latter are always expected to be the best possible. However, most existing selection methods ignore the combination of constrained and unconstrained NFRs and FRs. Meanwhile, the complex constraints and dependencies among features are perpetual challenges for feature selection. To this end, this paper proposes a multi-objective optimization algorithm IVEA to optimize the selection of features with NFRs and FRs by considering the relations among these features. Particularly, we first propose a two-dimensional fitness function. One dimension is to optimize the NFRs without quantitative constraints. The other one is to assure the selected features satisfy the FRs, and conform to the relations among features. Second, we propose a violation-dominance principle, which guides the optimization under FRs and the relations among features. We conducted comprehensive experiments on two feature models with different sizes to evaluate IVEA with state-of-the-art multi-objective optimization algorithms, including IBEAHD, IBEA<inf>ε+</inf>, NSGA-II and SPEA2. The results showed that the IVEA significantly outperforms the above baselines in the NFRs optimization. Meanwhile, our algorithm needs less time to generate a solution that meets the FRs and the constraints on NFRs and fully conforms to the feature model. © 2015 IEEE.},
author_keywords={Feature Models;  Feature Selection;  Multi-objective Optimization;  Non-functional requirements optimization;  Software Product Line},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wang2015370,
author={Wang, S.a  b  and Ali, S.a  and Gotlieb, A.a },
title={Cost-effective test suite minimization in product lines using search techniques},
journal={Journal of Systems and Software},
year={2015},
volume={103},
number={C},
pages={370-391},
doi={10.1016/jjss.2014.08.024},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928045129&partnerID=40&md5=b5b0d61ca0c7922b68b68e5b89c1bca5},
affiliation={Certus Software v and v Center, Simula Research Laboratory, P.O. 134, Lysaker, Oslo, Norway; Department of Informatics, University of Oslo, P.O. 1080, Blindern, Oslo, Norway},
abstract={Cost-effective testing of a product in a product line requires obtaining a set of relevant test cases from the entire test suite via test selection and minimization techniques. In this paper, we particularly focus on test minimization for product lines, which identifies and eliminates redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. However, such minimization may result in the minimized test suite with low test coverage, low fault revealing capability, low priority test cases, and require more time than the allowed testing budget (e.g., time) as compared to the original test suite. To deal with the above issues, we formulated the minimization problem as a search problem and defined a fitness function considering various optimization objectives based on the above issues. To assess the performance of our fitness function, we conducted an extensive empirical evaluation by investigating the fitness function with three weight-based Genetic Algorithms (GAs) and seven multi-objective search algorithms using an industrial case study and 500 artificial problems inspired from the industrial case study. The results show that Random-Weighted Genetic Algorithm (RWGA) significantly outperforms the other algorithms since RWGA can balance all the objectives together by dynamically updating weights during each generation. Based on the results of our empirical evaluation, we also implemented a tool called TEst Minimization using Search Algorithms (TEMSA) to support test minimization using various search algorithms in the context of product lines. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Product line;  Search algorithm;  Test suite minimization},
document_type={Article},
source={Scopus},
}

@ARTICLE{Wang2015370,
author={Wang, S.a  b  and Ali, S.a  and Gotlieb, A.a },
title={Cost-effective test suite minimization in product lines using search techniques},
journal={Journal of Systems and Software},
year={2015},
volume={103},
pages={370-391},
doi={10.1016/j.jss.2014.08.024},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924958712&partnerID=40&md5=fefb76c6dbd14d17f9b74fb65f46d477},
affiliation={Certus Software VandV Center, Simula Research Laboratory, P.O. 134, Lysaker, Oslo, Norway; Department of Informatics, University of Oslo, P.O. 1080, Blindern, Oslo, Norway},
abstract={Cost-effective testing of a product in a product line requires obtaining a set of relevant test cases from the entire test suite via test selection and minimization techniques. In this paper, we particularly focus on test minimization for product lines, which identifies and eliminates redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. However, such minimization may result in the minimized test suite with low test coverage, low fault revealing capability, low priority test cases, and require more time than the allowed testing budget (e.g., time) as compared to the original test suite. To deal with the above issues, we formulated the minimization problem as a search problem and defined a fitness function considering various optimization objectives based on the above issues. To assess the performance of our fitness function, we conducted an extensive empirical evaluation by investigating the fitness function with three weight-based Genetic Algorithms (GAs) and seven multi-objective search algorithms using an industrial case study and 500 artificial problems inspired from the industrial case study. The results show that Random-Weighted Genetic Algorithm (RWGA) significantly outperforms the other algorithms since RWGA can balance all the objectives together by dynamically updating weights during each generation. Based on the results of our empirical evaluation, we also implemented a tool called TEst Minimization using Search Algorithms (TEMSA) to support test minimization using various search algorithms in the context of product lines. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Product line;  Search algorithm;  Test suite minimization},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Reinhartz-Berger2015191,
author={Reinhartz-Berger, I. and Wulf-Hadash, O.},
title={Improving the management of product lines by performing domain knowledge extraction and cross product line analysis},
journal={Information and Software Technology},
year={2015},
volume={59},
pages={191-204},
doi={10.1016/j.infsof.2014.11.007},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84921033182&partnerID=40&md5=162f3631a948359b8ce4ff662b84c968},
affiliation={Department of Information Systems, University of Haifa, Carmel Mountain, Haifa, Israel},
abstract={Context Increase in market competition is one of the main reasons for developing and maintaining families of systems, termed Product Lines (PLs). Managing those PLs is challenging, let alone the management of several related PLs. Currently, those PLs are managed separately or their relations are analyzed assuming explicit specification of dependencies or use of an underlying terminology. Such assumptions may not hold when developing the PLs in different departments or companies applying various engineering processes. Objective In this work we call for utilizing the knowledge gained from developing and maintaining different PLs in the same domain in order to recommend on improvements to the management of PLs. Method The suggested approach conducts domain knowledge extraction and cross PL analysis on feature diagrams - the main aid for modeling PL variability. The domain knowledge is extracted by applying similarity metrics, clustering, and mining techniques. Based on the created domain models, the approach performs cross PL analysis that examines relations in the domain models and generates improvement recommendations to existing PLs and overall management recommendations (e.g., merging or splitting PLs). Results The approach outcomes were evaluated by humans in a domain of mobile phones. The evaluation results may provide evidence that the outcomes of the approach in general and its recommendations in particular meet human perception of the given domain. Conclusion We conclude that through domain knowledge extraction and cross PL analysis the suggested approach may generate recommendations useful to the management of individual PLs, as well as to the overall management of different PLs in the same domain. © 2014 Elsevier B.V. All rights reserved.},
author_keywords={Domain analysis;  Feature modeling;  Software product line engineering;  Variability management},
document_type={Article},
source={Scopus},
}

@ARTICLE{Pascual2015392,
author={Pascual, G.G.a  and Lopez-Herrejon, R.E.b  and Pinto, M.a  and Fuentes, L.a  and Egyed, A.b },
title={Applying multiobjective evolutionary algorithms to dynamic software product lines for reconfiguring mobile applications},
journal={Journal of Systems and Software},
year={2015},
volume={103},
pages={392-411},
doi={10.1016/j.jss.2014.12.041},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924992041&partnerID=40&md5=9bb337d5cc967e3a4be5f44f79fcb946},
affiliation={Department of Languages and Computer Science, University of Málaga, Málaga, Spain; Institute for Systems Engineering and Automation, Johannes Kepler University Linz, Austria},
abstract={Mobile applications require dynamic reconfiguration services (DRS) to self-adapt their behavior to the context changes (e.g., scarcity of resources). Dynamic Software Product Lines (DSPL) are a well-accepted approach to manage runtime variability, by means of late binding the variation points at runtime. During the system's execution, the DRS deploys different configurations to satisfy the changing requirements according to a multiobjective criterion (e.g., insufficient battery level, requested quality of service). Search-based software engineering and, in particular, multiobjective evolutionary algorithms (MOEAs), can generate valid configurations of a DSPL at runtime. Several approaches use MOEAs to generate optimum configurations of a Software Product Line, but none of them consider DSPLs for mobile devices. In this paper, we explore the use of MOEAs to generate at runtime optimum configurations of the DSPL according to different criteria. The optimization problem is formalized in terms of a Feature Model (FM), a variability model. We evaluate six existing MOEAs by applying them to 12 different FMs, optimizing three different objectives (usability, battery consumption and memory footprint). The results are discussed according to the particular requirements of a DRS for mobile applications, showing that PAES and NSGA-II are the most suitable algorithms for mobile environments. © 2015 Elsevier Inc. All rights reserved.},
author_keywords={DSPL;  Dynamic reconfiguration;  Evolutionary algorithms},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Pascual2015392,
author={Pascual, G.G.a  and Lopez-Herrejon, R.E.b  and Pinto, M.a  and Fuentes, L.a  and Egyed, A.b },
title={Applying multiobjective evolutionary algorithms to dynamic software product lines for reconfiguring mobile applications},
journal={Journal of Systems and Software},
year={2015},
volume={103},
number={C},
pages={392-411},
doi={10.1016/jjss.2014.12.041},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928042355&partnerID=40&md5=83cfde027a2161616702389d3230cb8f},
affiliation={Department of Languages and Computer Science, University of Malaga, Malaga, Spain; Institute for Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Mobile applications require dynamic reconfiguration services (DRS) to self-adapt their behavior to the context changes (e.g., scarcity of resources). Dynamic Software Product Lines (DSPL) are a well-accepted approach to manage runtime variability, by means of late binding the variation points at runtime. During the system's execution, the DRS deploys different configurations to satisfy the changing requirements according to a multiobjective criterion (e.g., insufficient battery level, requested quality of service). Search-based software engineering and, in particular, multiobjective evolutionary algorithms (MOEAs), can generate valid configurations of a DSPL at runtime. Several approaches use MOEAs to generate optimum configurations of a Software Product Line, but none of them consider DSPLs for mobile devices. In this paper, we explore the use of MOEAs to generate at runtime optimum configurations of the DSPL according to different criteria. The optimization problem is formalized in terms of a Feature Model (FM), a variability model. We evaluate six existing MOEAs by applying them to 12 different FMs, optimizing three different objectives (usability, battery consumption and memory footprint). The results are discussed according to the particular requirements of a DRS for mobile applications, showing that PAES and NSGA-II are the most suitable algorithms for mobile environments. © 2015 Elsevier Inc. All rights reserved.},
author_keywords={DSPL;  Dynamic reconfiguration;  Evolutionary algorithms},
document_type={Article},
source={Scopus},
}

@ARTICLE{Dubslaff2015180,
author={Dubslaff, C. and Baier, C. and Klüppelholz, S.},
title={Probabilistic model checking for feature-oriented systems},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2015},
volume={8989},
pages={180-220},
doi={10.1007/978-3-662-46734-3_5},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84925625865&partnerID=40&md5=528966bb5e0d4be8a25ffedde7f74533},
affiliation={Technische Universität Dresden, Dresden, Germany},
abstract={Within product lines, collections of several related products are defined through their commonalities in terms of features rather than specifying them individually one-by-one. In this paper we present a compositional framework for modeling dynamic product lines by a statebased formalism with both probabilistic and nondeterministic behaviors. Rules for feature changes in products made during runtime are formalized by a coordination component imposing constraints on possible feature activations and deactivations. Our framework supports large-scaled product lines described through multi-features, i.e., where products may involve multiple instances of a feature. To establish temporal properties for products in a product line, verification techniques have to face a combinatorial blow-up that arises when reasoning about several feature combinations. This blow-up can be avoided by family-based approaches exploiting common feature behaviors. We adapt such approaches to our framework, allowing for a quantitative analysis in terms of probabilistic model checking to reason, e.g., about energy and memory consumption, monetary costs, or the reliability of products. Our framework can also be used to compute strategies how to trigger feature changes for optimizing quantitative objectives using probabilistic model-checking techniques. We present a natural and conceptually simple translation of product lines into the input language of the prominent probabilistic model checker Prism and show feasibility of this translation within a case study on an energy-aware server platform product line comprising thousands of products. To cope with the arising complexity, we follow the family-based analysis scheme and apply symbolic methods for a compact state-space representation. © Springer-Verlag Berlin Heidelberg 2015.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Lopez-Herrejon2015353,
author={Lopez-Herrejon, R.E.a  and Linsbauer, L.a  and Galindo, J.A.b  and Parejo, J.A.b  and Benavides, D.b  and Segura, S.b  and Egyed, A.a },
title={An assessment of search-based techniques for reverse engineering feature models},
journal={Journal of Systems and Software},
year={2015},
volume={103},
pages={353-369},
doi={10.1016/j.jss.2014.10.037},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924858053&partnerID=40&md5=6887e2270ea620201f397e6912b392ea},
affiliation={Institute for Software Systems Engineering, Johannes Kepler University Linz, Altenbergerstr. 69, Linz, Austria; Department of Computer Languages and Systems, University of Seville, Av Reina Mercedes S/N, Seville, Spain},
abstract={Successful software evolves from a single system by adding and changing functionality to keep up with users' demands and to cater to their similar and different requirements. Nowadays it is a common practice to offer a system in many variants such as community, professional, or academic editions. Each variant provides different functionality described in terms of features. Software Product Line Engineering (SPLE) is an effective software development paradigm for this scenario. At the core of SPLE is variability modelling whose goal is to represent the combinations of features that distinguish the system variants using feature models, the de facto standard for such task. As SPLE practices are becoming more pervasive, reverse engineering feature models from the feature descriptions of each individual variant has become an active research subject. In this paper we evaluated, for this reverse engineering task, three standard search based techniques (evolutionary algorithms, hill climbing, and random search) with two objective functions on 74 SPLs. We compared their performance using precision and recall, and found a clear trade-off between these two metrics which we further reified into a third objective function based on Fβ, an information retrieval measure, that showed a clear performance improvement. We believe that this work sheds light on the great potential of search-based techniques for SPLE tasks. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Feature model;  Reverse engineering;  Search Based Software Engineering},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Lopez-Herrejon2015353,
author={Lopez-Herrejon, R.E.a  and Linsbauer, L.a  and Galindo, J.A.b  and Parejo, J.A.b  and Benavides, D.b  and Segura, S.b  and Egyed, A.a },
title={An assessment of search-based techniques for reverse engineering feature models},
journal={Journal of Systems and Software},
year={2015},
volume={103},
number={C},
pages={353-369},
doi={10.1016/jjss.2014.10.037},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928015962&partnerID=40&md5=8b29d8e4dbec877787eb0777f51202c3},
affiliation={Institute for Software Systems Engineering, Johannes Kepler University Linz, Altenbergerstr. 69, Linz, Austria; Department of Computer Languages and Systems, University of Seville, Av Reina Mercedes S/N, Seville, Spain},
abstract={Successful software evolves from a single system by adding and changing functionality to keep up with users' demands and to cater to their similar and different requirements. Nowadays it is a common practice to offer a system in many variants such as community, professional, or academic editions. Each variant provides different functionality described in terms of features. Software Product Line Engineering (SPLE) is an effective software development paradigm for this scenario. At the core of SPLE is variability modelling whose goal is to represent the combinations of features that distinguish the system variants using feature models, the de facto standard for such task. As SPLE practices are becoming more pervasive, reverse engineering feature models from the feature descriptions of each individual variant has become an active research subject. In this paper we evaluated, for this reverse engineering task, three standard search based techniques (evolutionary algorithms, hill climbing, and random search) with two objective functions on 74 SPLs. We compared their performance using precision and recall, and found a clear trade-off between these two metrics which we further reified into a third objective function based on F<inf>β</inf>, an information retrieval measure, that showed a clear performance improvement. We believe that this work sheds light on the great potential of search-based techniques for SPLE tasks. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Feature model;  Reverse engineering;  Search Based Software Engineering},
document_type={Article},
source={Scopus},
}

@ARTICLE{Lopez-Herrejon201533,
author={Lopez-Herrejon, R.E. and Linsbauer, L. and Egyed, A.},
title={A systematic mapping study of search-based software engineering for software product lines},
journal={Information and Software Technology},
year={2015},
volume={61},
pages={33-51},
doi={10.1016/j.infsof.2015.01.008},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924704473&partnerID=40&md5=4da0e47fdd29cd2f9f70f1c1be8ff2cf},
affiliation={Institute for Software Systems Engineering, Johannes Kepler University Linz, Altenbergerstr. 69, Linz, Austria},
abstract={Context Search-Based Software Engineering (SBSE) is an emerging discipline that focuses on the application of search-based optimization techniques to software engineering problems. Software Product Lines (SPLs) are families of related software systems whose members are distinguished by the set of features each one provides. SPL development practices have proven benefits such as improved software reuse, better customization, and faster time to market. A typical SPL usually involves a large number of systems and features, a fact that makes them attractive for the application of SBSE techniques which are able to tackle problems that involve large search spaces. Objective The main objective of our work is to identify the quantity and the type of research on the application of SBSE techniques to SPL problems. More concretely, the SBSE techniques that have been used and at what stage of the SPL life cycle, the type of case studies employed and their empirical analysis, and the fora where the research has been published. Method A systematic mapping study was conducted with five research questions and assessed 77 publications from 2001, when the term SBSE was coined, until 2014. Results The most common application of SBSE techniques found was testing followed by product configuration, with genetic algorithms and multi-objective evolutionary algorithms being the two most commonly used techniques. Our study identified the need to improve the robustness of the empirical evaluation of existing research, a lack of extensive and robust tool support, and multiple avenues worthy of further investigation. Conclusions Our study attested the great synergy existing between both fields, corroborated the increasing and ongoing interest in research on the subject, and revealed challenging open research questions. © 2015 Elsevier B.V. All rights reserved.},
author_keywords={Evolutionary algorithm;  Metaheuristics;  Search based software engineering;  Software product line;  Systematic mapping study},
document_type={Review},
source={Scopus},
}

@ARTICLE{Segura2015138,
author={Segura, S.a  and Durán, A.a  and Sánchez, A.B.a  and Le Berre, D.b  and Lonca, E.b  and Ruiz-Cortés, A.a },
title={Automated metamorphic testing of variability analysis tools},
journal={Software Testing Verification and Reliability},
year={2015},
volume={25},
number={2},
pages={138-163},
doi={10.1002/stvr.1566},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924231632&partnerID=40&md5=d91c9c3ae326c45e13de40dc16efb574},
affiliation={ISA Research Group, Universidad de Sevilla, Spain; Faculté des Sciences Jean Perrin, Université D'Artois, Lens, France},
abstract={Variability determines the capability of software applications to be configured and customized. A common need during the development of variability-intensive systems is the automated analysis of their underlying variability models, for example, detecting contradictory configuration options. The analysis operations that are performed on variability models are often very complex, which hinders the testing of the corresponding analysis tools and makes difficult, often infeasible, to determine the correctness of their outputs, that is, the well-known oracle problem in software testing. In this article, we present a generic approach for the automated detection of faults in variability analysis tools overcoming the oracle problem. Our work enables the generation of random variability models together with the exact set of valid configurations represented by these models. These test data are generated from scratch using stepwise transformations and assuring that certain constraints (a.k.a. metamorphic relations) hold at each step. To show the feasibility and generalizability of our approach, it has been used to automatically test several analysis tools in three variability domains: feature models, common upgradeability description format documents and Boolean formulas. Among other results, we detected 19 real bugs in 7 out of the 15 tools under test. Copyright © 2015 John Wiley & Sons, Ltd.},
author_keywords={Automated testing;  Metamorphic testing;  Software testing;  Software variability},
document_type={Article},
source={Scopus},
}

@ARTICLE{terBeek2015312,
author={ter Beek, M.H. and Gnesi, S. and Mazzanti, F.},
title={From EU projects to a family of model checkers from kandinsky to KandISTI},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2015},
volume={8950},
pages={312-328},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924401850&partnerID=40&md5=cde6b3b6530831cdbb28fc017bdb18fb},
affiliation={Formal Methods && Tools lab (FM&&T), Istituto di Scienza e Tecnologie dell’Informazione A. Faedo (ISTI), Consiglio Nazionale delle Ricerche (CNR), Via G. Moruzzi 1, Pisa, Italy},
abstract={We describe the development of the KandISTI family of model checkers from its origins nearly two decades ago until its very recent latest addition. Most progress was made, however, during two integrated European projects, AGILE and SENSORIA, in which our FM&&T lab participated under the scientific coordination of Martin Wirsing. Moreover, the very name of the family of model checkers is partly due to Martin Wirsing’s passion for art and science. © Springer International Publishing Switzerland 2015.},
document_type={Article},
source={Scopus},
}

@BOOK{Slootweg20131,
author={Slootweg, P.J.},
title={Feature-oriented software product lines: Concepts and implementation},
journal={Feature-Oriented Software Product Lines: Concepts and Implementation},
year={2013},
pages={1-315},
doi={10.1007/978-3-642-37521-7_9},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84929546822&partnerID=40&md5=e9c79f41d9d624786a5f27a2f9b88d70},
affiliation={Radboud University Nijmegen Medical Center, Department of Pathology, Nijmegen, Netherlands},
abstract={While standardization has empowered the software industry to substantially scale software development and to provide affordable software to a broad market, it often does not address smaller market segments, nor the needs and wishes of individual customers. Software product lines reconcile mass production and standardization with mass customization in software engineering. Ideally, based on a set of reusable parts, a software manufacturer can generate a software product based on the requirements of its customer. The concept of features is central to achieving this level of automation, because features bridge the gap between the requirements the customer has and the functionality a product provides. Thus features are a central concept in all phases of product-line development. The authors take a developer's viewpoint, focus on the development, maintenance, and implementation of product-line variability, and especially concentrate on automated product derivation based on a user's feature selection. The book consists of three parts. Part I provides a general introduction to feature-oriented software product lines, describing the product-line approach and introducing the product-line development process with its two elements of domain and application engineering. The pivotal part II covers a wide variety of implementation techniques including design patterns, frameworks, components, feature-oriented programming, and aspect-oriented programming, as well as tool-based approaches including preprocessors, build systems, version-control systems, and virtual separation of concerns. Finally, part III is devoted to advanced topics related to feature-oriented product lines like refactoring, feature interaction, and analysis tools specific to product lines. In addition, an appendix lists various helpful tools for software product-line development, along with a description of how they relate to the topics covered in this book. To tie the book together, the authors use two running examples that are well documented in the product-line literature: data management for embedded systems, and variations of graph data structures. They start every chapter by explicitly stating the respective learning goals and finish it with a set of exercises; additional teaching material is also available online. All these features make the book ideally suited for teaching - both for academic classes and for professionals interested in self-study. © Springer-Verlag Berlin Heidelberg 2013. All rights are reserved.},
document_type={Book},
source={Scopus},
}

@ARTICLE{Henard2014650,
author={Henard, C.a  and Papadakis, M.a  and Perrouin, G.b  and Klein, J.a  and Heymans, P.b  and Traon, Y.L.a },
title={Bypassing the combinatorial explosion: Using similarity to generate and prioritize t-wise test configurations for software product lines},
journal={IEEE Transactions on Software Engineering},
year={2014},
volume={40},
number={7},
pages={650-670},
doi={10.1109/TSE.2014.2327020},
art_number={6823132},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904278397&partnerID=40&md5=ffa8dafc288f386b7de9ebc0a571b60a},
affiliation={Interdisciplinary Centre for Security, Reliability and Trust, University of Luxembourg, Luxembourg, Luxembourg; Precise Research Center in Software Engineering, University of Namur, Belgium},
abstract={Large Software Product Lines (SPLs) are common in industry, thus introducing the need of practical solutions to test them. To this end, t-wise can help to drastically reduce the number of product configurations to test. Current t-wise approaches for SPLs are restricted to small values of t. In addition, these techniques fail at providing means to finely control the configuration process. In view of this, means for automatically generating and prioritizing product configurations for large SPLs are required. This paper proposes (a) a search-based approach capable of generating product configurations for large SPLs, forming a scalable and flexible alternative to current techniques and (b) prioritization algorithms for any set of product configurations. Both these techniques employ a similarity heuristic. The ability of the proposed techniques is assessed in an empirical study through a comparison with state of the art tools. The comparison focuses on both the product configuration generation and the prioritization aspects. The results demonstrate that existing t-wise tools and prioritization techniques fail to handle large SPLs. On the contrary, the proposed techniques are both effective and scalable. Additionally, the experiments show that the similarity heuristic can be used as a viable alternative to t-wise. © 1976-2012 IEEE.},
author_keywords={prioritization;  search-based approaches;  similarity;  Software product lines;  T-wise Interactions;  testing},
document_type={Article},
source={Scopus},
}

@ARTICLE{Segura20143975,
author={Segura, S.a  and Parejo, J.A.a  and Hierons, R.M.b  and Benavides, D.a  and Ruiz-Cortés, A.a },
title={Automated generation of computationally hard feature models using evolutionary algorithms},
journal={Expert Systems with Applications},
year={2014},
volume={41},
number={8},
pages={3975-3992},
doi={10.1016/j.eswa.2013.12.028},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84892757033&partnerID=40&md5=b5c5fd23707e60ab0e56458607d83d03},
affiliation={Department of Computer Languages and Systems, University of Seville, Av Reina Mercedes S/N, 41012 Seville, Spain; School of Information Systems, Computing and Mathematics, Brunel University, Uxbridge, Middlesex UB7 7NU, United Kingdom},
abstract={A feature model is a compact representation of the products of a software product line. The automated extraction of information from feature models is a thriving topic involving numerous analysis operations, techniques and tools. Performance evaluations in this domain mainly rely on the use of random feature models. However, these only provide a rough idea of the behaviour of the tools with average problems and are not sufficient to reveal their real strengths and weaknesses. In this article, we propose to model the problem of finding computationally hard feature models as an optimization problem and we solve it using a novel evolutionary algorithm for optimized feature models (ETHOM). Given a tool and an analysis operation, ETHOM generates input models of a predefined size maximizing aspects such as the execution time or the memory consumption of the tool when performing the operation over the model. This allows users and developers to know the performance of tools in pessimistic cases providing a better idea of their real power and revealing performance bugs. Experiments using ETHOM on a number of analyses and tools have successfully identified models producing much longer executions times and higher memory consumption than those obtained with random models of identical or even larger size. © 2013 Elsevier Ltd. All rights reserved.},
author_keywords={Automated analysis;  Evolutionary algorithms;  Feature models;  Performance testing;  Search-based testing;  Software product lines},
document_type={Article},
source={Scopus},
}

@ARTICLE{Nualart-Vilaplana2014221,
author={Nualart-Vilaplana, J.a  and Pérez-Montoro, M.b  and Whitelaw, M.c },
title={How we draw texts: A review of approaches to text visualization and exploration},
journal={Profesional de la Informacion},
year={2014},
volume={23},
number={3},
pages={221-235},
doi={10.3145/epi.2014.may.02},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84903636971&partnerID=40&md5=118c26ee4b7076f8a0a259a1d8e0487d},
affiliation={Machine Learning Research Group at NICTA, Canberra Research Laboratory, Tower A, 7 London Circuit, Canberra City ACT 2601, Canberra, Australia; Facultat de Biblioteconomia i Documentació, Universitat de Barcelona, Melcior de Palau, 140, 08014 Barcelona, Spain; Faculty of Arts and Design, University of Canberra, Bldg, Floor and Room: 9, C12, ACT 2617, Canberra, Australia},
abstract={This paper presents a review of approaches to text visualization and exploration. Text visualization and exploration, we argue, constitute a subfield of data visualization, and are fuelled by the advances being made in text analysis research and by the growing amount of accessible data in text format. We propose an original classification for a total of 49 cases based on the visual features of the approaches adopted, identified using an inductive process of analysis. We group the cases (published between 1994 and 2013) in two categories: single-text visualizations and text-collection visualizations, both of which can be explored and compared online.},
author_keywords={Data display;  Data exploration;  Data visualization;  Information visualization;  Review;  Text analysis;  Text visualization},
document_type={Review},
source={Scopus},
}

@ARTICLE{Capilla20143,
author={Capilla, R.a  and Bosch, J.b  and Trinidad, P.c  and Ruiz-Cortés, A.c  and Hinchey, M.d },
title={An overview of Dynamic Software Product Line architectures and techniques: Observations from research and industry},
journal={Journal of Systems and Software},
year={2014},
volume={91},
number={1},
pages={3-23},
doi={10.1016/j.jss.2013.12.038},
note={cited By 3},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84900605085&partnerID=40&md5=58c6b5d99af36f622795ce5bd54cf6c4},
affiliation={Rey Juan Carlos University, Madrid, Spain; Chalmers University of Technology, Gothenburg, Sweden; University of Seville, Seville, Spain; Lero, Irish Software Engineering Research Centre, Limerick, Ireland},
abstract={Over the last two decades, software product lines have been used successfully in industry for building families of systems of related products, maximizing reuse, and exploiting their variable and configurable options. In a changing world, modern software demands more and more adaptive features, many of them performed dynamically, and the requirements on the software architecture to support adaptation capabilities of systems are increasing in importance. Today, many embedded system families and application domains such as ecosystems, service-based applications, and self-adaptive systems demand runtime capabilities for flexible adaptation, reconfiguration, and post-deployment activities. However, as traditional software product line architectures fail to provide mechanisms for runtime adaptation and behavior of products, there is a shift toward designing more dynamic software architectures and building more adaptable software able to handle autonomous decision-making, according to varying conditions. Recent development approaches such as Dynamic Software Product Lines (DSPLs) attempt to face the challenges of the dynamic conditions of such systems but the state of these solution architectures is still immature. In order to provide a more comprehensive treatment of DSPL models and their solution architectures, in this research work we provide an overview of the state of the art and current techniques that, partially, attempt to face the many challenges of runtime variability mechanisms in the context of Dynamic Software Product Lines. We also provide an integrated view of the challenges and solutions that are necessary to support runtime variability mechanisms in DSPL models and software architectures. © 2014 Elsevier Inc.},
author_keywords={Dynamic Software Product Lines;  Dynamic variability;  Feature models;  Software architecture},
document_type={Article},
source={Scopus},
}

@BOOK{Felfernig2014191,
author={Felfernig, A.a  and Hotz, L.b  and Bagley, C.c  and Tiihonen, J.d },
title={Configuration-Related Research Challenges},
journal={Knowledge-Based Configuration: From Research to Business Cases},
year={2014},
pages={191-195},
doi={10.1016/B978-0-12-415817-7.00015-3},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84902223353&partnerID=40&md5=d315c30d52076dd4ec29ee4f118ccd8b},
affiliation={Graz University of Technology, Graz, Austria; HITeC e.V., University of Hamburg, Hamburg, Germany; Oracle Corporation, Burlington MA, United States; Aalto University, Aalto, Finland},
abstract={In this part on advanced topics in configuration, we took a look at the issues of configuration knowledge engineering (testing and debugging and redundancy detection) and intelligent configurator user interfaces (personalized configuration and consumer decision-making). To stimulate further configuration-related research, we conclude this part with a discussion of issues for future research. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Knowledge-based Configuration;  Research Challenges},
document_type={Book Chapter},
source={Scopus},
}

@BOOK{Rabiser2014241,
author={Rabiser, R.a  and Vierhauser, M.b  and Lehofer, M.b  and Grünbacher, P.a  and Männistö, T.c },
title={Configuring and Generating Technical Documents},
journal={Knowledge-Based Configuration: From Research to Business Cases},
year={2014},
pages={241-250},
doi={10.1016/B978-0-12-415817-7.00020-7},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84902218853&partnerID=40&md5=4a331782f41fe591ae97dc8e77244de3},
affiliation={Johannes Kepler University Linz, Linz, Austria; Siemens VAI Metals Technologies, Linz, Austria; Aalto University, Aalto, Finland},
abstract={In industrial software development salespeople, product managers, or technical writers frequently create documents such as offers, contracts, user manuals, or technical documentation. For products that are configured specifically for different customers, the documentation also needs to be adapted to match the product. Such adaptation of documents is tedious and error-prone and can easily lead to inconsistencies. Stakeholders thus need configuration support for adapting documents. We describe a flexible approach for automatically generating product-specific documents based on product line variability models. We report on an industrial case example of applying the approach to support configuring and generating product-specific documents in an automation software product line. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Document Generation;  Knowledge-based Configuration;  Product Derivation;  Software Product Lines;  Tool Support;  Variability Modeling},
document_type={Book Chapter},
source={Scopus},
}

@BOOK{Hotz201441,
author={Hotz, L.a  and Felfernig, A.b  and Stumptner, M.c  and Ryabokon, A.d  and Bagley, C.e  and Wolter, K.a },
title={Configuration Knowledge Representation and Reasoning},
journal={Knowledge-Based Configuration: From Research to Business Cases},
year={2014},
pages={41-72},
doi={10.1016/B978-0-12-415817-7.00006-2},
note={cited By 17},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84902216801&partnerID=40&md5=508681d30363162858729a6589ff8683},
affiliation={HITeC e.V., University of Hamburg, Hamburg, Germany; Graz University of Technology, Graz, Austria; University of South Australia, Adelaide SA, Australia; Alpen-Adria Universität Klagenfurt, Klagenfurt, Austria; Oracle Corporation, Burlington MA, United States},
abstract={Configuration models specify the set of possible configurations (solutions). A configuration model together with a defined set of (customer) requirements are the major elements of a configuration task (problem). In this chapter, we discuss different knowledge representations that can be used for the definition of a configuration model. We provide examples that help to further develop the understanding of the underlying concepts and include a UML-based personal computer (PC) configuration model that is used as a reference example throughout this book. © 2014 Elsevier Inc. All rights reserved.},
author_keywords={Answer Set Programming;  Constraints;  Description Logics;  Feature Models;  Knowledge Representation;  Knowledge-based Configuration;  Unified Modelling Language},
document_type={Book Chapter},
source={Scopus},
}

@ARTICLE{Sabouri201435,
author={Sabouri, H.a  and Khosravi, R.a  b },
title={Reducing the verification cost of evolving product families using static analysis techniques},
journal={Science of Computer Programming},
year={2014},
volume={83},
pages={35-55},
doi={10.1016/j.scico.2013.06.009},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894570545&partnerID=40&md5=678754f017d4e61ed50311e5a7deaee4},
affiliation={School of Electrical and Computer Engineering, University of Tehran, Karegar Ave., Tehran, Iran; School of Computer Science, Institute for Research in Fundamental Sciences (IPM), Tehran, Iran},
abstract={Software product line engineering enables proactive reuse among a set of related products through explicit modeling of commonalities and differences among them. Software product lines are intended to be used in a long period of time. As a result, they evolve over time, due to the changes in the requirements. Having several individual products in a software family, verification of the entire family may take a considerable effort. In this paper we aim to decrease this cost by reducing the number of verified products using static analysis techniques. Furthermore, to reduce model checking costs after product line evolution, we restrict the number of products that should be re-verified by reusing the previous verification result. All proposed techniques are based on static analysis of the product family model with respect to the property and can be automated. To show the effectiveness of these techniques we apply them on a set of case studies and present the results. © 2013 Elsevier B.V.},
author_keywords={Model checking;  Program slicing;  Reduction techniques;  Software product lines;  Static analysis},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lengauer2014,
author={Lengauer, P.a  and Bitto, V.a  and Angerer, F.a  and Grünbacher, P.a  and Mössenböck, H.b },
title={Where has all my memory gone? Determining memory characteristics of product variants using virtual-machine-level monitoring},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556628},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897637982&partnerID=40&md5=b780dd94f639111f5335762e0d56239f},
affiliation={Christian Doppler Laboratory MEVSS, Johannes Kepler University Linz, Austria; Institute for System Software, Johannes Kepler University Linz, Austria},
abstract={Non-functional properties such as memory footprint have recently gained importance in software product line research. However, determining the memory characteristics of individual features and product variants is extremely challenging. We present an approach that supports the monitoring of memory characteristics of individual features at the level of Java virtual machines. Our approach provides extensions to Java virtual machines to track memory allocations and deal-locations of individual features based on a feature-to-code mapping. The approach enables continuous monitoring at the level of features to detect anomalies such as memory leaks, excessive memory consumption, or abnormal garbage collection times in product variants. We provide an evaluation of our approach based on different product variants of the DesktopSearcher product line. Our experiment with different program inputs demonstrates the feasibility of our technique. © 2014 ACM.},
author_keywords={feature-oriented software development;  Java;  memory footprint;  monitoring},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Seidl2014,
author={Seidl, C.a  and Schaefer, I.b  and Aßmann, U.a },
title={Capturing variability in space and time with hyper feature models},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556625},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897616868&partnerID=40&md5=c92a15e7820f49872e4e60400ae94a4a},
affiliation={Technische Universität Dresden, Software Technology Group, 01062 Dresden, Germany; Technische Universität Braunschweig, Software Engineering Institute, 38106 Braunschweig, Germany},
abstract={Software product lines (SPLs) and software ecosystems (SECOs) are approaches to capturing families of closely related software systems in terms of common and variable functionality. SPLs and especially SECOs are subject to evolution to adapt to new or changed requirements resulting in different versions of the software family and its variable assets. These versions may have to be maintained and used for products even after they were superseded by newer versions. Variability models describing valid combinations of variable assets, such as feature models, capture variability in space (configuration), but not variability in time (evolution) making it impossible to respect versions of variable assets in product definitions on a conceptual level. In this paper, we propose Hyper Feature Models (HFMs) explicitly providing feature versions as configurable units for product definition. Furthermore, we provide a version-aware constraint language to specify dependencies between features and ranges of feature versions as well as a procedure to automatically select valid combinations of versions for a pre-configuration of features. We demonstrate our approach in a case study. © 2014 ACM.},
author_keywords={constraint;  evolution;  hyper feature model (HFM);  software ecosystem (SECO);  software product line (SPL);  variability in time;  version},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sánchez2014,
author={Sánchez, A.B. and Segura, S. and Ruiz-Cortés, A.},
title={The Drupal framework: A case study to evaluate variability testing techniques},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556638},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897649985&partnerID=40&md5=de6353198a27406792a498089482854a},
affiliation={Department of Computer Languages and Systems, University of Seville, Spain},
abstract={Variability testing techniques search for effective but manageable test suites that lead to the rapid detection of faults in systems with high variability. Evaluating the effectiveness of these techniques in real settings is a must but challenging due to the lack of variability-intensive systems with available code, automated tests and fault reports. In this paper, we propose using the Drupal framework as a case study to evaluate variability testing techniques. First, we represent the framework variability as a feature model. Then, we report on extensive data extracted from the Drupal git repository and the Drupal issue tracking system. Among other results, we identified 378 faults in single features and 11 faults triggered by the interaction between two of the features of Drupal v7.23, reported during a one-year period. These data may give a new insight into the distribution of faults in variability-intensive systems and the fault propensity of features. To show the feasibility of our work, we used the case study to evaluate the effectiveness of a history-based test case prioritization criterion. Results suggest that this technique could contribute to accelerate the detection of faults of test suites based on combinatorial testing. © 2014 ACM.},
author_keywords={automated testing;  feature model;  test case prioritization;  test case selection;  testing;  variability},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Adelsberger2014,
author={Adelsberger, S. and Sobernig, S. and Neumann, G.},
title={Towards assessing the complexity of object migration in dynamic, feature-oriented software product lines},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556645},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897627381&partnerID=40&md5=0afc5087f45c3b6016f58af0b76af705},
affiliation={Institute for Information Systems and New Media, WU Vienna, Austria},
abstract={Dynamic Software Product Lines (DSPLs) implement features of a product family, from which products can be derived and reconfigured at runtime. This way, systems can alternate their configurations without service interruption. The activation and deactivation of features at runtime pose challenges for the implementation of a DSPL, in particular for handling object states such as runtime changes to object-scoped variables, their value assignments, and the variable properties. To quantify the complexity of this object migration, we propose a systematic code-level measurement approach which harvests feature implementations and the corresponding variability models for code introductions responsible for critical changes to object states. We have applied our measurement process tentatively to data sets representing 9 SPLs implemented using Fuji. This way, we arrived at first insights on object-migration complexity in SPLs. For example, we observed that the number of feature-specific object states is distributed very unequally in Fuji SPLs, with a few objects having an overly complex map of potential object states and the majority of objects potentially seeing transitions between 1 and 5 object states. We also evaluated different tactics of applying SAT solvers to analyze variability models in this context. © 2014 ACM.},
author_keywords={constructor anomaly;  dynamic software product line;  feature binding;  feature-oriented programming;  object migration},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Berger2014,
author={Berger, T. and Guo, J.},
title={Towards system analysis with variability model metrics},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556641},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897660283&partnerID=40&md5=fadbb3e0ab727e099efe340d8528fd5d},
affiliation={University of Waterloo, Waterloo, ON, Canada},
abstract={Variability models are central artifacts in highly configurable systems. They aim at planning, developing, and configuring systems by describing configuration knowledge at different levels of formality. The existence of large models using a variety of modeling concepts in heterogeneous languages with intricate semantics calls for a unified measuring approach. In this position paper, we attempt to take a first step towards such a measurement. We discuss perspectives of metrics, define low-level measurement goals, and conceive and implement metrics based on variability modeling concepts found in real-world languages and models. An evaluation of these metrics with real-world models and codebases provides insight into the benefits of such metrics for the defined perspectives. © 2014 ACM.},
author_keywords={empirical software engineering;  feature modeling;  metrics;  software product lines;  variability modeling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sannier2014,
author={Sannier, N. and Bécan, G. and Acher, M. and Ben Nasr, S. and Baudry, B.},
title={Comparing or configuring products: Are we getting the right ones?},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556636},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897644240&partnerID=40&md5=a7458807f2ae76787fc5e280472d74f7},
affiliation={Inria - IRISA Université de Rennes 1, Campus de Beaulieu, 35000 Rennes, France},
abstract={Product comparators and configurators aim to assist customers in choosing a product that meets their expectations. While comparators present similarities and differences between competing products, configurators propose an assisted environment to gradually choose and customize products. The two systems have pros and cons and are inherently different. But both share the same variability information background and operate over a set of (possible) products, typically represented through product comparison matrices (PCMs). A key issue is that current PCMs have no clear semantics, making their analysis and transformations imprecise and hard. In this paper, we sketch a research plan for generating dedicated comparators or configurators from PCMs. The core of our vision is the use of formal variability models to encode PCMs and enables a further exploitation by developers of comparators or configurators. We elaborate on five research questions and describe the expected outputs of the research. © 2014 ACM.},
author_keywords={feature organization;  product comparators;  product comparison matrices;  product configurators;  variability models},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Acher2014,
author={Acher, M.a  and Lopez-Herrejon, R.E.b  and Rabiser, R.c },
title={A survey on teaching of software product lines},
journal={ACM International Conference Proceeding Series},
year={2014},
doi={10.1145/2556624.2556629},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897625511&partnerID=40&md5=80199ab4730f8c99e4b0409032576a9e},
affiliation={University of Rennes 1, Inria, Rennes, France; Johannes Kepler University, Linz, Austria; CDL MEVSS, Johannes Kepler University Linz, Linz, Austria},
abstract={With around two decades of existence, the community of Software Product Line (SPL) researchers and practitioners is thriving as can be attested by the extensive research output and the numerous successful industrial projects. Education has a key role to support the next generation of engineers to build highly complex SPLs. Yet, it is unclear how SPLs are taught, what are the possible missing gaps and difficulties faced, what are the benefits, or what is the material available. In this paper, we carry out a survey with over 30 respondents with the purpose of capturing a snapshot of the state of teaching in our community. We report and discuss quantitative as well as qualitative results of the survey. We build upon them and sketch six concrete actions to continue improving the state of practice of SPL teaching. © 2014 ACM.},
author_keywords={software engineering teaching;  software product lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Narwane2014212,
author={Narwane, G.K.a  and Krishna, S.N.b  and Bhattacharjee, A.K.c },
title={A cost effective approach for analyzing software product lines},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8337 LNCS},
pages={212-223},
doi={10.1007/978-3-319-04483-5-22},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894249159&partnerID=40&md5=e09fc74c2a277eccc7cd0c7955794652},
affiliation={HBNI, Mumbai, India; IIT Bombay, Mumbai, India; BARC, Mumbai, India},
abstract={In the area of Software Product Lines(SPL), most of the research work focuses on automated analysis of SPLs and the traceability relation between the problem domain and solution domain. An SPL with few features can generate billions of products; to analyze such a large product space, we need efficient analysis operations. For a given specification, we can get many possible implementations; choosing one implementation from this is a non-trivial task. In this paper, we extend the work on analyzing software product lines to propose a cost effective approach that fetches products from a given SPL based on various factors. When there are multiple implementations for a given specification, then it is the cost factors which determine the product selection. To this end, we propose a revised formal framework for SPLs with cost factors. This approach has been implemented in a tool SPLANE-CF (SPL Analysis Engine with Cost Factors). We illustrate the efficiency of SPLANE-CF on a fairly large size case study. © 2014 Springer International Publishing Switzerland.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Rincón2014111,
author={Rincón, L.F.a  and Giraldo, G.L.a  and Mazo, R.b  and Salinesi, C.b },
title={An ontological rule-based approach for analyzing dead and false optional features in feature models},
journal={Electronic Notes in Theoretical Computer Science},
year={2014},
volume={302},
pages={111-132},
doi={10.1016/j.entcs.2014.01.023},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894169420&partnerID=40&md5=5f5b06c8d8fbd689236613af40646a7d},
affiliation={Departamento de Ciencias de la Computación y de la Decisión, National University of Colombia, Medellín, Colombia; CRI, Panthéon Sorbonne University, Paris, France},
abstract={Feature models are a common way to represent variability requirements of software product lines by expressing the set of feature combinations that software products can have. Assuring quality of feature models is thus of paramount importance for assuring quality in software product line engineering. However, feature models can have several types of defects that disminish benefits of software product line engineering.Two of such defects are dead features and false optional features. Several state-of-the-art techniques identify these defects, but only few of them tackle the problem of identifying their causes. Besides, the explanations they provide are cumbersome and hard to understand by humans. In this paper, we propose an ontological rule-based approach to: (a) identify dead and false optional features; (b)identify certain causes of these defects; and (c) explain these causes in natural language helping modelers to correct found defects. We represent our approach with a feature model taken from literature. A preliminary empirical evaluation of our approach over 31 FMs shows that our proposal is effective, accurate and scalable to 150 features. © 2014 Elsevier B.V.},
author_keywords={Defects;  Feature Models;  Ontologies;  Software Engineering},
document_type={Article},
source={Scopus},
}

@ARTICLE{Giraldo201468,
author={Giraldo, G.-L.a  and Rincón-Perez, L.b  and Mazo, R.c },
title={Identifying dead features and their causes in product line models: An ontological approach [An ontological approach:Identificando características muertas y sus causas en modelos de líneas de productos: Un enfoque ontológico]},
journal={DYNA (Colombia)},
year={2014},
volume={81},
number={183},
pages={68-77},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894547469&partnerID=40&md5=216ecec009f4d1193f16b9133e97b730},
affiliation={Universidad Nacional de Colombia Sede Medellín, Colombia; Master of Engineering Engineering Systems, Universidad Nacional de Colombia Sede Medellín, Colombia; CRI, Université Paris 1 Panthéon Sorbonne, France},
abstract={Feature Models (FMs) are a notation to represent differences and commonalities between products derived from a product line. However, product line modelers could unintentionally incorporate dead features in FMs. A dead feature is a type of defect, which implies that one or more features are not present in any product of the product line. Some authors have used ontologies in product lines, but they have not exploited ontology reasoning to identify and explain causes for defects in FMs in natural language. In this paper, we propose an ontology that represents FMs in OWL (Web Ontology Language). Then, we use SQWRL (Semantic Query-enhanced Web Rule Language) to identify dead features in a FM and identify and explain certain causes of this defect in natural language. Our preliminary empirical evaluation confrms the benefts of our approach.},
author_keywords={Dead features;  Feature models;  Ontologies;  Product lines;  SQWRL},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Segura2014139,
author={Segura, S. and Sánchez, A.B. and Ruiz-Cortés, A.},
title={Automated variability analysis and testing of an e-commerce site. An experience report},
journal={ASE 2014 - Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering},
year={2014},
pages={139-149},
doi={10.1145/2642937.2642939},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84908626279&partnerID=40&md5=2f00f131fec47c83efd2e056495236f0},
affiliation={Department of Computer Languages and Systems, University of Seville, Spain},
abstract={In this paper, we report on our experience on the development of La Hilandera, an e-commerce site selling haberdashery products and craft supplies in Europe. The store has a huge input space where customers can place almost three millions of different orders which made testing an extremely difficult task. To address the challenge, we explored the applicability of some of the practices for variability management in software product lines. First, we used a feature model to represent the store input space which provided us with a variability view easy to understand, share and discuss with all the stakeholders. Second, we used techniques for the automated analysis of feature models for the detection and repair of inconsistent and missing configuration settings. Finally, we used test selection and prioritization techniques for the generation of a manageable and effective set of test cases. Our findings, summarized in a set of lessons learnt, suggest that variability techniques could successfully address many of the challenges found when developing e-commerce sites. © 2014 ACM.},
author_keywords={Automated testing;  E-commerce;  Experience report;  Feature modelling;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dehmouch2014,
author={Dehmouch, I.},
title={Towards an agile feature composition for a large scale software product lines},
journal={Proceedings - International Conference on Research Challenges in Information Science},
year={2014},
doi={10.1109/RCIS.2014.6861086},
art_number={6861086},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84906739768&partnerID=40&md5=47555c580c8c6c10b00b9c24279ee0f9},
affiliation={IMS Team, SIME Laboratory, Mohammed v Souissi University, Rabat, Morocco},
abstract={Modern applications tend to be cross-industry and to cover simultaneously different domains. Feature models need then to be composed in order to build domains with much larger scopes. Many approaches have been proposed by researchers to address this composition issue. Though, an overview of these compositional approaches shows that there are several areas for improvement especially in terms of automation tool support and agility. Our proposal in this doctoral paper is to discuss the feasibility of bringing the agility and the dynamism of software oriented computing techniques to the feature models composition relevant to different domains throughout a mashing up of their cooperating services. © 2014 IEEE.},
author_keywords={Agile Software Development;  Domain Specific Engineering;  Feature Model;  Product Line Engineering;  Service Oriented Computing},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Stettinger201417,
author={Stettinger, M.a  and Felfernig, A.a  and Jeran, M.a  and Ninaus, G.a  and Leitner, G.b  and Reiterer, S.c },
title={Configuring decision tasks},
journal={CEUR Workshop Proceedings},
year={2014},
volume={1220},
pages={17-21},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84913541846&partnerID=40&md5=0b5d2142620a2cf55a9a1fc90d8131f5},
affiliation={Graz University of Technology, Graz, Austria; Alpen Adria University, Alpen Adria, Austria; SelectionArts Intelligent Decision Technologies GmbH, Austria},
abstract={In most cases, decision tasks are individual and different decision tasks require different combinations of features. Features can be, for instance, special preference visibilities during the decision process or specific heuristics that support the recommendation of decisions. To find the right features for a decision task it is essential to offer a corresponding configuration functionality. In this paper we illustrate how the design of a decision task can be represented as a configuration problem. The underlying configuration knowledge is already integrated in a tool called CHOICLA. Copyright © 2014.},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Quinton2014122,
author={Quinton, C.a  and Pleuss, A.b  and Le Berre, D.c  and Duchien, L.a  and Botterweck, G.b },
title={Consistency checking for the evolution of cardinality-based feature models},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={122-131},
doi={10.1145/2648511.2648524},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907815649&partnerID=40&md5=6a42a12ef9756bfa50e35e131aa97c76},
affiliation={INRIA Lille-Nord Europe, LIFL UMR CNRS 8022, University Lille 1, France; Lero-The Irish Software Engineering Research Center, University of Limerick, Ireland; LIFL UMR CNRS 8022, Artois University, France},
abstract={Feature-models (fms) are a widely used approach to specify the commonalities and variability in variable systems and software product lines. Various works have addressed edits to fms for fm evolution and tool support to ensure consistency of fms. An important extension to fms are feature cardinalities and related constraints, as extensively used e.g., when modeling variability of cloud computing environments. Since cardinality-based fms pose additional complexity, additional support for evolution and consistency checking with respect to feature cardinalities would be desirable, but has not been addressed yet. In this paper, we discuss common cardinality-based fm edits and resulting inconsistencies based on experiences with fms in cloud domain. We introduce tool-support for automated inconsistency detection and explanation based on an off-the-shelf solver. We demonstrate the feasibility of the approach by an empirical evaluation showing the performance of the tool. Copyright 2014 ACM.},
author_keywords={Cardinality;  Consistency;  Edit;  Feature model},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Achour2014,
author={Achour, I. and Labed, L. and Ben Ghezala, H.},
title={Towards an extended tool for analysis of extended feature models},
journal={2014 International Symposium on Networks, Computers and Communications, ISNCC 2014},
year={2014},
doi={10.1109/SNCC.2014.6866516},
art_number={6866516},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907320784&partnerID=40&md5=7599c22fe197059b1d0ef940ebda2f51},
affiliation={Computer Science Department, Manouba University, ENSI/ Lab. RIADI-GDL, Manouba, Tunisia},
abstract={In the context of Software Product Line (SPL) reuse paradigm, one of the most widely used models is the feature model. It describes the set of products in an SPL in terms of their features and the relationships among them. A feature is an externally desired service by the system. While features concern functional aspects, non-functional features must also be considered which have impact on the quality of the SPL derived systems. For this purpose, Extended feature models are proposed in the literature. In order to verify the consistency of such models, several techniques are proposed. We adopt a formal approach that represents Extended Feature Models and reason about them for proving consistency and other operations. In this paper, we show the impact of non-functional attributes on the analysis operations of feature models. In this work, we have resumed analysis operations of feature models listed in the literature. Moreover, we studied the effect of adding the non-functional attributes on these operations by giving examples. So this has enabled us to emphasize the presence of three types of constraints namely: constraint value, constraint attribute-attribute and constraint feature-attribute. © 2014 IEEE.},
author_keywords={analysis operations;  extended feature models;  Non-functional attributes},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Bezerra2014282,
author={Bezerra, C.I.M.a  b  and Andrade, R.M.C.a  b  and Monteiro, J.M.S.b },
title={Measures for quality evaluation of feature models},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8919},
pages={282-297},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84919624652&partnerID=40&md5=2f9e87d71ca956a1d25898b20a64ab01},
affiliation={Group of Computer Networks, Software Engineering and Systems (GREat), Campus do Pici - Bloco 942-A, Fortaleza, CE, Brazil; Computer Science Department (DC) Federal University of Ceará, UFC Fortaleza, Brazil},
abstract={In Software Product Lines (SPL), quality evaluation is a critical factor, because an error in a SPL can spread to various end products. However, it is often proved impractical to ensure the quality of all products of a given SPL both for economic reasons and the effort needed due to their large number. In this context, a strategy that can be used is to make quality assessments on the initial phases of the SPL development. This approach avoids having errors that could be propagated to the next SPL phases. So, taking into account the feature model, which is one of the most important artifacts in a SPL since its quality directly affects the quality of the SPL end products, to assure the quality of the feature model is one of the current strategies to assess the quality of a SPL. In this sense, one way to evaluate the feature model is to use measures, which could be associated with the feature model quality characteristics and their quality attributes. This paper presents a measures catalog, which can be used to support the quality evaluation of the feature model. In order to identify these measures, a systematic mapping is conducted and to validate the measures catalog, we perform a peer review with experts in software quality and SPL. Besides that, to evaluate the use of the proposed catalog, we apply the measures in three feature models in the domain of mobile applications. The results show that the proposed measures catalog can be effectively deployed to support the quality evaluation of the feature models. © Springer International Publishing Switzerland 2014.},
author_keywords={Feature model;  Measures;  Quality evaluation;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Berger2014330,
author={Berger, T.a  and Stənciulescu, S.a  and Øgård, O.b  and Haugen, Ø.c  and Larsen, B.a  and Wąsowski, A.a },
title={To connect or not to connect: Experiences from modeling topological variability},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={330-339},
doi={10.1145/2648511.2648549},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907806821&partnerID=40&md5=a3ea3566c858b14f14dbb3ef72f2111b},
affiliation={University of Waterloo, IT University of Copenhagen, Denmark; Autronica Trondheim, Norway; SINTEF Oslo, Norway},
abstract={Variability management aims at taming variability in large and complex software product lines. To efficiently manage variability, it has to be modeled using formal representations, such as feature or decision models. Such models are efficient in many domains, where variability is about switching on and off features, or using parameters to customize products of the product line. However, variability can be represented in the form of a topology in domains where variability is about connecting components in a certain order, in specific interconnected hierarchies, or in different quantities. In this experience report, we explore topological variability within a case study of large-scale fire alarm systems. We identify core characteristics of the variability, derive modeling requirements, model the variability using UML2 class diagrams, and discuss the applicability of further variability modeling languages. We show that, although challenging, class diagrams can suffice to represent topological variability in order to generate a configurator tool. In contrast, modeling parallel and recursive structures, cycles, informal constraints, and orthogonal hierarchies were among the main experienced challenges that require further research. Copyright 2014 ACM.},
author_keywords={Class diagrams;  Configuration;  Experience report;  Software product lines;  Topology;  Variability modeling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Ziadi20141064,
author={Ziadi, T.a  and Henard, C.b  and Papadakis, M.b  and Ziane, M.a  and Le Traon, Y.b },
title={Towards a language-independent approach for reverse-engineering of Software Product Lines},
journal={Proceedings of the ACM Symposium on Applied Computing},
year={2014},
pages={1064-1071},
doi={10.1145/2554850.2554874},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905647890&partnerID=40&md5=e7f098bb7e18cbcdd7484cbb527223fc},
affiliation={UPMC, LIP6, Paris, France; SnT, University of Luxembourg, Luxembourg, Luxembourg},
abstract={Common industrial practices lead to the development of similar software products. These products are usually managed in an ad-hoc way which gradually results in a low product quality. To overcome this problem, it is essential to migrate these products into a Software Product Line (SPL). Towards this direction, this paper proposes a language-independent approach capable of reverse-engineering an SPL from the source code of product variants. A prototype tool and a case study show the feasibility and the practicality of the proposed approach. Copyright 2014 ACM.},
author_keywords={Reverse-engineering;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kolokolov2014155,
author={Kolokolov, V.a  and Ruehl, S.T.c  and Baumann, P.b  and Zhang, S.e  and Verclas, S.A.W.d },
title={Modelling variability in activity diagrams for mobile business applications},
journal={Proceedings - International Computer Software and Applications Conference},
year={2014},
pages={155-160},
doi={10.1109/COMPSAC.2014.23},
art_number={6899213},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928591903&partnerID=40&md5=aacccd009cf8fc013551ac912013dac9},
affiliation={Institute of Electrical and Electronics Engineers, Frankfurt am Main, Germany; Wireless Sensor Networks Lab, TU Darmstadt, Rundeturm-Str. 10, Darmstadt, Germany; Clausthal University of Technology, Albrecht-von-Groddeck-Str. 7, Clausthal-Zellerfeld, Germany; T-Systems International GmbH, Heinrich-Hertz-Str. 1, Darmstadt, Germany; Darmstadt, Germany},
abstract={Advances in development and deployment of mobile business applications (MBAs) based on the hybrid Web approach (hybrid MBAs) create new possibilities for enterprises to mobilize their business processes (BPs). Despite the fact that variability has a natural appearance in complex environments among different enterprises, current development tools for hybrid MBAs are lacking systematic support for variable features. We analyse in this paper the formation of hybrid MBAs' variable workflows on the BP-level by conducting an exploratory study within the context of a real-world, widespread BP instance. We also discuss quality assurance of domain activity diagrams (DADs), which document variability in BPs' workflows. Novel verification techniques for a structural analysis of DADs are highlighted. © 2014 IEEE.},
author_keywords={Hybrid Web;  Software Product Lines;  Variability Modeling;  Verification Techniques},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Varela-Vaca201457,
author={Varela-Vaca, A.J. and Gasca, R.M.},
title={Formalization of security patterns as a means to infer security controls in business processes},
journal={Logic Journal of the IGPL},
year={2014},
volume={23},
number={1},
pages={57-72},
doi={10.1093/jigpal/jzu042},
art_number={jzu042},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84922475258&partnerID=40&md5=39dee808e2412687fb0734ba050c03ef},
affiliation={Department of Computer Languages and Information Systems, University of Seville, Escuela Superior de Ingenieŕia Informatica, Avd. Reina Mercedes s/n, Seville, Spain},
abstract={The growing trend towards the automation and externalization of business processes by means of Technology Infrastructure (TI), such as Business Process Management Systems, has increased the security risks in the organizations. In the majority of cases, the issue of security is overlooked by default in these systems. Therefore, the early selection and implementation of security controls that mitigate risks is a real and crucial need. Nevertheless, there exists an enormous range of IT security controls and their configuration is a human, manual, time-consuming and error-prone task. In addition, security controls are implemented out separately from the organization perspective and involve many stakeholders. This separation makes difficult to ensure the effectiveness of these controls with regard to organizational requirements. In this article, we propose a formalization of security controls based on security pattern templates and feature models. This formalization allows applying feature domain-oriented analysis and constraint programming techniques for the automatic inference, selection and generation of optimal security controls with regard to single and multiple business objectives. © The Author 2014.},
author_keywords={Business process;  Constraint programming;  Feature model;  Optimization;  Security patterns},
document_type={Article},
source={Scopus},
}

@BOOK{Stein2014132,
author={Stein, J.a  and Nunes, I.a  and Cirilo, E.b },
title={Preference-based feature model configuration with multiple stakeholders},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={132-141},
doi={10.1145/2648511.2648525},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907817856&partnerID=40&md5=e5be8a1a89d2ea4c74be88122528b137},
affiliation={Instituto de Informática, UFRGS, Porto Alegre, Brazil; Departamento de Ciência da Computação, UFSJ, São João del-Rei, Brazil},
abstract={Feature model configuration is known to be a hard, errorprone and time-consuming activity. This activity gets even more complicated when it involves multiple stakeholders in the configuration process. Research work has proposed approaches to aid multi-stakeholder feature model configuration, but they rely on systematic processes that constraint decisions of some of the stakeholders. In this paper, we propose a novel approach to improve the multi-stakeholder configuration process, considering stakeholders' preferences expressed through both hard and soft constraints. Based on such preferences, we recommend different product configurations using different strategies from the social choice theory. We conducted an empirical study to evaluate the effectiveness of our strategies with respect to individual stakeholder satisfaction and fairness among all stakeholders. Results indicate that particular strategies perform best with respect to these aspects. Copyright is held by the owner/author(s).},
author_keywords={Feature model configuration;  Preferences;  Social choice},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Urli2014112,
author={Urli, S. and Blay-Fornarino, M. and Collet, P.},
title={Handling complex configurations in software product lines: A tooled approach},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={112-121},
doi={10.1145/2648511.2648523},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907853407&partnerID=40&md5=27f8038150bc5746d7bc1d0a199da910},
affiliation={Univ. Nice Sophia Antipolis, CNRS, UMR 7271, Sophia Antipolis, France},
abstract={As Software Product Lines (SPLs) are now more widely applied in new application fields such as IT or Web systems, complex and large-scale configurations have to be handled. In these fields, the strong domain orientation leads to the need to manage interrelated SPLs and multiple instances of configured sub-products, resulting in complex configurations that cannot be easily represented by simple sets of features. In this paper we propose a tooled approach to manage such SPLs through a domain model that interrelates several feature models in a consistent way. The approach thus shifts part of the domain knowledge to the problem space and supports the derivation of complex configurations with multiple instantiations and associations of sub-products. We also report on the application of our approach to an industrialstrength software development in the field of digital signage. Copyright is held by the owner/author(s).},
author_keywords={Configuration;  Software Product Line},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Moriz2014,
author={Moriz, N.a  and Böttcher, B.b  and Niggemann, O.b  and Lackhove, J.c },
title={Assisted design for automation systems - From formal requirements to final designs},
journal={19th IEEE International Conference on Emerging Technologies and Factory Automation, ETFA 2014},
year={2014},
doi={10.1109/ETFA.2014.7005288},
art_number={7005288},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928036617&partnerID=40&md5=9b4a0e774437ce65f2cf420c2e90d0e5},
affiliation={InIT - Institute Industrial IT, OWL University of Applied Sciences, Lemgo, Germany; Fraunhofer IOSB-INA, Lemgo, Germany; Lenze Automation Gmbh Aerzen, Germany},
abstract={In this paper, the authors present an engineering approach for generating automation system solutions based on formalised requirements. This enables assistant systems which guide engineers during the design phase of todays more and more complex automation systems. A software prototype is used for the evaluation of this approach in practice. The main contribution is to directly use a formal requirements model as input for the automated synthesis of automation systems and to formalise the expert knowledge for this synthesis. The result are consistent, maintainable automation systems and with that shorter and reproducible development cycles. © 2014 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{White2014119,
author={White, J.a  and Galindo, J.A.b  and Saxena, T.a  and Dougherty, B.a  and Benavides, D.b  and Schmidt, D.C.a },
title={Evolving feature model configurations in software product lines},
journal={Journal of Systems and Software},
year={2014},
volume={87},
number={1},
pages={119-136},
doi={10.1016/j.jss.2013.10.010},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84888645293&partnerID=40&md5=2aae066262ae2dc929dd7ba74b62a35a},
affiliation={Vanderbilt University, Nashville, TN, United States; University of Seville, Seville, Spain},
abstract={The increasing complexity and cost of software-intensive systems has led developers to seek ways of reusing software components across development projects. One approach to increasing software reusability is to develop a software product-line (SPL), which is a software architecture that can be reconfigured and reused across projects. Rather than developing software from scratch for a new project, a new configuration of the SPL is produced. It is hard, however, to find a configuration of an SPL that meets an arbitrary requirement set and does not violate any configuration constraints in the SPL. Existing research has focused on techniques that produce a configuration of an SPL in a single step. Budgetary constraints or other restrictions, however, may require multi-step configuration processes. For example, an aircraft manufacturer may want to produce a series of configurations of a plane over a span of years without exceeding a yearly budget to add features. This paper provides three contributions to the study of multi-step configuration for SPLs. First, we present a formal model of multi-step SPL configuration and map this model to constraint satisfaction problems (CSPs). Second, we show how solutions to these SPL configuration problems can be automatically derived with a constraint solver by mapping them to CSPs. Moreover, we show how feature model changes can be mapped to our approach in a multi-step scenario by using feature model drift. Third, we present empirical results demonstrating that our CSP-based reasoning technique can scale to SPL models with hundreds of features and multiple configuration steps. © 2013 Elsevier Inc.},
author_keywords={Feature model;  Multi-step configuration;  Software product line},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Dubslaff2014169,
author={Dubslaff, C. and Klüppelholz, S. and Baier, C.},
title={Probabilistic model checking for energy analysis in software product lines},
journal={MODULARITY 2014 - Proceedings of the 13th International Conference on Modularity (Formerly AOSD)},
year={2014},
pages={169-180},
doi={10.1145/2577080.2577095},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84900025711&partnerID=40&md5=066dd72905cf0a429964a904be98da8f},
affiliation={Technische Universität Dresden, Faculty of Computer Science, Germany},
abstract={In a software product line (SPL), a collection of software products is defined by their commonalities in terms of features rather than explicitly specifying all products one-by-one. Several verification techniques were adapted to establish temporal properties of SPLs. Symbolic and family-based model checking have been proven to be successful for tackling the combinatorial blow-up arising when reasoning about several feature combinations. However, most formal verification approaches for SPLs presented in the literature focus on the static SPLs, where the features of a product are fixed and cannot be changed during runtime. This is in contrast to dynamic SPLs, allowing to adapt feature combinations of a product dynamically after deployment. The main contribution of the paper is a compositional modeling framework for dynamic SPLs, which supports probabilistic and nondeterministic choices and allows for quantitative analysis. We specify the feature changes during runtime within an automata-based coordination component, enabling to reason over strategies how to trigger dynamic feature changes for optimizing various quantitative objectives, e.g., energy or monetary costs and reliability. For our framework there is a natural and conceptually simple translation into the input language of the prominent probabilistic model checker PRISM. This facilitates the application of PRISM's powerful symbolic engine to the operational behavior of dynamic SPLs and their family-based analysis against various quantitative queries. We demonstrate feasibility of our approach by a case study issuing an energy-aware bonding network device. Copyright © 2014 ACM. Copyright © 2014 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Collet2014273,
author={Collet, P.},
title={Domain specific languages for managing feature models: Advances and challenges},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8802},
pages={273-288},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84910681004&partnerID=40&md5=2c0151bf4dd9513b8d209e0795ad63f7},
affiliation={Univ. Nice Sophia Antipolis, CNRS, I3S, UMR 7271, Sophia Antipolis, France},
abstract={Managing multiple and complex feature models is a tedious and error-prone activity in software product line engineering. Despite many advances in formal methods and analysis techniques, the supporting tools and APIs are not easily usable together, nor unified. In this paper, we report on the development and evolution of the Familiar Domain-Specific Language (DSL). Its toolset is dedicated to the large scale management of feature models through a good support for separating concerns, composing feature models and scripting manipulations. We overview various applications of Familiar and discuss both advantages and identified drawbacks. We then devise salient challenges to improve such DSL support in the near future. © Springer-Verlag Berlin Heidelberg 2014.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hammani2014146,
author={Hammani, F.Z. and Rhanoui, M. and El Asri, B.},
title={Towards a variable non-functional requirements integration for component-based product line: A generic approach},
journal={2014 2nd World Conference on Complex Systems, WCCS 2014},
year={2014},
pages={146-151},
doi={10.1109/ICoCS.2014.7060992},
art_number={7060992},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84929170208&partnerID=40&md5=d4c09c69a0fba3c90aa97a955f72c227},
affiliation={ENSIAS, SIME Laboratory, Mohammed V Souissi University, Rabat, Morocco},
abstract={Software Product Line and Component-Based Software Engineering are two expanding paradigms for developing critical and complex systems. Therefore, these two paradigms seem have complementary strengths. So, significant benefits can be gained from their integration. Despite the fact that Non-Functional Requirements (such as security, performance and reliability) are critical to software systems, and they must be taken into account at early stage of software development life cycle and should be explicitly specified as well as functional requirements; these NFR are overlooked in Software Product line and Component-Based Software Development Processes. So, our main objective is to discuss some recent approaches in the field and to propose a new extension to Software Product Line processes that supports Component-Based Approaches, and integrates Non-Functional Requirement in domain requirements stage. © 2014 IEEE.},
author_keywords={CBSD;  Complex systems;  Components;  Development process;  Domain engineering;  Feature Model;  NFR;  Reuse;  SPL},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Hartmann2014227,
author={Hartmann, H.a  and Van Der Linden, F.b  and Bosch, J.c },
title={Risk based testing for software product line engineering},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={227-231},
doi={10.1145/2648511.2648535},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907851930&partnerID=40&md5=f57e1ca63ca46d27fd166aa0063b2959},
affiliation={University of Groningen, Groningen, Netherlands; Philips Healthcare, Best, Netherlands; Chalmers University of Technology, Gothenburg, Sweden},
abstract={The variability of product lines increases over time thereby leading to an increasing effort for testing. Since the available time for test activities is limited an efficiency improvement is needed to ensure that products have sufficient quality. This paper introduces risk-based testing for software product lines. Our approach is based on risk based testing for single system engineering which is extended with a dimension that captures the percentage of product variants that use a particular development artifact. Based on the risk of development artifacts, the priorities for domain and application engineering are determined. We demonstrate our approach using a case study from an existing product line and discuss tool support. We conclude that the basic ideas behind risk-based testing for product lines are intuitive, pragmatic in nature, and provide the means for practitioners for guiding the test effort. Copyright 2014 ACM.},
author_keywords={Risk based testing;  Software product line engineering},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{TerBeek201478,
author={Ter Beek, M.H.a  and De Vink, E.P.b },
title={Software product line analysis with mCRL2},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={2},
pages={78-85},
doi={10.1145/2647908.2655970},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907833969&partnerID=40&md5=25757423413a40cb47afdd9fc2e3e5fb},
affiliation={ISTI, CNR, Pisa, Italy; Eindhoven University of Technology and CWI, Amsterdam, Netherlands},
abstract={The mCRL2 language and supporting software provide a state-of-the-art tool suite for the verification of distributed systems. In this paper, we present the general principles, extrapolated from [7,8], which make us believe that mCRL2 can also be used for behavioral variability analysis of product families. The mCRL2 data language allows to smoothly deal with feature sets and attributes, its process language is sufficiently rich to model feature selection, as well as product behavior based on an FTS-like semantics. Because of the feature-orientation, our modeling strategy allows a natural refactoring of the semantic model of a product family into a parallel composition of components that reflects coherent sets of features. This opens the way for dedicated abstraction and reduction techniques that strengthen the prospect of a scalable verification approach to software product lines. In this paper, we sketch how to model product families in mCRL2 and how to apply a modular verification method, preparing the ground to further assess the scalability of our approach, in particular regarding model checking. Copyright 2014 ACM.},
author_keywords={Behavioral analysis;  Model checking;  Modular verification;  Product families;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Torkamani2014285,
author={Torkamani, M.A.},
title={Metric suite to evaluate reusability of software product line},
journal={International Journal of Electrical and Computer Engineering},
year={2014},
volume={4},
number={2},
pages={285-294},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928482200&partnerID=40&md5=9449bbc23f857033aad1accdeccf3f2d},
affiliation={R and D Department, Iranian Telecommunication Manufacturing Company, Shiraz, Iran},
abstract={Metrics have long been used to measure and evaluate software products and processes. Software product line architecture is a field in which few metrics have been applied, a surprising fact given the important role of software product line architecture in software product line development. Recently, Some metrics have been developed to assess software product line architecture. These metrics are useful but have not been widely used in industry. In this paper, some new metrics are provided to assess reusability of Software product line architecture. Our metrics are evaluated in action. Copyright © 2014 Institute of Advanced Engineering and Science. All rights reserved.},
author_keywords={Reusability;  Software metrics;  Software product line},
document_type={Article},
source={Scopus},
}

@ARTICLE{Murguzur2014241,
author={Murguzur, A.a  and De Carlos, X.a  and Trujillo, S.a  and Sagardui, G.b },
title={Context-aware staged configuration of process variants@runtime},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8484 LNCS},
pages={241-255},
doi={10.1007/978-3-319-07881-6_17},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84903163373&partnerID=40&md5=21bb53d4d4cc3f2c48c7c17289341842},
affiliation={Software Production Area, IK4-Ikerlan Research Center, Spain; Embedded Systems Group, Mondragon University, Spain},
abstract={Process-based context-aware applications are increasingly becoming more complex and dynamic. Besides the large sets of process variants to be managed in such dynamic systems, process variants need to be context sensitive in order to accommodate new user requirements and intrinsic complexity. This paradigm shift forces us to defer decisions to runtime where process variants must be customized and executed based on a recognized context. However, there exists a lack of deferral of the entire process variant configuration and execution to perform an automated decision of subsequent variation points at runtime. In this paper, we present a holistic methodology to automatically resolve process variability at runtime. The proposed solution performs a staged configuration considering static and dynamic context data to accomplish effective decision making. We demonstrate our approach by exemplifying a storage operation process in a smart logistics scenario. Our evaluation demonstrates the performance and scalability results of our methodology. © 2014 Springer International Publishing.},
author_keywords={Context-awareness;  Dynamic Software Product Lines;  Late Selection;  Runtime Variability;  Smart Logistics},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Song2014521,
author={Song, C.a  and Lee, S.b  and Lee, W.c },
title={A refinement technique for duplication and collision between features in software product line engineering},
journal={International Journal of Software Engineering and Knowledge Engineering},
year={2014},
volume={24},
number={4},
pages={521-551},
doi={10.1142/S021819401450020X},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84929309884&partnerID=40&md5=fc8b84f8553bcb4a5bcc25ff742555c4},
affiliation={School of Computer Information, Kyungpook National University, 386 Gajang-Dong, Sangju, Gyeongsang Buk-Do, South Korea; ROK Incheon Naval Sector Defense Command, 2nd Road, Chookhangdae-roh, Hangdong 1ga, Joongu, Incheon, South Korea; Department of Information and Communication Engineering, Sejong University, 98, Gunja-Dong, Gwangjin-Gu, Seoul, South Korea},
abstract={In software product line engineering (SPLE), many studies have been conducted on commonality- and variability-based feature extraction methods and on the reasoning and refinement of feature models (FMs), aiming to enhance the appropriateness and reusability of the constructed FMs in compliance with feature-oriented development. The existing methods, however, failed to assure the developed applications that contain ambiguities between the features generated in FMs by analyzers' intuitions, and hindered the reuse of such applications. Moreover, the accuracy measurements of models based on mathematics-based theoretical verification methods are difficult to apply in practice. Therefore, a refinement technique is demanded to enhance the FM accuracy. This paper aims to identify abnormal feature duplications and collisions based on the feature attributes to address the potential ambiguities between the features in an FM generated for a target domain, and to construct more precise FMs by presenting a technique for eliminating such abnormalities. For this purpose, the profiles of the formalized attributes were first defined based on MDR. Based on the semantics and relationships between the attributes, the duplications and collisions were identified using an analysis matrix, and were generalized to formulate rules by level. Such rules were evaluated to remove the duplications and collisions. In addition, using a supporting analyzer, the features in the initial FM were registered on a repository and were analyzed for feature duplications and collisions based on the saved attribute data. The refinements of the ambiguities between such features are likely to enable the construction of more precise application FMs and the generation of common features with higher reusability. Further, the environments using support tools are expected to provide convenience in the similarity analysis and reuse of features. © 2014 World Scientific Publishing Company.},
author_keywords={collision;  duplication;  Feature model;  refinement;  relationship between feature attribute;  reuse},
document_type={Article},
source={Scopus},
}

@BOOK{Acher2014142,
author={Acher, M. and Baudry, B. and Barais, O. and Jézéquel, J.-M.},
title={Customization and 3D printing: A challenging playground for software product lines},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={142-146},
doi={10.1145/2648511.2648526},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907842800&partnerID=40&md5=01ff7126b24db15c071cbdbc3b0f37d2},
affiliation={Inria, IRISA, University of Rennes 1, France},
abstract={3D printing is gaining more and more momentum to build customized product in a wide variety of fields. We conduct an exploratory study of Thingiverse, the most popular Website for sharing user-created 3D design files, in order to establish a possible connection with software product line (SPL) engineering. We report on the socio-technical aspects and current practices for modeling variability, implementing variability, configuring and deriving products, and reusing artefacts. We provide hints that SPL-alike techniques are practically used in 3D printing and thus relevant. Finally, we discuss why the customization in the 3D printing field represents a challenging playground for SPL engineering. Copyright 2014 ACM.},
author_keywords={3D printing;  Customization;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Böttcher2014977,
author={Böttcher, B.a  and Moriz, N.b  and Niggemann, O.b },
title={From formal requirements on technical systems to complete designs-a holistic approach},
journal={Frontiers in Artificial Intelligence and Applications},
year={2014},
volume={263},
pages={977-978},
doi={10.3233/978-1-61499-419-0-977},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84923169108&partnerID=40&md5=0d6abd6b346634c749be9e3d1e139d74},
affiliation={Fraunhofer Application Center Industrial Automation (INA), Germany; Institute of Industrial Information Technologies (InIT), Germany},
abstract={The design processes of todays more and more complex automation systems require computer-based support to maintain their manageability. As a base for that, the authors introduce a holistic design approach for these systems. Requirements on the system to be designed are represented by an extended feature model which serves as consistent requirements model during the entire design process. A grammar-based synthesis applies formalised expert knowledge to generate solutions to these requirements. The paper's main contribution is to combine formalisms from overlapping areas of artificial intelligence and software engineering to obtain a holistic design process for industrial automation systems. © 2014 The Authors and IOS Press.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Saeed2014180,
author={Saeed, M. and Saleh, F. and Al-Insaif, S. and El-Attar, M.},
title={Evaluating the Cognitive Effectiveness of the Visual Syntax of Feature Diagrams},
journal={Communications in Computer and Information Science},
year={2014},
volume={432 CCIS},
pages={180-194},
doi={10.1007/978-3-662-43610-3_14},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904750779&partnerID=40&md5=c85d2a108524598d22fcd4de7fd1b699},
affiliation={King Fahd University of Petroleum and Minerals, P.O. Box 5066, Dhahran, 31261, Saudi Arabia},
abstract={[Context and Motivation] Feature models are widely used in the Software Product Line (SPL) domain to capture and communicate the commonality and variability of features in a product line. Feature models contain feature diagrams that graphically depict features in a hierarchical form. [Problem/Question] Many research works have been devoted to enriching the visual syntax of feature diagrams to extend its expressiveness to capture additional types of semantics, however, there is a lack of research that evaluates the visual perception of feature models by its readers. Models serve a dual purpose: to brainstorm and communicate. A very sophisticated yet unreadable model is arguably useless. To date, there has not been a scientific evaluation of the cognitive effectiveness of the visual syntax of feature diagrams. [Principle Ideas] This paper presents a scientific evaluation of the cognitive effectiveness of feature diagrams. The evaluation approach is based on theory and empirical evidence mainly from the cognitive science field. [Contribution] The evaluation reveals drawbacks in the visual notation of feature diagrams. The paper concludes with some recommendations for improvement to remedy the identified flaws. © Springer-Verlag Berlin Heidelberg 2014.},
author_keywords={Feature Models;  Software Product Lines;  Visual Syntax Evaluation},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Rahman2014220,
author={Rahman, M. and Ripon, S.},
title={Using bayesian networks to model and analyze software product line feature model},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8875},
pages={220-231},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84911923947&partnerID=40&md5=eddfe4aa8ce3cf91b74fcefa232bef00},
affiliation={Department of Computer Science and Engineering, East West University, Dhaka, Bangladesh},
abstract={Proper management of requirements plays a significant role in the successful development of any software product family. Application of AI, Bayesian Network (BN) in particular, is gaining much interest in Software Engineering, mainly in predicting software defects and software reliability. Feature analysis and its associated decision making is a suitable target area where BN can make remarkable effect. In SPL, a feature tree portrays various types of features as well as captures the relationships among them. This paper applies BN in modeling and analyzing features in a feature tree. Various feature analysis rules are first modeled and then verified in BN. The verification confirms the definition of the rules and thus these rules can be used in various decision making tages in SPL. ©Springer International Publishing Switzerland 2014.},
author_keywords={Bayesian networks;  Dead feature;  False optional;  Software product line},
document_type={Article},
source={Scopus},
}

@BOOK{Mannion201432,
author={Mannion, M.a  and Kaindl, H.b },
title={Using similarity metrics for mining variability from software repositories},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={2},
pages={32-35},
doi={10.1145/2647908.2655964},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907809275&partnerID=40&md5=28d086f082fa4f29d200ff3a37b220cc},
affiliation={Executive Group, Glasgow Caledonian University, 70 Cowcaddens Road, Glasgow, United Kingdom; Vienna University of Technology, ICT, Gußhausstr. 27-29, Vienna, Austria},
abstract={Much activity within software product line engineering has been concerned with explicitly representing and exploiting commonality and variability at the feature level for the purpose of a particular engineering task e.g. requirements specification, design, coding, verification, product derivation process, but not for comparing how similar products in the product line are with each other. In contrast, a case-based approach to software development is concerned with descriptions and models as a set of software cases stored in a repository for the purpose of searching at a product level, typically as a foundation for new product development. New products are derived by finding the most similar product descriptions in the repository using similarity metrics. The new idea is to use such similarity metrics for mining variability from software repositories. In this sense, software product line engineering could be informed by the case-based approach. This approach requires defining and implementing such similarity metrics based on the representations used for the software cases in such a repository. It provides complementary benefits to the ones given through feature-based representations of variability and may help mining such variability. Copyright 2014 ACM.},
author_keywords={Case-based reasoning;  Commonality and variability;  Feature-based representation;  Product lines;  Similarity metrics},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Wang201432,
author={Wang, S.a  and Buchmann, D.b  and Ali, S.a  and Gotlieb, A.a  and Pradhan, D.c  and Liaaen, M.b },
title={Multi-objective test prioritization in software product line testing: An industrial case study},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={32-41},
doi={10.1145/2648511.2648515},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907843595&partnerID=40&md5=dee0ab07c300345ea8cc7241854641fb},
affiliation={Simula Research Laboratory, Oslo, Norway; Cisco Systems, Oslo, Norway; University of Oslo, Oslo, Norway},
abstract={Test prioritization is crucial for testing products in a product line considering limited budget in terms of available time and resources. In general, it is not practically feasible to execute all the possible test cases and so, ordering test case execution permits test engineers to discover faults earlier in the testing process. An efficient prioritization of test cases for one or more products requires a clear consideration of the tradeoff among various costs (e.g., time, required resources) and effectiveness (e.g., feature coverage) objectives. As an integral part of the future Cisco's test scheduling system for validating video conferencing products, we introduce a search-based multi-objective test prioritization technique, considering multiple cost and effectiveness measures. In particular, our multi-objective optimization setup includes the minimization of execution cost (e.g., time), and the maximization of number of prioritized test cases, feature pairwise coverage and fault detection capability. Based on cost-effectiveness measures, a novel fitness function is defined for such test prioritization problem. The fitness function is empirically evaluated together with three commonly used search algorithms (e.g., (1+1) Evolutionary algorithm (EA)) and Random Search as a comparison baseline based on the Cisco's industrial case study and 500 artificial designed problems. The results show that (1+1) EA achieves the best performance for solving the test prioritization problem and it scales up to solve the problems of varying complexity. Copyright is held by the owner/author(s).},
author_keywords={Multi-objective optimization;  Search algorithms;  Software product lines;  Test prioritization},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Tran201493,
author={Tran, L.M.S. and Massacci, F.},
title={An approach for decision support on the uncertainty in feature model evolution},
journal={2014 IEEE 22nd International Requirements Engineering Conference, RE 2014 - Proceedings},
year={2014},
pages={93-102},
doi={10.1109/RE.2014.6912251},
art_number={6912251},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84909961337&partnerID=40&md5=2386028cb4ccbe084d23f30f1560c1e9},
affiliation={DISI, University of Trento, Povo, Trento, Italy},
abstract={Software systems could be seen as a hierarchy of features which are evolving due to the dynamic of the working environments. The companies who build software thus need to make an appropriate strategy, which takes into consideration of such dynamic, to select features to be implemented. In this work, we propose an approach to facilitate such selection by providing a means to capture the uncertainty of evolution in feature models. We also provide two analyses to support the decision makers. The approach is exemplified in the Smart Grid scenario. © 2014 IEEE.},
author_keywords={cost of reparation;  evolution;  feature model evolution;  product lines;  survivability;  variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Henard201492,
author={Henard, C. and Papadakis, M. and Le Traon, Y.},
title={Mutation-based generation of software product line test configurations},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8636 LNCS},
pages={92-106},
doi={10.1007/978-3-319-09940-8-7},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905498897&partnerID=40&md5=0d5c930507f0907decc95397f6e4a778},
affiliation={Interdisciplinary Centre for Security, Reliability and Trust (SnT), University of Luxembourg, Luxembourg},
abstract={Software Product Lines (SPLs) are families of software products that can be configured and managed through a combination of features. Such products are usually represented with a Feature Model (FM). Testing the entire SPL may not be conceivable due to economical or time constraints and, more simply, because of the large number of potential products. Thus, defining methods for generating test configurations is required, and is now a very active research topic for the testing community. In this context, mutation has recently being advertised as a promising technique. Mutation evaluates the ability of the test suite to detect defective versions of the FM, called mutants. In particular, it has been shown that existing test configurations achieving the mutation criterion correlate with fault detection. Despite the potential benefit of mutation, there is no approach which aims at generating test configurations for SPL with respect to the mutation criterion. In this direction, we introduce a search-based approach which explores the SPL product space to generate product test configurations with the aim of detecting mutants. © 2014 Springer International Publishing Switzerland.},
author_keywords={Feature Models;  Mutation;  Search-Based Software Engineering;  Software Product Lines;  Test Configuration Generation},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Mennicke201462,
author={Mennicke, S.a  and Lochau, M.b  and Schroeter, J.c  and Winkelmann, T.d },
title={Automated verification of feature model configuration processes based on workflow petri nets},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={62-71},
doi={10.1145/2648511.2648518},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907857390&partnerID=40&md5=0acf982660ef8961736c504f479fd62a},
affiliation={Institute for Programming and Reactive Systems, TU Braunschweig, Germany; Real-Time Systems Lab., TU Darmstadt, Germany; Institute for Software-and Multimedia-Technology, TU Dresden, Germany; Institute for Software Engineering and Automative Informatics, TU Braunschweig, Germany},
abstract={Modern software systems are highly configurable in order to satisfy diverse customer requirements and application contexts. Feature models provide a well-established formalism for tailoring configuration spaces of applications. Thereupon, multi-view staged configuration approaches modularize feature models for separation of concerns and apply workflow modeling for scheduling configuration decisions. However, the complex, often oblivious and even cyclic logical dependencies among configuration decisions obstruct compositional semantics of feature model views thus spoiling intuitive modeling and rigorous analysis of staged configuration processes. In this paper, we apply workflow Petri nets (WPNs) as a formal operational model for staged configuration that makes explicit causal dependencies among feature selections. For the internal separation into composable configuration stages we further adopt the principles of open workflow nets. It is shown that the soundness notion of WPNs naturally coincides with fundamental correctness and liveness properties to be verified for staged configuration processes. We present a prototype implementation for an automated computation of staged configuration processes and provide experimental results concerning scalability properties. Copyright 2014 ACM.},
author_keywords={Analysis and synthesis of Petri nets;  Configuration management;  Domain feature model;  Staged configuration;  Workflows},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Myllärniemi20141,
author={Myllärniemi, V.a  and Tiihonen, J.a  and Raatikainen, M.a  and Felfernig, A.b },
title={Using answer set programming for feature model representation and configuration},
journal={CEUR Workshop Proceedings},
year={2014},
volume={1220},
pages={1-8},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84913553371&partnerID=40&md5=cb35da0b88db043f5f3c1716ab5be76e},
affiliation={Aalto University, Finland; TU Graz, Austria},
abstract={Feature models are a wide-spread approach used for expressing variability in software product lines. Answer set programming (ASP) is nowadays an increasingly popular approach to configuration knowledge representation. In this paper, we study the similarities between feature modeling and configuration knowledge representation with ASP. We define the feature configuration problem utilizing ASP, and show two different ways using an example of translating the basic feature modeling concepts embodied in the graphical feature models into ASP programs. This way we want to emphasize the role of ASP as a means to tackle the feature configuration problem. Copyright © 2014.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Noda201466,
author={Noda, N.a  and Kishi, T.b },
title={Variability modeling methods for software product line development},
journal={Computer Software},
year={2014},
volume={31},
number={4},
pages={66-76},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84920053625&partnerID=40&md5=973d3c24c650c069d3e0244d0f33d44b},
affiliation={Shibaura Institute of Technology, Japan; Waseda Univerisity, Japan},
abstract={In software product-line development (SPLD), variability management plays an essential role, and multiple variability modeling methods have been proposed. Along with gradual acceptance of SPLD and diversifications of the usage of variability models, there have been proposed various enhancements on these models. In this tutorial paper, we focus on feature model, a representative variability model. We firstly introduce the original feature model and some extensions made on the model, and then introduce how these models are used in SPLD activities.},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lopez-Herrejon20141255,
author={Lopez-Herrejon, R.E.a  and Ferrer, J.b  and Chicano, F.b  and Haslinger, E.N.a  and Egyed, A.a  and Alba, E.b },
title={A parallel evolutionary algorithm for prioritized pairwise testing of software product lines},
journal={GECCO 2014 - Proceedings of the 2014 Genetic and Evolutionary Computation Conference},
year={2014},
pages={1255-1262},
doi={10.1145/2576768.2598305},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905715219&partnerID=40&md5=4cf825fe5f6b3c84f519b076f76bedba},
affiliation={Johannes Kepler University, Linz, Austria; Universidad de Málaga, Andalucía Tech, Spain},
abstract={Software Product Lines (SPLs) are families of related software systems, which provide different feature combinations. Different SPL testing approaches have been proposed. However, despite the extensive and successful use of evolutionary computation techniques for software testing, their application to SPL testing remains largely unexplored. In this paper we present the Parallel Prioritized product line Genetic Solver (PPGS), a parallel genetic algorithm for the generation of prioritized pairwise testing suites for SPLs. We perform an extensive and comprehensive analysis of PPGS with 235 feature models from a wide range of number of features and products, using 3 different priority assignment schemes and 5 product prioritization selection strategies. We also compare PPGS with the greedy algorithm prioritized-ICPL. Our study reveals that overall PPGS obtains smaller covering arrays with an acceptable performance difference with prioritized-ICPL. © 2014 ACM.},
author_keywords={Combinatorial interaction testing;  Feature models;  Pairwise testing;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{García-Galán201465,
author={García-Galán, J.a  and Pasquale, L.b  and Trinidad, P.a  and Ruiz-Cortés, A.a },
title={User-centric adaptation of multi-tenant services: Preference-based analysis for service reconfiguration},
journal={9th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2014 - Proceedings},
year={2014},
pages={65-74},
doi={10.1145/2593929.2593930},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84903735977&partnerID=40&md5=424b74842b1e0595e43628adf1b05038},
affiliation={University of Seville, Sevilla, Spain; Lero - the Irish Software Engineering Research Centre, University of Limerick, Ireland},
abstract={Multi-tenancy is a key pillar of cloud services. It allows different tenants to share computing resources transparently and, at the same time, guarantees substantial cost savings for the providers. However, from a user perspective, one of the major drawbacks of multi-tenancy is lack of configurability. Depending on the isolation degree, the same service instance and even the same service configuration may be shared among multiple tenants (i.e. shared multi-tenant service). Moreover tenants usually have different - and in most of the cases - conicting configuration preferences. To over-come this limitation, this paper introduces a novel approach to support user-centric adaptation in shared multi-tenant services. The adaptation objective aims to maximise tenants' satisfaction, even when tenants and their preferences change during the service life-time. This paper describes how to engineer the activities of the MAPE loop to support user-centric adaptation, and focuses on the analysis of tenants' preferences. In particular, we use a game theoretic analysis to identify a service configuration that maximises tenants' preferences satisfaction. We illustrate and motivate our approach by utilising a multi-tenant desktop scenario. Obtained experimental results demonstrate the feasibility of the proposed analysis.},
author_keywords={Adaptive systems;  Cloud;  Game theory;  Multi-tenancy},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Nummenmaa2014531,
author={Nummenmaa, J. and Nummenmaa, T. and Zhang, Z.},
title={On the Use of LTSs to Analyze Software Product Line Products Composed of Features},
journal={Advances in Intelligent Systems and Computing},
year={2014},
volume={214},
pages={531-541},
doi={10.1007/978-3-642-37832-4_48},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84888402271&partnerID=40&md5=f3a59e8161fb9611c43fdddc5140daed},
affiliation={School of Information Sciences, University of Tampere, Tampere, Finland},
abstract={In product line engineering, it is common to define the products as sets of features, where each feature has a related set of requirements. Typically, there is a common set of features/requirements, and some variable features/requirements for building different products. In an earlier proposal to use labeled transition systems (LTSs) to model and check the products, the products were composed using the feature-oriented approach and LTS models were analyzed using a related LTS analyzer tool. However, no further details or analysis about the models and possible conflicts were given. We investigate in more detail the types of conflicts that may arise and discuss the integration strategies for building an integrated LTS for the product composed of features. © Springer-Verlag Berlin Heidelberg 2014.},
author_keywords={Feature model;  Functional requirement;  Labeled transition system;  Software product line},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Acher2014143,
author={Acher, M.a  and Alférez, M.b  and Galindo, J.A.b  and Romenteau, P.c  and Baudry, B.b },
title={ViViD: A variability-based tool for synthesizing video sequences},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={2},
pages={143-147},
doi={10.1145/2647908.2655981},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907806718&partnerID=40&md5=b467ebb94401af81b41295798085eed9},
affiliation={DiverSE Team, Inria University of Rennes 1, France; DiverSE Team, Inria, Rennes, France; InPixal, Rennes, France},
abstract={We present ViViD, a variability-based tool to synthesize variants of video sequences. ViViD is developed and used in the context of an industrial project involving consumers and providers of video processing algorithms. The goal is to synthesize synthetic video variants with a wide range of characteristics to then test the algorithms. We describe the key components of ViViD (1) a variability language and an environment to model what can vary within a video sequence; (2) a reasoning back-end to generate relevant testing configurations; (3) a video synthesizer in charge of producing variants of video sequences corresponding to configurations. We show how ViViD can synthesize realistic videos with different characteristics such as luminances, vehicles and persons that cover a diversity of testing scenarios. Copyright 2014 ACM.},
author_keywords={Combinatorial interaction testing;  Prioritization;  T-wise;  Variability modeling;  Video generation},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sanchez201441,
author={Sanchez, A.B. and Segura, S. and Ruiz-Cortes, A.},
title={A Comparison of test case prioritization criteria for software product lines},
journal={Proceedings - IEEE 7th International Conference on Software Testing, Verification and Validation, ICST 2014},
year={2014},
pages={41-50},
doi={10.1109/ICST.2014.15},
art_number={6823864},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84903214838&partnerID=40&md5=a5ffac0d024ef301cfcfe8aa4866d3c9},
affiliation={Department of Computer Languages and Systems, University of Seville, Spain},
abstract={Software Product Line (SPL) testing is challenging due to the potentially huge number of derivable products. To alleviate this problem, numerous contributions have been proposed to reduce the number of products to be tested while still having a good coverage. However, not much attention has been paid to the order in which the products are tested. Test case prioritization techniques reorder test cases to meet a certain performance goal. For instance, testers may wish to order their test cases in order to detect faults as soon as possible, which would translate in faster feedback and earlier fault correction. In this paper, we explore the applicability of test case prioritization techniques to SPL testing. We propose five different prioritization criteria based on common metrics of feature models and we compare their effectiveness in increasing the rate of early fault detection, i.e. a measure of how quickly faults are detected. The results show that different orderings of the same SPL suite may lead to significant differences in the rate of early fault detection. They also show that our approach may contribute to accelerate the detection of faults of SPL test suites based on combinatorial testing. © 2014 IEEE.},
author_keywords={automated analysis;  feature models;  Software product lines;  test case prioritization},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Al-Hajjaji2014197,
author={Al-Hajjaji, M.a  and Thüm, T.a  and Meinicke, J.a  and Lochau, M.b  and Saake, G.a },
title={Similarity-based prioritization in software product-line testing},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={197-206},
doi={10.1145/2648511.2648532},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907821409&partnerID=40&md5=27ff7d9a3c0078a88d869e579e062e4a},
affiliation={University of Magdeburg, Germany; TU Darmstadt, Germany},
abstract={Exhaustively testing every product of a software product line (SPL) is a difficult task due to the combinatorial explosion of the number of products. Combinatorial interaction testing is a technique to reduce the number of products under test. However, it is typically up-to the tester in which order these products are tested. We propose a similarity-based prioritization to be applied on these products before they are generated. The proposed approach does not guarantee to find more errors than sampling approaches, but it aims at increasing interaction coverage of an SPL under test as fast as possible over time. This is especially beneficial since usually the time budget for testing is limited. We implemented similarity-based prioritization in FeatureIDE and evaluated it by comparing its outcome to the default outcome of three sampling algorithms as well as to random orders. The experiment results indicate that the order with similarity-based prioritization is better than random orders and often better than the default order of existing sampling algorithms. Copyright 2014 ACM.},
author_keywords={Combinatorial interaction testing;  Prioritization;  Product-line testing;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Broneske201447,
author={Broneske, D. and Dorok, S. and Köppen, V. and Meister, A.},
title={Software design approaches for mastering variability in database systems},
journal={CEUR Workshop Proceedings},
year={2014},
volume={1313},
pages={47-52},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84920020024&partnerID=40&md5=8645da8bf2f1b230310332f833809b36},
affiliation={Institute for Technical and Business Information Systems, Otto-von-Guericke-University Magdeburg, Magdeburg, Germany},
abstract={For decades, database vendors have developed traditional database systems for different application domains with highly differing requirements. These systems are extended with additional functionalities to make them applicable for yet another data-driven domain. The database community observed that these "one size fits all" systems provide poor performance for special domains; systems that are tailored for a single domain usually perform better, have smaller memory footprint, and less energy consumption. These advantages do not only originate from different requirements, but also from differences within individual domains, such as using a certain storage device. However, implementing specialized systems means to reimplement large parts of a database system again and again, which is neither feasible for many customers nor efficient in terms of costs and time. To overcome these limitations, we envision applying techniques known from software product lines to database systems in order to provide tailor-made and robust database systems for nearly every application scenario with reasonable effort in cost and time. General Terms Database, Software Engineering.},
author_keywords={Database system;  Software product line;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wang2014724,
author={Wang, B.a  b  and Xiong, Y.-F.a  b  and Hu, Z.-J.a  b  c  and Zhao, H.-Y.a  b  and Zhang, W.a  b  and Mei, H.a  b  d },
title={Interactive inconsistency fixing in feature modeling},
journal={Journal of Computer Science and Technology},
year={2014},
volume={29},
number={4},
pages={724-736},
doi={10.1007/s11390-014-1462-5},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904416373&partnerID=40&md5=1453fffaeb68ec5bac1dff5cfa92c8da},
affiliation={Key Laboratory of High Confidence Software Technologies, Ministry of Education, Beijing 100871, China; Institute of Software, School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China; National Institute of Informatics, Tokyo 101-8430, Japan; Department of Computer Science and Engineering, Shanghai Jiao Tong University, Shanghai 200240, China},
abstract={Feature models have been widely adopted to reuse the requirements of a set of similar products in a domain. In feature models' construction, one basic task is to ensure the consistency of feature models, which often involves detecting and fixing of inconsistencies in feature models. While many approaches have been proposed, most of them focus on detecting inconsistencies rather than fixing inconsistencies. In this paper, we propose a novel dynamic-priority based approach to interactively fixing inconsistencies in feature models, and report an implementation of a system that not only automatically recommends a solution to fixing inconsistencies but also supports domain analysts to gradually reach the desirable solution by dynamically adjusting priorities of constraints. The key technical contribution is, as far as we are aware, the first application of the constraint hierarchy theory to feature modeling, where the degree of domain analysts' confidence on constraints is expressed by using priority and inconsistencies are resolved by deleting one or more lower-priority constraints. Two case studies demonstrate the usability and scalability (efficiency) of our new approach. © 2014 Springer Science+Business Media New York.},
author_keywords={constraint hierarchy theory;  feature modeling;  inconsistency fixing;  requirement engineering;  software engineering},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Abbasi2014264,
author={Abbasi, E.K.a  and Acher, M.b  and Heymans, P.a  and Cleve, A.a },
title={Reverse engineering web configurators},
journal={2014 Software Evolution Week - IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering, CSMR-WCRE 2014 - Proceedings},
year={2014},
pages={264-273},
doi={10.1109/CSMR-WCRE.2014.6747178},
art_number={6747178},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84898474049&partnerID=40&md5=c1f142613209d296afc0099a5d693073},
affiliation={PReCISE, University of Namur, Belgium; University of Rennes 1, Irisa, Inria, France},
abstract={A Web configurator offers a highly interactive environment to assist users in customising sales products through the selection of configuration options. Our previous empirical study revealed that a significant number of configurators are suboptimal in reliability, efficiency, and maintainability, opening avenues for re-engineering support and methodologies. This paper presents a tool-supported reverse-engineering process to semi-automatically extract configuration-specific data from a legacy Web configurator. The extracted and structured data is stored in formal models (e.g., variability models) and can be used in a forward-engineering process to generate a customized interface with an underlying reliable reasoning engine. Two major components are presented: (1) a Web Wrapper that extracts structured configuration-specific data from unstructured or semistructured Web pages of a configurator, and (2) a Web Crawler that explores the 'configuration space' (i.e., all objects representing configuration-specific data) and simulates users' configuration actions. We describe variability data extraction patterns, used on top of the Wrapper and the Crawler to extract configuration data. Experimental results on five existing Web configurators show that the specification of a few variability patterns enable the identification of hundreds of options. © 2014 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wieber20141,
author={Wieber, M. and Anjorin, A. and Schürr, A.},
title={On the usage of tggs for automated model transformation testing},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8568 LNCS},
pages={1-16},
doi={10.1007/978-3-319-08789-4-1},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904727577&partnerID=40&md5=265a65f9563b223babb41789618bf237},
affiliation={Real-Time Systems Lab, Technische Universität Darmstadt, Merckstraße 25, 64283 Darmstadt, Germany},
abstract={As model transformations are fundamental to model-driven engineering, assuring their quality is a central task which can be achieved by testing with sufficiently adequate and large test suites. As the latter requirement can render manual testing prohibitively costly in practice, a high level of automation is advisable. Triple Graph Grammars (TGGs) have been shown to provide a promising solution to this challenge as not only test case generators, but also generic test oracles can be derived from them. It is, however, unclear if such generated test suites are indeed adequate and, as different strategies can be used to steer the test generation process, a systematic means of comparing and evaluating such test suites and strategies is required. In this paper, we extend existing work on TGG-based testing by(i) presenting a generic framework for TGG-based testing, (ii) describing a concrete instantiation of this framework with our TGG tool eMoflon, and (iii) exploring how the well-known technique of mutation analysis can be used to evaluate a set of test generation strategies by analyzing the generated test suites. © 2014 Springer International Publishing Switzerland.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Guo2014409,
author={Guo, J.a  and Zulkoski, E.a  and Olaechea, R.a  and Rayside, D.a  and Czarnecki, K.a  and Apel, S.b  and Atlee, J.M.a },
title={Scaling exact multi-objective combinatorial optimization by parallelization},
journal={ASE 2014 - Proceedings of the 29th ACM/IEEE International Conference on Automated Software Engineering},
year={2014},
pages={409-420},
doi={10.1145/2642937.2642971},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84908642539&partnerID=40&md5=9816664c63a91883ae6f190510a23604},
affiliation={University of Waterloo, Canada; University of Passau, Germany},
abstract={Multi-Objective Combinatorial Optimization (MOCO) is fundamental to the development and optimization of software systems. We propose five novel parallel algorithms for solving MOCO problems exactly and efficiently. Our algorithms rely on off-the-shelf solvers to search for exact Pareto-optimal solutions, and they parallelize the search via collaborative communication, divide-and-conquer, or both. We demonstrate the feasibility and performance of our algorithms by experiments on three case studies of software-system designs. A key finding is that one algorithm, which we call FS-GIA, achieves substantial (even super-linear) speedups that scale well up to 64 cores. Furthermore, we analyze the performance bottlenecks and opportunities of our parallel algorithms, which facilitates further research on exact, parallel MOCO. © 2014 ACM.},
author_keywords={Multi-objective combinatorial optimization;  Parallelization},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{MaianideMello2014720,
author={Maiani de Mello, R. and Nogueira Teixeira, E. and Schots, M. and Lima Werner, C.M. and Travassos, G.H.},
title={Verification of Software Product Line artefacts: A checklist to support feature model inspections},
journal={Journal of Universal Computer Science},
year={2014},
volume={20},
number={5},
pages={720-745},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904721463&partnerID=40&md5=3b1d70235978d949dcf4dbe267f1d29c},
affiliation={COPPE, Federal University of Rio de Janeiro, Rio de Janeiro, Brazil},
abstract={Software Product Line Engineering (SPL) should ensure the correctness, completeness and consistency of its artefacts and related domain to prevent the propagation of defects in derived products. Software inspection techniques are effective in detecting defects in software artefacts and avoiding their propagation throughout the software development process. However, the results of a quasi-systematic review of the technical literature reported in this paper pointed to a lack of such techniques to support the inspection of SPL artefacts, including techniques to support the inspection of feature models (FMs) that are largely used in domain modelling. Therefore, a checklist-based inspection technique (FMCheck) has been developed to support the detection of defects on FMs. FMCheck is configurable and can be applied to the original feature model notation (the FODA approach) and its extensions, including the Odyssey-FEX notation. The inspection technique was empirically evaluated, having indicated its feasibility and effectiveness. It is possible to see that inspectors applying FMCheck to inspect FMs can be more effective than those applying ad-hoc techniques, regarding four distinct domains. © J.UCS.},
author_keywords={Domain engineering;  Experimental software engineering;  Feature model;  Software inspection;  Software product line;  Software reuse},
document_type={Article},
source={Scopus},
}

@ARTICLE{Alférez2014640,
author={Alférez, M.a  b  and Lopez-Herrejón, R.E.c  and Moreira, A.a  b  and Amaral, V.a  b  and Egyed, A.c },
title={Consistency checking in early Software Product Line Specifications - The VCC approach},
journal={Journal of Universal Computer Science},
year={2014},
volume={20},
number={5},
pages={640-665},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904756853&partnerID=40&md5=e696c8c22a4d3d1be254db396c54af28},
affiliation={CITI and Departamento de Informática, Universidade Nova de Lisboa, Portugal; INRIA, DiverSE Team, Rennes, France; Institute for Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Software Product Line Engineering (SPLE) is a successful paradigm to produce a family of products for a specific domain. A challenge in SPLE is to check that different models used in early SPL specification do not contain inconsistent information that may be propagated and generate inconsistent products that do not conform to its requirements. This challenge is difficult to address due to the high number of possible combinations of product features and model fragments specifying those features. Variability Consistency Checking (VCC) offers automatic means to address that challenge. VCC relates information inferred from the relationships between features and from base models related to those features. Validating if all the products in an SPL satisfy user-defined consistency constraints is based on searching for a satisfying assignment of each formula generated by VCC. We validated VCC and its supporting tool on two case studies from different application domains, the results were encouraging as we did not observed significant performance penalties. © J.UCS.},
author_keywords={Architecture design;  Feature modeling analysis;  Highly configurable systems;  Model-driven development;  Modelbased software product lines;  Requirements engineering;  Variability modeling;  Variability-intensive systems;  Verification},
document_type={Article},
source={Scopus},
}

@ARTICLE{Kastner201467,
author={Kastner, C.a  and Dreiling, A.b  and Ostermann, K.c },
title={Variability mining: Consistent semi-automatic detection of product-line features},
journal={IEEE Transactions on Software Engineering},
year={2014},
volume={40},
number={1},
pages={67-82},
doi={10.1109/TSE.2013.45},
art_number={6613490},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84898456736&partnerID=40&md5=00d3be74262281d6cd89242e8cf02a1d},
affiliation={School of Computer Science, Carnegie Mellon University, United States; University of Magdeburg, Deutsche Bank AG, Germany; Department of Mathematics and Computer Science, Philipps University, Marburg, Germany},
abstract={Software product line engineering is an efficient means to generate a set of tailored software products from a common implementation. However, adopting a product-line approach poses a major challenge and significant risks, since typically legacy code must be migrated toward a product line. Our aim is to lower the adoption barrier by providing semi-automatic tool support-called variability mining-to support developers in locating, documenting, and extracting implementations of product-line features from legacy code. Variability mining combines prior work on concern location, reverse engineering, and variability-aware type systems, but is tailored specifically for the use in product lines. Our work pursues three technical goals: (1) we provide a consistency indicator based on a variability-aware type system, (2) we mine features at a fine level of granularity, and (3) we exploit domain knowledge about the relationship between features when available. With a quantitative study, we demonstrate that variability mining can efficiently support developers in locating features. © 2014 IEEE.},
author_keywords={feature;  feature location;  LEADT;  mining;  reverse engineering;  software product line;  Variability},
document_type={Article},
source={Scopus},
}

@ARTICLE{Abrantes2014874,
author={Abrantes, R. and Figueiredo, J.},
title={Feature based process framework to manage scope in dynamic NPD portfolios},
journal={International Journal of Project Management},
year={2014},
volume={32},
number={5},
pages={874-884},
doi={10.1016/j.ijproman.2013.10.014},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84899946548&partnerID=40&md5=6aa00d180b83e091bdb567c611062167},
affiliation={CEG-IST, Engineering and Management Research Center, Instituto Superior Técnico, University of Lisbon, Portugal},
abstract={The need to develop new products in increasingly frequent cycles of innovation drives organizations to form new product development (NPD) portfolios. In such dynamic environments, organizations need to reinforce their capabilities to deal with the simultaneity of multiple NPD projects, as well as with the frequent changes of the product scope. Many organizations, that have adopted the typical NPD process enforcing a streamlined product development process, are challenged beyond strict planning and rigorous control of their NPD projects.This paper identifies the challenges to manage the scope of a complete portfolio of NPD projects within the dynamic context that organizations face today, and using existing scope management practices. This paper suggests a novel approach to structuring the scope in dynamic NPD portfolios using feature modeling, and illustrates its use in an action-research case. © 2013 Elsevier Ltd. APM and IPMA.},
author_keywords={Action research;  Feature modeling;  New product development;  Process framework;  Project portfolio management;  Scope management},
document_type={Article},
source={Scopus},
}

@BOOK{Schröter2014102,
author={Schröter, R.a  and Siegmund, N.b  and Thüm, T.a  and Saake, G.a },
title={Feature-context interfaces: Tailored programming interfaces for software product lines},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={102-111},
doi={10.1145/2648511.2648522},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907854256&partnerID=40&md5=ff58e0397f3cecef4deb355f1340314a},
affiliation={University of Magdeburg, Germany; University of Passau, Germany},
abstract={Despite the wide use of software product lines, their implementation and evolution is a challenging task. When implementing a feature, a developer has to know which code fragments of other (already implemented) features are accessible in each program variant in which the feature is included. Especially for composition-based implementation techniques, in which the code is implemented in separated modules, it is an exhausting and error-prone task to find safely accessible code fragments of other modules. State-of-the-art tool support, such as product-line type checkers, detect errors a posteriori (i.e., during compilation), but fails to prevent errors during the implementation. To overcome this problem, we propose feature-context interfaces, which provide a modular and non-variable programming interface to the variable source code of a product line. These interfaces ease changes, extensions, and the maintainability of product lines. To demonstrate applicability, we implemented a content assist and an outline view in Eclipse based on feature-context interfaces. We evaluate the potential of our method by analyzing the number of potential type errors we prevent compared to state-of-the-art techniques. Copyright 2014 ACM.},
author_keywords={Modularity;  Software product lines;  Syntactic interface},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Dieumegard2014217,
author={Dieumegard, A.a  and Toom, A.a  b  and Pantel, M.a },
title={A software product line approach for semantic specification of block libraries in dataflow languages},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={1},
pages={217-226},
doi={10.1145/2648511.2648534},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907814299&partnerID=40&md5=7ec327fdbe7352520ebd9efde2bf02b7},
affiliation={IRIT, ENSEEIHT, Université de Toulouse, 2, rue Charles Camichel, Toulouse, France; Institute of Cybernetics, Tallinn University of Technology, Akadeemia tee 21, Tallinn, Estonia},
abstract={Dataflow modelling languages such as SCADE or Simulink are the de-facto standard for the Model Driven Development of safety critical embedded control and command systems. Software is mainly being produced by Automated Code Generators whose correctness can only be assessed meaningfully if the input language semantics is well known. These semantics share a common part but are mainly defined through block libraries. The writing of a complete formal specification for the block libraries of the usual languages is highly challenging due to the high variability of the structure and semantics of each block. This contribution relates the use of software product line principles in the design of a domain specific language targeting the formal specification of block libraries. It summarises the advantages of this DSL regarding the writing, validation and formal verification of such specifications. These experiments have been carried out in the context of the GeneAuto embedded code generator project targeting Simulink and Scicos; and are being extended and applied in its follow up projects ProjetP and Hi-MoCo. Copyright 2014 ACM Copyright is held by the owner/author(s).},
author_keywords={Automated code generation;  Feature modelling;  Formal specification;  Model driven engineering;  Scicos;  Simulink;  Software qualification;  Why3;  Xcos},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Yanji201427,
author={Yanji, L. and Yukun, S. and Xinshang, Y. and Mussbacher, G.},
title={Combined propagation-based reasoning with goal and feature models},
journal={2014 IEEE 4th International Model-Driven Requirements Engineering Workshop, MoDRE 2014 - Proceedings},
year={2014},
pages={27-36},
doi={10.1109/MoDRE.2014.6890823},
art_number={6890823},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84908611439&partnerID=40&md5=336df01b1151d1b88985da7f01fda6c7},
affiliation={ECE, McGill University, Montréal, Canada},
abstract={The User Requirements Notation (URN) is an international requirements engineering standard published by the International Telecommunication Union. URN supports goal-oriented and scenario-based modeling as well as analysis. Feature modeling, on the other hand, is a well-establishing technique for capturing commonalities and variabilities of Software Product Lines. When combined with URN, it is possible to reason about the impact of feature configurations on stakeholder goals and system qualities, thus helping to identify the most appropriate features for a stakeholder. Combined reasoning of goal and feature models is also fundamental to Concern-Driven Development, where concerns are composed not only based on functionality expressed with feature models, but also based on impact on stakeholder goals. Therefore, an analysis technique for feature and goal models based on a single conceptual model is desirable, because of its potential to streamline model analysis and reduce the complexity of the analysis framework. This paper introduces such a technique, i.e., a single, propagation-based reasoning algorithm that supports combined reasoning of goal and feature models and offers additional usability improvements over existing goal-oriented reasoning mechanisms. © 2014 IEEE.},
author_keywords={concern;  concern-driven development;  evaluation algorithm;  feature modeling;  goal modeling;  Goal-oriented Requirement Language;  GRL;  jUCMNav;  trade-off analysis;  URN;  User Requirements Notation},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{terBeek2014368,
author={ter Beek, M.H.a  and de Vink, E.P.b  c },
title={Towards modular verification of software product lines with mCRL2},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8802},
pages={368-385},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84910598327&partnerID=40&md5=8089f33812a0fe68404aca1406435177},
affiliation={ISTI–CNR, Pisa, Italy; Eindhoven University of Technology, Eindhoven, Netherlands; CWI, Amsterdam, Netherlands},
abstract={We introduce by means of an example a modular verification technique for analyzing the behavior of software product lines using the mCRL2 toolset. Based on feature-driven borders, we divide a behavioral model of a product line into a set of separate components with interfaces and a driver process to coordinate them. Abstracting from irrelevant components, we verify properties over a smaller behavioral model, which not only simplifies the model checking task but also makes the result amenable for reuse. This is a fundamental step forward for the approach to scale up to industrial-size product lines. © Springer-Verlag Berlin Heidelberg 2014.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Paulon2014227,
author={Paulon, A.R.a  and Fröhlich, A.A.a  and Becker, L.B.a  and Basso, F.P.b },
title={Wireless sensor network UML profile to support model-driven development},
journal={Proceedings - 2014 12th IEEE International Conference on Industrial Informatics, INDIN 2014},
year={2014},
pages={227-232},
doi={10.1109/INDIN.2014.6945512},
art_number={6945512},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84914106851&partnerID=40&md5=ccc2843738c8dc4283296dd30ce768cd},
affiliation={Prog. Pós-Grad. em Eng. Controle e Automação (PGEAS), Federal University of Santa Catarina, Florianópolis, SC, Brazil; Prog. de Engenharia de Sistemas e Computação, COPPe, Federal University of Rio de Janeiro, Rio de Janeiro, RJ, Brazil},
abstract={Wireless Sensor Networks (WSNs) are rapidly becoming a necessary tool in many different application areas, such as environmental monitoring, security, safety, and so on. The heterogeneity of hardware is large, so there exists several different environments that support WSN programming. However, the great majority of such environments only target the sensors programming, forgetting about their real intent: the application. In this paper we propose an approach to satisfy the need of high level development methods in WSN applications, aiming to provide a clear link between the modelled WSN constraints and the programming entities. An important part of this proposal is the so-called Wireless Sensor Network (WiSeN) Profile, an UML profile devoted for WSN applications design in a Model-Drivel Development (MDD) paradigm. © 2014 IEEE.},
author_keywords={Embedded Systems;  MARTE;  Model Driven Development;  Wireless Sensor Network},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Urli2014344,
author={Urli, S. and Blay-Fornarino, M. and Collet, P. and Mosser, S. and Riveill, M.},
title={Managing a software ecosystem using a multiple software product line: A case study on digital signage systems},
journal={Proceedings - 40th Euromicro Conference Series on Software Engineering and Advanced Applications, SEAA 2014},
year={2014},
pages={344-351},
doi={10.1109/SEAA.2014.23},
art_number={6928833},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84916623513&partnerID=40&md5=51b36b95c8a4db8337ea0c2c5bf5b22f},
affiliation={Univ. Nice Sophia Antipolis, CNRS, UMR 7271, Sophia Antipolis, France},
abstract={With the advent of Web 2.0, the growth of developer teams and user communities increases the number of software ecosystems: software platforms developed and maintained in a decentralized way by external contributors. As complexity grows, these large software systems become more and more complex to manage and to adapt to specific user needs. In this paper, we report on a case study on the development of a digital signage software system called Your Cast. Based on several years experience evolving Your Cast from a single system to a medium-scale ecosystem, we show how organizing it as a multiple software product line helps in organizing the software platform, taming some management tasks for a growing community, and giving more capabilities to final users to build their own products. © 2014 IEEE.},
author_keywords={case study;  digital signage system;  multiple software product line;  software ecosystem},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Paulon2014161,
author={Paulon, A.R.a  and Frohlich, A.A.a  and Becker, L.B.a  and Basso, F.P.b },
title={Model-driven development of WSN applications},
journal={Brazilian Symposium on Computing System Engineering, SBESC},
year={2014},
pages={161-166},
doi={10.1109/SBESC.2013.27},
art_number={6825362},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84903536186&partnerID=40&md5=64a814a6cdbd6220d95208bbc73d758a},
affiliation={Prog. Pós-Grad. em Eng. Controle e Automação (PGEAS), Federal University of Santa Catarina, Florianópolis, SC, Brazil; COPPE, PESC, Federal University of Rio de Janeiro, Rio de Janeiro, RJ, Brazil},
abstract={Wireless Sensor Networks (WSNs) are rapidly becoming a necessary tool in many different application areas, such as environmental monitoring, security, safety, and so on. The heterogeneity of hardware is large, so there exists several different environments that support WSN programming. However, the great majority of such environments only target the sensors programming, forgetting about their real intent: the application. In this paper we propose an approach to satisfy the need of high level development methods in WSN applications, aiming to provide a clear link between the modeled WSN constraints and the programming entities. An important part of this proposal is the so-called WiSeN Profile, an UML profile devoted for WSN applications design in a Model-Drivel Development (MDD) paradigm. © 2013 IEEE.},
author_keywords={Embedded Systems;  MARTE;  Model Driven Development;  Wireless Sensor Network},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Meinicke201494,
author={Meinicke, J. and Thüm, T. and Schröter, R. and Benduhn, F. and Saake, G.},
title={An overview on analysis tools for software product lines},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={2},
pages={94-101},
doi={10.1145/2647908.2655972},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907809917&partnerID=40&md5=6a382239062adb191f97f7a400ff4874},
affiliation={University of Magdeburg, Germany},
abstract={A software product line is a set of different software products that share commonalities. For a selection of features, specialized products of one domain can be generated automatically from domain artifacts. However, analyses of software product lines need to handle a large number of products that can be exponential in the number of features. In the last decade, many approaches have been proposed to analyze software product lines efficiently. For some of these approaches tool support is available. Based on a recent survey on analysis for software product lines, we provide a first overview on such tools. While our discussion is limited to analysis tools, we provide an accompanying website covering further tools for product-line development. We compare tools according to their analysis and implementation strategy to identify underrepresented areas. In addition, we want to ease the reuse of existing tools for researchers and students, and to simplify research transfer to practice. Copyright 2014 ACM.},
author_keywords={Code metrics;  Model checking;  Non-functional properties;  Sampling;  Software product lines;  Static analysis;  Testing;  Theorem proving;  Tool support;  Type checking},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Hammani2014,
author={Hammani, F.Z.},
title={Survey of Non-Functional Requirements modeling and verification of Software Product Lines},
journal={Proceedings - International Conference on Research Challenges in Information Science},
year={2014},
doi={10.1109/RCIS.2014.6861085},
art_number={6861085},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84906762136&partnerID=40&md5=6ecd2495cc8a5489a7a430ca49f12193},
affiliation={IMS Team, SIME Laboratory, Mohammed v Souissi University, Rabat, Morocco},
abstract={Undoubtedly, Non-Functional Requirements (NFR) such as security, performance and reliability are critical to software systems as there is a growing demand on a higher quality of software. Simultaneously, the increasing pressure to develop software in less time and at lower costs drives software industry towards the promising paradigm of Software Product Line (SPL). However, different approaches have been advanced for modeling NFR of the traditional individual products and few approaches focused on a family of products. On the other hand, as a product line contains several products, it is impracticable and not feasible to verify NFR for each possible product. Therefore, there is a major need for verification approaches specific to product lines. In this paper, we present and analyze the main NFR modeling and verification approaches of SPL. © 2014 IEEE.},
author_keywords={Feature;  NFR;  Reuse;  SPL},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Arrieta2014,
author={Arrieta, A. and Sagardui, G. and Etxeberria, L.},
title={Towards the automatic generation and management of plant models for the validation of highly configurable cyber-physical systems},
journal={19th IEEE International Conference on Emerging Technologies and Factory Automation, ETFA 2014},
year={2014},
doi={10.1109/ETFA.2014.7005090},
art_number={7005090},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928023448&partnerID=40&md5=761abd01a2bb19b8ea9f8ba8a9080362},
affiliation={Computer and Electronics Department, Mondragon Goi Eskola Politeknikoa, Loramendi 4, Mondragón, Spain},
abstract={The number of cyber-physical systems is increasing considerably, being very usual in automation systems. Many cyber-physical systems must deal with variability issues to give response to the current market needs. The use of a plant model that simulates the system controlled by the embedded system might ease verification and validation activities, but building plant models manually for cyber-physical systems with many variants can be time consuming and error prone. This paper proposes a methodology that semi-automatically generates plant models in Simulink, with the main purpose of handling variability issues to validate highly configurable cyber-physical systems. © 2014 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Basso20141027,
author={Basso, F.P.a  and Pillat, R.M.a  and Oliveira, T.C.a  and Del Fabro, M.D.b },
title={Generative adaptation of model Transformation assets: Experiences, lessons and drawbacks},
journal={Proceedings of the ACM Symposium on Applied Computing},
year={2014},
pages={1027-1034},
doi={10.1145/2554850.2554944},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905667084&partnerID=40&md5=517d4041f2217fa26c7b64de8986d5d1},
affiliation={Universidade Federal do Rio de Janeiro (UFRJ), COPPE, Rio de Janeiro - RJ, Brazil; Universidade Federal do Paraná (UFPR), C3SL, Curitiba - PR, Brazil},
abstract={Model transformation is a central activity in Model Driven Engineering (MDE) as it specifies how models are consumed to generate other models or code. Complex scenarios typically involve the execution of several transformations that, due to variability of solutions to develop software projects, need to be tailored to attempt different implementation technologies, libraries, patterns, etc. Recent proposals to tailor these assets suggested that current Software Product Line (SPL) techniques can be used to promote reuse of model transformation assets. However, in a recent case study, we have found lacks in techniques, including ours, to apply reuse for this domain in particular. Thus, this paper presents this case study and discusses implications and challenges in tailoring these assets with SPL techniques. Copyright 2014 ACM.},
author_keywords={Feature Model;  Model Driven Engineering;  Software Product Line;  Transformation chain;  Transformation process},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Bécan2014112,
author={Bécan, G. and Ben Nasr, S. and Acher, M. and Baudry, B.},
title={WebFML: Synthesizing feature models everywhere},
journal={ACM International Conference Proceeding Series},
year={2014},
volume={2},
pages={112-116},
doi={10.1145/2647908.2655974},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907808289&partnerID=40&md5=8afb48e41282d616cff4d8f81cee5453},
affiliation={Inria, IRISA, University of Rennes 1, France},
abstract={Feature Models (FMs) are the de-facto standard for documenting, model checking, and reasoning about the configurations of a software system. This paper introduces WebFML a comprehensive environment for synthesizing FMs from various kinds of artefacts (e.g. propositional formula, dependency graph, FMs or product comparison matrices). A key feature of WebFML is an interactive support (through ranking lists, clusters, and logical heuristics) for choosing a sound and meaningful hierarchy. WebFML opens avenues for numerous practical applications (e.g., merging multiple product lines, slicing a configuration process, reverse engineering configurable systems). Copyright is held by the owner/author(s).},
author_keywords={Feature modeling environment;  Ontologic-aware synthesis;  Reverse engineering feature models},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{terBeek2014351,
author={ter Beek, M.H.a  and Fantechi, A.a  b  and Gnesi, S.a },
title={Challenges in modelling and analyzing quantitative aspects of bike-sharing systems},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8802},
pages={351-367},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84910613014&partnerID=40&md5=e5550e42d36a4fb96dd5b584ee979d72},
affiliation={ISTI–CNR, Via G. Moruzzi 1, Pisa, Italy; DINFO, Università di Firenze, Via S. Marta 3, Firenze, Italy},
abstract={Bike-sharing systems are becoming popular not only as a sustainable means of transportation in the urban environment, but also as a challenging case study that presents interesting run-time optimization problems. As a side-study within a research project aimed at quantitative analysis that used such a case study, we have observed how the deployed systems enjoy a wide variety of different features. We have therefore applied variability analysis to define a family of bike-sharing systems, and we have sought support in available tools. We have so established a tool chain that includes (academic) tools that provide different functionalities regarding the analysis of software product lines, from feature modelling to product derivation and from quantitative evaluation of the attributes of products to model checking value-passing modal specifications. The tool chain is currently experimented inside the mentioned project as a complement to more sophisticated product-based analysis techniques. © Springer-Verlag Berlin Heidelberg 2014.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Acher20141367,
author={Acher, M.a  and Cleve, A.b  and Collet, P.c  and Merle, P.d  and Duchien, L.d  and Lahire, P.c },
title={Extraction and evolution of architectural variability models in plugin-based systems},
journal={Software and Systems Modeling},
year={2014},
volume={13},
number={4},
pages={1367-1394},
doi={10.1007/s10270-013-0364-2},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84911001766&partnerID=40&md5=44d289596c541e619562c5bdacd76cfb},
affiliation={Irisa, Inria, University of Rennes 1, Rennes, France; PReCISE Research Centre, University of Namur, Namur, Belgium; Université Nice Sophia Antipolis—I3S (CNRS UMR 7271), Nice, Sophia Antipolis, France; Inria Lille—Nord Europe, University of Lille 1—CNRS UMR, Lille, France},
abstract={Variability management is a key issue when building and evolving software-intensive systems, making it possible to extend, configure, customize and adapt such systems to customers’ needs and specific deployment contexts. A wide form of variability can be found in extensible software systems, typically built on top of plugin-based architectures that offer a (large) number of configuration options through plugins. In an ideal world, a software architect should be able to generate a system variant on-demand, corresponding to a particular assembly of plugins. To this end, the variation points and constraints between architectural elements should be properly modeled and maintained over time (i.e., for each version of an architecture). A crucial, yet error-prone and time-consuming, task for a software architect is to build an accurate representation of the variability of an architecture, in order to prevent unsafe architectural variants and reach the highest possible level of flexibility. In this article, we propose a reverse engineering process for producing a variability model (i.e., a feature model) of a plugin-based architecture. We develop automated techniques to extract and combine different variability descriptions, including a hierarchical software architecture model, a plugin dependency model and the software architect knowledge. By computing and reasoning about differences between versions of architectural feature models, software architect can control both the variability extraction and evolution processes. The proposed approach has been applied to a representative, large-scale plugin-based system (FraSCAti), considering different versions of its architecture. We report on our experience in this context. © 2013, Springer-Verlag Berlin Heidelberg.},
author_keywords={Architecture recovery;  Configuration management;  Product lines;  Reverse engineering;  Software evolution;  Variability},
document_type={Article},
source={Scopus},
}

@ARTICLE{Ramos2014439,
author={Ramos, A. and Gomez, P. and Sánchez, M. and Villalobos, J.},
title={Automated enterprise-level analysis of archimate models},
journal={Lecture Notes in Business Information Processing},
year={2014},
volume={175 LNBIP},
pages={439-453},
doi={10.1007/978-3-662-43745-2},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84904544151&partnerID=40&md5=c468b154b3a1a65aff2149c8126b3c2c},
affiliation={Systems and Computing Engineering Department, Universidad de los Andes, Bogotá, Colombia},
abstract={Around the world, Enterprise Architecture (EA) practices are been formed in large and medium companies that see in IT either a competitive advantage or a requirement for survival. These EA practices produce models that conceptualize the enterprise, and are commonly used only for communication purposes. Using these models also for analysis purposes is desirable, but this is hard to do because of the complexity and size of these models. Automated analysis tools seem to be adequate mechanisms to solve this issue, but currently there is a problem of mismatch between the information available in the models, and the information that the automated mechanisms require. To address this, this paper proposes a characterization of analysis functions, which makes explicit the information that each one requires to be executable (among other things). Furthermore, the paper presents ArchiAnalysis, an extensible tool for applying analysis functions over ArchiMate models. © Springer-Verlag Berlin Heidelberg 2014.},
author_keywords={Analysis tools;  ArchiMate;  Automated analysis;  Enterprise Architecture;  Enterprise modeling;  Relations},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Linsbauer2014153,
author={Linsbauer, L. and Lopez-Herrejon, R.E. and Egyed, A.},
title={Feature model synthesis with genetic programming},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8636 LNCS},
pages={153-167},
doi={10.1007/978-3-319-09940-8-11},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905495331&partnerID=40&md5=fc1807781306d8092717972e199972fa},
affiliation={Software Systems Engineering, Johannes Kepler University, Linz, Austria},
abstract={Search-Based Software Engineering (SBSE) has proven successful on several stages of the software development life cycle. It has also been applied to different challenges in the context of Software Product Lines (SPLs) like generating minimal test suites. When reverse engineering SPLs from legacy software an important challenge is the reverse engineering of variability, often expressed in the form of Feature Models (FMs). The synthesis of FMs has been studied with techniques such as Genetic Algorithms. In this paper we explore the use of Genetic Programming for this task. We sketch our general workflow, the GP pipeline employed, and its evolutionary operators. We report our experience in synthesizing feature models from sets of feature combinations for 17 representative feature models, and analyze the results using standard information retrieval metrics. © 2014 Springer International Publishing Switzerland.},
author_keywords={Feature;  Feature Models;  Feature Set;  Reverse Engineering;  Software Product Lines;  Variability Modeling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Arrieta201466,
author={Arrieta, A. and Sagardui, G. and Etxeberria, L.},
title={A model-based testing methodology for the systematic validation of highly configurable cyber-physical systems},
journal={VALID 2014 - 6th International Conference on Advances in System Testing and Validation Lifecycle},
year={2014},
pages={66-72},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84922749149&partnerID=40&md5=27bb8bcc10c9082b0ed7dadd6ea72ab2},
affiliation={Computer and Electronics Department, Mondragon Goi Eskola Politeknikoa, Goiru 2, Mondragón, Spain},
abstract={Nowadays, the society is dependent on Cyber-Physical Systems (CPSs), which are complex systems that combine digital technologies and physical processes. The need for dealing with constant changes in products is leading these systems to handle variability in several aspects, which entails to a considerable increase in the complexity of the systems. Many of the research efforts are focused on the efficient development of these systems. Nevertheless, the infeasibility of testing all the possible configurations, the unclear notion of the achieved test coverage and the high amount of time required make testing processes non-systematic and challenging. This paper introduces the main problems for testing highly configurable CPSs and proposes a novel approach for testing systematically and efficiently while achieving high test coverage.},
author_keywords={Cyber-physical systems;  Model based testing;  Test methodology;  Variability modelling},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Thüm2014,
author={Thüm, T.a  and Apel, S.b  and Kästner, C.c  and Schaefer, I.d  and Saake, G.a },
title={A classification and survey of analysis strategies for software product lines},
journal={ACM Computing Surveys},
year={2014},
volume={47},
number={1},
doi={10.1145/2580950},
art_number={a6},
note={cited By 11},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905827308&partnerID=40&md5=0bc11d140fadb6e734f0acf89a65ccf0},
affiliation={University of Magdeburg, Germany; University of Passau, Germany; Carnegie Mellon University, Pittsburgh, PA, United States; University of Braunschweig, Germany},
abstract={Software-product-line engineering has gained considerable momentum in recent years, both in industry and in academia. A software product line is a family of software products that share a common set of features. Software product lines challenge traditional analysis techniques, such as type checking, model checking, and theorem proving, in their quest of ensuring correctness and reliability of software. Simply creating and analyzing all products of a product line is usually not feasible, due to the potentially exponential number of valid feature combinations. Recently, researchers began to develop analysis techniques that take the distinguishing properties of software product lines into account, for example, by checking feature-related code in isolation or by exploiting variability information during analysis. The emerging field of productline analyses is both broad and diverse, so it is difficult for researchers and practitioners to understand their similarities and differences. We propose a classification of product-line analyses to enable systematic research and application. Based on our insights with classifying and comparing a corpus of 123 research articles, we develop a research agenda to guide future research on product-line analyses. © 2014 ACM.},
author_keywords={Model checking;  Product-line analysis;  Program family;  Software analysis;  Software product line;  Static analysis;  Theorem proving;  Type checking},
document_type={Review},
source={Scopus},
}

@ARTICLE{Torkamani2014127,
author={Torkamani, M.A.},
title={Extractability effectiveness on software product line},
journal={International Journal of Electrical and Computer Engineering},
year={2014},
volume={4},
number={1},
pages={127-137},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84928310078&partnerID=40&md5=2776df2a7b1025aecfcef16812940624},
affiliation={R and D Department, Iranian Telecommunication Manufacturing Company, Shiraz, Iran},
abstract={A software product line consists of a family of software systems. Most of quality attributes are defined for single systems. When we are facing a family of products instead of a single system, some aspects of architecture evaluation, such as cost, time, and reusability of available assets, become more highlighted. In this paper a new quality attribute for software product line, which we called it extractability, is introduced. Also extractability measuring method and relationship between extractability with some quality attributes is presented. At the end, Extractability Effectiveness on Software Product Line is evaluated in practice. Copyright © 2014 Institute of Advanced Engineering and Science. All rights reserved.},
author_keywords={Extractability;  Software metrics;  Software product line;  Software quality attribute},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Arrieta201479,
author={Arrieta, A. and Sagardui, G. and Etxeberria, L.},
title={A configurable test architecture for the automatic validation of variability-intensive cyber-physical systems},
journal={VALID 2014 - 6th International Conference on Advances in System Testing and Validation Lifecycle},
year={2014},
pages={79-83},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84922709105&partnerID=40&md5=e1962c25b2ea7d67d9b20064d57ad2e0},
affiliation={Computer and Electronics Department, Mondragon Goi Eskola Politeknikoa, Spain},
abstract={The strong demand for customizable products is leading to increase variability in cyber-physical systems. The need of dealing with variability issues increases complexity not only in the product, but also in the verification and validation activities. Due to the high amount of configurations that the system can be set to, verification and validation activities might become time consuming and non-systematic. In order to deal with these problems, this paper presents an automatically configurable test architecture together with a model-based process for the systematic validation of highly configurable cyber-physical systems, with the main objective of reducing verification and validation costs. The main contributions of this paper are the analysis of the variability of the test system and its components together with the traceability among the features of the cyber-physical system and the test system and a definition of a model-based process to achieve the test objectives.},
author_keywords={Configurable systems;  Model based testing;  Test architecture;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Gómez20141101,
author={Gómez, A.a  and Penadés, M.C.b  and Canós, J.H.b  and Borges, M.R.S.c  and Llavador, M.d },
title={A framework for variable content document generation with multiple actors},
journal={Information and Software Technology},
year={2014},
volume={56},
number={9},
pages={1101-1121},
doi={10.1016/j.infsof.2013.12.006},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84901616736&partnerID=40&md5=757437f5086b62f8ff9d4340a59cacdb},
affiliation={AtlanMod, École des Mines de Nantes, INRIA - LINA, 4 rue Alfred Kastler, 44307 Nantes, France; ISSI, DSIC, Universitat Politècnica de València, Cno. de Vera, s/n, 46022 Valencia, Spain; Programa de Pós Graduação em Informática, Departamento de Ciência da Computação, Universidade Federal Do Rio de Janeiro, Brazil; Instituto Tecnológico de Informática, Universitat Politècnica de València, Cno. de Vera, s/n, 46022 Valencia, Spain},
abstract={Context Advances in customization have highlighted the need for tools supporting variable content document management and generation in many domains. Current tools allow the generation of highly customized documents that are variable in both content and layout. However, most frameworks are technology-oriented, and their use requires advanced skills in implementation-related tools, which means their use by end users (i.e. document designers) is severely limited. Objective Starting from past and current trends for customized document authoring, our goal is to provide a document generation alternative in which variants are specified at a high level of abstraction and content reuse can be maximized in high variability scenarios. Method Based on our experience in Document Engineering, we identified areas in the variable content document management and generation field open to further improvement. We first classified the primary sources of variability in document composition processes and then developed a methodology, which we called DPL - based on Software Product Lines principles - to support document generation in high variability scenarios. Results In order to validate the applicability of our methodology we implemented a tool - DPLfw - to carry out DPL processes. After using this in different scenarios, we compared our proposal with other state-of-the-art tools for variable content document management and generation. Conclusion The DPLfw showed a good capacity for the automatic generation of variable content documents equal to or in some cases surpassing other currently available approaches. To the best of our knowledge, DPLfw is the only framework that combines variable content and document workflow facilities, easing the generation of variable content documents in which multiple actors play different roles. © 2014 Elsevier B.V. All rights reserved.},
author_keywords={Document generation;  Document product line;  Document workflow;  Feature modeling;  Model driven engineering;  Variable data printing},
document_type={Article},
source={Scopus},
}

@ARTICLE{Frömmgen2014267,
author={Frömmgen, A. and Lehn, M. and Buchmann, A.},
title={A property description framework for composable software},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2014},
volume={8627 LNCS},
pages={267-282},
doi={10.1007/978-3-319-09970-5-24},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84906330671&partnerID=40&md5=08890abf6005e940fe99a7f9bf29c183},
affiliation={Databases and Distributed Systems Group (DVS), TU Darmstadt, Germany},
abstract={The composition of software components can be used to fit specific application needs. Finding feasible and, moreover, optimal compositions demands extensive domain knowledge from the developer - with respect to both application requirements and used components. Frameworks can provide support for the composition selection based on requirements, component properties, and their dependencies. Their description, however, becomes complex in practice. In this paper, we propose the ProDesc framework. It contains a property description language with a bespoke type system for describing properties of software components and their operations. ProDesc can express compositional variability, including dependencies of properties on the environment and on other components. A UML-like graphical notation and transformations to feature diagrams support the software developer. The most suitable component composition is selected based on a utility function, which is evaluated during runtime. Our approach raises the abstraction level, leads to a clear separation of concerns, reduces the development time, and facilitates optimized software. © 2014 Springer International Publishing Switzerland.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Galster2014282,
author={Galster, M.a  and Weyns, D.b  and Tofan, D.c  and Michalik, B.d  and Avgeriou, P.c },
title={Variability in software systems-A systematic literature review},
journal={IEEE Transactions on Software Engineering},
year={2014},
volume={40},
number={3},
pages={282-306},
doi={10.1109/TSE.2013.56},
art_number={6682901},
note={cited By 6},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84897604910&partnerID=40&md5=686c7b63906ad6981d3b79191ad075a0},
affiliation={Department of Computer Science and Software Engineering, University of Canterbury, Private Bag 4800, Christchurch 8140, New Zealand; Department of Computer Science, Linnaeus University, Vaxjo SE-351 95, Sweden; Department of Mathematics and Computing Science, University of Groningen, Groningen 9700 AK, Netherlands},
abstract={Context: Variability (i.e., the ability of software systems or artifacts to be adjusted for different contexts) became a key property of many systems. Objective: We analyze existing research on variability in software systems. We investigate variability handling in major software engineering phases (e.g., requirements engineering, architecting). Method: We performed a systematic literature review. A manual search covered 13 premium software engineering journals and 18 premium conferences, resulting in 15,430 papers searched and 196 papers considered for analysis. To improve reliability and to increase reproducibility, we complemented the manual search with a targeted automated search. Results: Software quality attributes have not received much attention in the context of variability. Variability is studied in all software engineering phases, but testing is underrepresented. Data to motivate the applicability of current approaches are often insufficient; research designs are vaguely described. Conclusions: Based on our findings we propose dimensions of variability in software engineering. This empirically grounded classification provides a step towards a unifying, integrated perspective of variability in software systems, spanning across disparate or loosely coupled research themes in the software engineering community. Finally, we provide recommendations to bridge the gap between research and practice and point to opportunities for future research. © 2013 IEEE.},
author_keywords={software engineering;  systematic review;  Variability},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lopez-Herrejon2014387,
author={Lopez-Herrejon, R.E.a  and Ferrer, J.b  and Chicano, F.b  and Egyed, A.a  and Alba, E.b },
title={Comparative analysis of classical multi-objective evolutionary algorithms and seeding strategies for pairwise testing of Software Product Lines},
journal={Proceedings of the 2014 IEEE Congress on Evolutionary Computation, CEC 2014},
year={2014},
pages={387-396},
doi={10.1109/CEC.2014.6900473},
art_number={6900473},
note={cited By 3},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84907860137&partnerID=40&md5=478720f01c1fe4c24b340b0ade9b4b4a},
affiliation={Software Systems Engineering, Johannes Kepler University Linz, Austria; Universidad de Málaga, Andalucía Tech, Spain},
abstract={Software Product Lines (SPLs) are families of related software products, each with its own set of feature combinations. Their commonly large number of products poses a unique set of challenges for software testing as it might not be technologically or economically feasible to test of all them individually. SPL pairwise testing aims at selecting a set of products to test such that all possible combinations of two features are covered by at least one selected product. Most approaches for SPL pairwise testing have focused on achieving full coverage of all pairwise feature combinations with the minimum number of products to test. Though useful in many contexts, this single-objective perspective does not reflect the prevailing scenario where software engineers do face trade-offs between the objectives of maximizing the coverage or minimizing the number of products to test. In contrast and to address this need, our work is the first to propose a classical multi-objective formalisation where both objectives are equally important. In this paper, we study the application to SPL pairwise testing of four classical multi-objective evolutionary algorithms. We developed three seeding strategies - techniques that leverage problem domain knowledge - and measured their performance impact on a large and diverse corpus of case studies using two well-known multi-objective quality measures. Our study identifies the performance differences among the algorithms and corroborates that the more domain knowledge leveraged the better the search results. Our findings enable software engineers to select not just one solution (as in the case of single-objective techniques) but instead to select from an array of test suite possibilities the one that best matches the economical and technological constraints of their testing context. © 2014 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Machado20141183,
author={Machado, I.D.C.a  and McGregor, J.D.b  and Cavalcanti, Y.C.c  and De Almeida, E.S.a },
title={On strategies for testing software product lines: A systematic literature review},
journal={Information and Software Technology},
year={2014},
volume={56},
number={10},
pages={1183-1199},
doi={10.1016/j.infsof.2014.04.002},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84905124696&partnerID=40&md5=d721f4c875b495092524907c14f11b31},
affiliation={Computer Science Department, Federal University of Bahia, UFBA, Salvador, Brazil; School of Computing, Clemson University, Clemson, SC, United States; Federal Data Processing Service, SERPRO, Florianópolis, Brazil},
abstract={Context Testing plays an important role in the quality assurance process for software product line engineering. There are many opportunities for economies of scope and scale in the testing activities, but techniques that can take advantage of these opportunities are still needed. Objective The objective of this study is to identify testing strategies that have the potential to achieve these economies, and to provide a synthesis of available research on SPL testing strategies, to be applied towards reaching higher defect detection rates and reduced quality assurance effort. Method We performed a literature review of two hundred seventy-six studies published from the year 1998 up to the 1st semester of 2013. We used several filters to focus the review on the most relevant studies and we give detailed analyses of the core set of studies. Results The analysis of the reported strategies comprised two fundamental aspects for software product line testing: the selection of products for testing, and the actual test of products. Our findings indicate that the literature offers a large number of techniques to cope with such aspects. However, there is a lack of reports on realistic industrial experiences, which limits the inferences that can be drawn. Conclusion This study showed a number of leveraged strategies that can support both the selection of products, and the actual testing of products. Future research should also benefit from the problems and advantages identified in this study. © 2014 Elsevier B.V. All rights reserved.},
author_keywords={Software product lines;  Software quality;  Software testing;  Systematic literature review},
document_type={Review},
source={Scopus},
}

@CONFERENCE{Acher2014243,
author={Acher, M.a  and Combemale, B.a  and Collet, P.b },
title={Metamorphic domain-specific languages: A journey into the shapes of a language},
journal={Onward! 2014 - Proceedings of the 2014 ACM International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software, Part of SPLASH 2014},
year={2014},
pages={243-253},
doi={10.1145/2661136.2661159},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84910658332&partnerID=40&md5=774f4fd739e8aaa686893e2ba6a18930},
affiliation={University of Rennes 1, INRIA, IRISA, France; Univ. Nice - Sophia Antipolis, I3S, France},
abstract={External or internal domain-specific languages (DSLs) or (fluent) APIs? Whoever you are - a developer or a user of a DSL - you usually have to choose side; you should not! What about metamorphic DSLs that change their shape according to your needs? Our 4-years journey of providing the "right" support (in the domain of feature modeling), led us to develop an external DSL, different shapes of an internal API, and maintain all these languages. A key insight is that there is no one-size-fits-all solution or no clear superiority of a solution compared to another. On the contrary, we found that it does make sense to continue the maintenance of an external and internal DSL. Based on our experience and on an analysis of the DSL engineering field, the vision that we foresee for the future of software languages is their ability to be self-adaptable to the most appropriate shape (including the corresponding integrated development environment) according to a particular usage or task. We call metamorphic DSL such a language, able to change from one shape to another shape. Copyright © 2014 ACM.},
author_keywords={Domain-specific languages;  Metamorphic;  Programming},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{She20141122,
author={She, S.a  and Ryssel, U.b  and Andersen, N.c  and Wa̧sowski, A.d  and Czarnecki, K.a },
title={Efficient synthesis of feature models},
journal={Information and Software Technology},
year={2014},
volume={56},
number={9},
pages={1122-1143},
doi={10.1016/j.infsof.2014.01.012},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84901604748&partnerID=40&md5=13d6429334b9f7420699f670b4bbcfc1},
affiliation={Generative Software Development Lab, Department of Electrical and Computer Engineering, University of Waterloo, 200 University Avenue West, Waterloo, ON N2L 3G1, Canada; Technische Universität Dresden, Fakultät Informatik, Institut für Angewandte Informatik, D-01062 Dresden, Germany; Configit A/S, Kristianiagade 7, 2100 Copenhagen, Denmark; IT University of Copenhagen, Rued Langgaards Vej 7, 2300 Copenhagen, Denmark},
abstract={Context Variability modeling, and in particular feature modeling, is a central element of model-driven software product line architectures. Such architectures often emerge from legacy code, but, creating feature models from large, legacy systems is a long and arduous task. We describe three synthesis scenarios that can benefit from the algorithms in this paper. Objective This paper addresses the problem of automatic synthesis of feature models from propositional constraints. We show that the decision version of the problem is NP-hard. We designed two efficient algorithms for synthesis of feature models from CNF and DNF formulas respectively. Method We performed an experimental evaluation of the algorithms against a binary decision diagram (BDD)-based approach and a formal concept analysis (FCA)-based approach using models derived from realistic models. Results Our evaluation shows a 10 to 1,000-fold performance improvement for our algorithms over the BDD-based approach. The performance of the DNF-based algorithm was similar to the FCA-based approach, with advantages for both techniques. We identified input properties that affect the runtimes of the CNF- and DNF-based algorithms. Conclusions Our algorithms are the first known techniques that are efficient enough to be used on dependencies extracted from real systems, opening new possibilities of creating reverse engineering and model management tools for variability models. © 2014 Elsevier B.V. All rights reserved.},
author_keywords={Feature models;  Software product lines;  Variability models},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lettner201352,
author={Lettner, D.a  and Petruzelka, M.b  and Rabiser, R.a  and Angerer, F.a  and Prähofer, H.a  and Grünbacher, P.c },
title={Custom-developed vs. model-based configuration tools: Experiences from an industrial automation ecosystem},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={52-58},
doi={10.1145/2499777.2500713},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890491364&partnerID=40&md5=2aba8cf621e25d1a7c356162a7ba0dce},
affiliation={CDL MEVSS, Johannes Kepler University Linz, 4040 Linz, Austria; KEBA AG, Gewerbepark Urfahr, 4041 Linz, Austria; Systems Engineering and Automation, Johannes Kepler University Linz, 4040 Linz, Austria},
abstract={High demands regarding the variability of automation software motivate organizations to automate the configuration process. In practice, this often leads to the development of custom configuration tools designed specifically for configuring the automation software they were developed for. This approach works well as long as both, the development of the software and the configurator are under the full control of the organization. However, software platforms are increasingly open, i.e., key customers add capabilities and thereby change the platform's variability. Often, these customers create a new platform themselves, which they offer to their customers. Moving from a closed platform to a software ecosystem means that development and variability management happen at multiple layers involving multiple teams with different backgrounds. This poses new requirements regarding the flexibility of configuration tools. In this paper, we report experiences and issues with a custom-developed configurator currently in use in an industrial automation software ecosystem. We describe how a model-based tool can be applied to address these issues and provide a scenario-based comparison of the custom-developed solution and the model-based configurator. Copyright 2013 ACM.},
author_keywords={Configuration;  Model-based product lines;  Software ecosystem},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Varshosaz201334,
author={Varshosaz, M. and Khosravi, R.},
title={Discrete time Markov chain families: Modeling and verification of probabilistic software product lines},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={34-41},
doi={10.1145/2499777.2500725},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890488509&partnerID=40&md5=e17055c66b9d1855cb49e70aa99a123d},
affiliation={School of Electrical and Computer Engineering, College of Engineering, University of Tehran, Tehran, Iran},
abstract={Software product line engineering (SPLE) enables systematic reuse in development of a family of related software systems by explicitly defining commonalities and variabilities among the individual products in the family. Nowadays, SPLE is used in a variety of complex domains such as avionics and automotive. As such domains include safety critical systems which exhibit probabilistic behavior, there is a major need for modeling and verification approaches dealing with probabilistic aspects of systems in the presence of variabilities. In this paper, we introduce a mathematical model, Discrete Time Markov Chain Family (DTMCF), which compactly represents the probabilistic behavior of all the products in the product line. We also provide a probabilistic model checking method to verify DTMCFs against Probabilistic Computation Tree Logic (PCTL) properties. This way, instead of verifying each product individually, the whole family is model checked at once, resulting in the set of products satisfying the desired property. This reduces the required cost for model checking by eliminating redundant processing caused by the commonalities among the products. Copyright 2013 ACM.},
author_keywords={Probabilistic model checking;  Software product line;  Variable discrete time Markov chains},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Romero201359,
author={Romero, D.a  and Urli, S.b  and Quinton, C.a  and Blay-Fornarino, M.b  and Collet, P.b  and Duchien, L.a  and Mosser, S.b },
title={SPLEMMA: A generic framework for controlled-evolution of software product lines},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={59-66},
doi={10.1145/2499777.2500709},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890505571&partnerID=40&md5=ab7f24f70c0dc95e07c8c52092485670},
affiliation={ADAM Project-Team, Université Lille 1, LIFL (UMR CNRS 8022), France; MODALIS Team, Université Nice Sophia Antipolis, I3S (UMR CNRS 7271), France},
abstract={Managing in a generic way the evolution process of feature-oriented Software Product Lines (spls) is complex due to the number of elements that are impacted and the heterogeneity of the spls regarding artifacts used to define them. Existing work presents specific approaches to manage the evolution of spls in terms of such artifacts, i.e., assets, feature models and relation definitions. Moreover stakeholders do not necessarily master all the knowledge of the spl making its evolution difficult and error-prone without a proper tool support. In order to deal with these issues, we introduce SPLEmma, a generic framework that follows a Model Driven Engineering approach to capture the evolution of a spl independently of the kind of assets, technologies or feature models used for the product derivation. Authorized changes are described by the spl maintainer and captured in a model used to generate tools that guide the evolution process and preserve the consistency of the whole spl. We report on the application of our approach on two spls: YourCast for digital signage systems, and SALOON, which enables generation of configurations for cloud providers. Copyright 2013 ACM.},
author_keywords={Evolution;  Model-driven engineering},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kolokolov201367,
author={Kolokolov, V.a  and Baumann, P.a  and Santini, S.a  and Ruehl, S.T.b  and Verclas, S.A.W.c },
title={Flexible development of variable software features for mobile business applications},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={67-73},
doi={10.1145/2499777.2500712},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890482203&partnerID=40&md5=a705a4d806bbbdc000619f5aa641f7d0},
affiliation={WSN Lab., TU Darmstadt, Germany; TU Clausthal, Germany; T-Systems International GmbH, Darmstadt, Germany},
abstract={With recent advances in development and deployment of mobile business applications (MBAs) based on the hybrid Web approach (hybrid MBAs) enterprises around the world well recognize new potentials to mobilize their business processes (BPs). Variability has a natural appearance in complex environments of different enterprises, where even similar BPs can have varying facets on the cross-enterprise scale. Yet, despite this fact current development tools for hybrid MBAs are lacking systematic variability management. Further, the literature on this particular technological landscape is scarce. We highlight in this paper emerging importance of this research field and describe its context and a research methodology. We propose an SPL-based approach to tackle considerable variabilities of hybrid MBAs.},
author_keywords={Hybrid web;  Mobile business applications;  Software product lines;  Variability modeling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Henard2013126,
author={Henard, C.a  and Papadakis, M.a  and Perrouin, G.b  and Klein, J.a  and Le Traon, Y.a },
title={PLEDGE: A product line editor and test generation tool},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={126-129},
doi={10.1145/2499777.2499778},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890453128&partnerID=40&md5=d82fb8d17fbd6834328bed83e03c9f91},
affiliation={SnT, University of Luxembourg, Luxembourg, Luxembourg; PReCISE, University of Namur, Namur, Belgium},
abstract={Specific requirements of clients lead to the development of variants of the same software. These variants form a Software Product Line (SPL). Ideally, testing a SPL involves testing all the software products that can be configured through the combination of features. This, however, is intractable in practice since a) large SPLs can lead to millions of possible software variants and b) the testing process is usually limited by budget and time constraints. To overcome this problem, this paper introduces PLEDGE, an open source tool that selects and prioritizes the product configurations maximizing the feature interactions covered. The uniqueness of PLEDGE is that it bypasses the computation of the feature interactions, allowing to scale to large SPLs. Copyright 2013 ACM.},
author_keywords={Combinatorial interaction testing;  Prioritization;  Scalability;  Search-based approaches;  Software product lines;  T-wise},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Huang201386,
author={Huang, C. and Kamei, Y. and Yamashita, K. and Ubayashi, N.},
title={Using alloy to support feature-based DSL construction for mining software repositories},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={86-89},
doi={10.1145/2499777.2500714},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890450137&partnerID=40&md5=a68825b84896dfab304c5221a6151bba},
affiliation={Kyushu University, Fukuoka, Japan},
abstract={The Mining Software Repositories (MSR) field reveals knowledge for software development by analyzing data stored in repositories such as source control and bug trace systems. In order to reveal the knowledge, MSR researchers need to perform complicated procedures iteratively. To help the complex work of MSR practitioners, we study the construction of domain specific languages (DSLs) for MSR. We have conducted feature-oriented domain analysis (FODA) on MSR and developed a DSL based on the feature model. In this paper, we expand our previous work and propose to construct not a single DSL but a DSL family. A DSL family consists of a series of DSLs with commonality in their domain but suitable to specific applications of MSR. To readily construct these DSLs, we use Alloy to encode the feature model. Our encoding includes not only the DSL features and their relations but also some composition rules that can be used to generate the syntax of DSLs. Based on this, we can automatically derive the language elements to construct DSLs suitable to specific purposes of MSR. Copyright 2013 ACM.},
author_keywords={DSL;  FODA;  Mining software repositories;  SPL},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Schröter201396,
author={Schröter, R. and Siegmund, N. and Thüm, T.},
title={Towards modular analysis of multi product lines},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={96-99},
doi={10.1145/2499777.2500719},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890468973&partnerID=40&md5=3db2d712ca6ea18f41f5ca81f6cb1c6d},
affiliation={University of Magdeburg, Germany},
abstract={Software product-line engineering enables efficient development of tailor-made software by means of reusable artifacts. As practitioners increasingly develop software systems as product lines, there is a growing potential to reuse product lines in other product lines, which we refer to as multi product line. We identify challenges when developing multi product lines and propose interfaces for different levels of abstraction ranging from variability modeling to functional and non-functional properties. We argue that these interfaces ease the reuse of product lines and identify research questions that need to be solved toward modular analysis of multi product lines. Copyright 2013 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kramer201385,
author={Kramer, D.a  and Oussena, S.a  and Komisarczuk, P.a  and Clark, T.b },
title={Using document-oriented GUIs in dynamic software product lines},
journal={SPLASH Indianapolis 2013; GPCE 2013 - Proceedings of the 12th International Conference on Generative Programming: Concepts and Experiences},
year={2013},
pages={85-94},
doi={10.1145/2517208.2517214},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84889658804&partnerID=40&md5=224a6f2ab33f1cb734b8251484ba835a},
affiliation={School of Computing and Technology, University of West London, London, United Kingdom; School of Engineering and Information Sciences, Middlesex University, London, United Kingdom},
abstract={Dynamic Software Product Line (DSPL) Engineering has gained interest through its promise of being able to unify software adaptation whereby software adaptation can be realised at compile time and runtime. While previous work has enabled program logic adaptation by the use of language extensions and platform support, little attention has been placed on Graphical User Interface (GUI) variability. Different design patterns including the Model View Controller are commonly used in GUI implementation, with GUI documents being used for declaring the GUI. To handle dynamic GUI variability currently, the developer needs to implement GUI refinements using multiple techniques. This paper proposes a solution for dealing with GUI document variability, statically and dynamically, in a unified way. In our approach, we currently use a compile time method for producing GUI variants, and code transformations to handle these variants within the application at runtime. To avoid GUI duplicates, only GUI variants that are unique, and related to a valid product configuration, are produced. To validate our approach, we implemented tool support to enable this for Android based applications. © 2013 ACM.},
author_keywords={dynamic software product lines;  graphical user interfaces},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Basso2013169,
author={Basso, F.P.a  and Pillat, R.M.a  and Oliveira, T.C.a  and Becker, L.B.b },
title={Supporting large scale model transformation reuse},
journal={SPLASH Indianapolis 2013; GPCE 2013 - Proceedings of the 12th International Conference on Generative Programming: Concepts and Experiences},
year={2013},
pages={169-178},
doi={10.1145/2517208.2517218},
note={cited By 3},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84889664267&partnerID=40&md5=fe166215ae8b1360e36903416ab0d70c},
affiliation={Federal University of Rio de Janeiro (UFRJ), Rio de Janeiro, RJ, Brazil; Federal University of Santa Catarina (UFSC), Postal 476, 88.040-900 - Florianópolis - SC, Brazil},
abstract={The growth of applications developed with the support of model transformations makes reuse a required practice, specially when applied to transformation assets (e.g. transformation chains, algorithms, and configuration files). In order to promote reuse one must consider the different implementations, communalities, and variants among these assets. In this domain, a couple techniques have been used as solutions to adapt reusable assets for specific needs. However, so far, no work has discussed their combined use in real software projects. In this paper, we present a new tool named WCT, which can be used to adapt transformation assets. Moreover, through lessons learned in industry, we address some reuse techniques devoted to adapt these assets. © 2013 ACM.},
author_keywords={feature model;  mde;  model transformation chain;  product line technique;  transformation reuse},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Garcia-Galan2013574,
author={Garcia-Galan, J. and Trinidad, P. and Ruiz-Cortes, A.},
title={Multi-user variability configuration: A game theoretic approach},
journal={2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings},
year={2013},
pages={574-579},
doi={10.1109/ASE.2013.6693115},
art_number={6693115},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84893575297&partnerID=40&md5=8f02b4f991b76fc8fa74f46abe7fa298},
affiliation={Dept. Languages and Computer Systems, University of Seville, Seville, Spain},
abstract={Multi-user configuration is a neglected problem in variability-intensive systems area. The appearance of conflicts among user configurations is a main concern. Current approaches focus on avoiding such conflicts, applying the mutual exclusion principle. However, this perspective has a negative impact on users satisfaction, who cannot make any decision fairly. In this work, we propose an interpretation of multi-user configuration as a game theoretic problem. Game theory is a well-known discipline which analyzes conflicts and cooperation among intelligent rational decision-makers. We present a taxonomy of multi-user configuration approaches, and how they can be interpreted as different problems of game theory. We focus on cooperative game theory to propose and automate a tradeoff-based bargaining approach, as a way to solve the conflicts and maximize user satisfaction at the same time. © 2013 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Pohl2013454,
author={Pohl, R. and Stricker, V. and Pohl, K.},
title={Measuring the structural complexity of feature models},
journal={2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings},
year={2013},
pages={454-464},
doi={10.1109/ASE.2013.6693103},
art_number={6693103},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84892693494&partnerID=40&md5=ac3e8e9c251b4e227b6d7fa758c57f33},
affiliation={Paluno - Ruhr Institute for Software Technology, University of Duisburg-Essen, Gerlingstr. 16, 45127 Essen, Germany},
abstract={The automated analysis of feature models (FM) is based on SAT, BDD, and CSP - known NP-complete problems. Therefore, the analysis could have an exponential worst-case execution time. However, for many practical relevant analysis cases, state-of-the-art (SOTA) analysis tools quite successfully master the problem of exponential worst-case execution time based on heuristics. So far, however, very little is known about the structure of FMs that cause the cases in which the execution time (hardness) for analyzing a given FM increases unpredictably for SOTA analysis tools. In this paper, we propose to use width measures from graph theory to characterize the structural complexity of FMs as a basis for an estimation of the hardness of analysis operations on FMs with SOTA analysis tools. We present an experiment that we use to analyze the reasonability of graph width measures as metric for the structural complexity of FMs and the hardness of FM analysis. Such a complexity metric can be used as a basis for a unified method to systematically improve SOTA analysis tools. © 2013 IEEE.},
author_keywords={automated analysis;  feature model;  performance measurement;  software product line},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lopez-Herrejon2013404,
author={Lopez-Herrejon, R.E.a  and Chicano, F.b  and Ferrer, J.b  and Egyed, A.a  and Alba, E.b },
title={Multi-objective optimal test suite computation for software product line pairwise testing},
journal={IEEE International Conference on Software Maintenance, ICSM},
year={2013},
pages={404-407},
doi={10.1109/ICSM.2013.58},
art_number={6676918},
note={cited By 6},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891672624&partnerID=40&md5=4b05f2ffd1c770082da99948e9360ca5},
affiliation={Systems Engineering and Automation, Johannes Kepler University Linz, Austria; University of Malaga, Spain},
abstract={Software Product Lines (SPLs) are families of related software products, which usually provide a large number of feature combinations, a fact that poses a unique set of challenges for software testing. Recently, many SPL testing approaches have been proposed, among them pair wise combinatorial techniques that aim at selecting products to test based on the pairs of feature combinations such products provide. These approaches regard SPL testing as an optimization problem where either coverage (maximize) or test suite size (minimize) are considered as the main optimization objective. Instead, we take a multi-objective view where the two objectives are equally important. In this exploratory paper we propose a zero-one mathematical linear program for solving the multi-objective problem and present an algorithm to compute the true Pareto front, hence an optimal solution, from the feature model of a SPL. The evaluation with 118 feature models revealed an interesting trade-off between reducing the number of constraints in the linear program and the runtime which opens up several venues for future research. © 2013 IEEE.},
author_keywords={Multi-objective optimization;  Pairwise testing;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Klawitter2013169,
author={Klawitter, S.a  and Rock, G.b },
title={Handling of product variety throughout the product life-cycle},
journal={Advanced Concurrent Engineering},
year={2013},
pages={169-179},
doi={10.1007/978-1-4471-4426-7-15},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894044127&partnerID=40&md5=021da3fb1a14dd4ab5ec7e5d60d20ddd},
affiliation={ZF Friedrichshafen AG, 88038 Friedrichshafen, Germany; Computer Science Department, University of Applied Science Trier, 54208 Trier, Germany},
abstract={The handling of product variability throughout the complete product life-cycle is known to be a challenging task. With this work we aim to achieve an efficient and provably consistent way of managing the dynamic field of product variability of customer specific gearboxes within the development process of the ZF Friedrichshafen AG. This work starts with an overview and an analysis of the current methodology to handle product variability within the overall development processes. After identifying possible improvements with respect to the current product data management system, the realization of these improvements is outlined with the help of a formal specification and a "prover-based" analysis of product variability. © Springer-Verlag London 2013.},
author_keywords={Early development;  Product data management;  Product line engineering;  Product variability;  Variant management},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Nguyen2013321,
author={Nguyen, T. and Colman, A. and Han, J.},
title={A web services variability description language (WSVL) for business users oriented service customization},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7652 LNCS},
pages={321-334},
doi={10.1007/978-3-642-38333-5_34},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891308404&partnerID=40&md5=dd974e67b270401f54eae222e60fe597},
affiliation={Faculty of Information and Communication Technology, Swinburne University of Technology, Melbourne, VIC, Australia},
abstract={To better facilitate business users in customizing Web services, customization options need to be described at a high level of abstraction. In contrast to related efforts that describe customization options at the technical level of service description, we propose a Web Services Variability description Language (WSVL) that facilitates the representation of such options at business level. The language has several advantages. Firstly, it does not require people, who perform customization, to have knowledge of Web service technologies. Thus, the language enables business users-friendly service customization. Secondly, the language captures not only what can be customized, but also how and where customization operations should happen in a service-oriented way. This self-described property removes the need for a separate procedure for governing service customization. Consequently, this property eases the adoption of the language. We elaborate the design of the language using a case study and describe its usages from both consumers and providers' viewpoints. © 2013 Springer-Verlag.},
author_keywords={Feature model;  Service customization;  Service description language;  Service variability;  Software Product Line (SPL)},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Berger20131611,
author={Berger, T.a  and She, S.b  and Lotufo, R.b  and Wasowski, A.a  and Czarnecki, K.b },
title={A study of variability models and languages in the systems software domain},
journal={IEEE Transactions on Software Engineering},
year={2013},
volume={39},
number={12},
pages={1611-1640},
doi={10.1109/TSE.2013.34},
art_number={6572787},
note={cited By 9},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890065386&partnerID=40&md5=f3b1265408019e72ec8edea173428cb7},
affiliation={IT University of Copenhagen, Rued Langgaards Vej 7, Copenhagen 2300, Denmark; Generative Software Development Lab, Department of Electrical and Computer Engineering, University of Waterloo, 200 University Ave. West, Waterloo, ON N2L3G1, Canada},
abstract={Variability models represent the common and variable features of products in a product line. Since the introduction of FODA in 1990, several variability modeling languages have been proposed in academia and industry, followed by hundreds of research papers on variability models and modeling. However, little is known about the practical use of such languages. We study the constructs, semantics, usage, and associated tools of two variability modeling languages, Kconfig and CDL, which are independently developed outside academia and used in large and significant software projects. We analyze 128 variability models found in 12 open - source projects using these languages. Our study 1) supports variability modeling research with empirical data on the real-world use of its flagship concepts. However, we 2) also provide requirements for concepts and mechanisms that are not commonly considered in academic techniques, and 3) challenge assumptions about size and complexity of variability models made in academic papers. These results are of interest to researchers working on variability modeling and analysis techniques and to designers of tools, such as feature dependency checkers and interactive product configurators. © 1976-2012 IEEE.},
author_keywords={configuration;  Empirical software engineering;  feature modeling;  open source;  software product lines;  variability modeling},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Sannier2013580,
author={Sannier, N. and Acher, M. and Baudry, B.},
title={From comparison matrix to Variability Model: The Wikipedia case study},
journal={2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings},
year={2013},
pages={580-585},
doi={10.1109/ASE.2013.6693116},
art_number={6693116},
note={cited By 5},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84893556728&partnerID=40&md5=a51c53b37c394abf3b3362977ef54d9f},
affiliation={University of Rennes 1, Irisa/Inria, Campus Universitaire de Beaulieu, 35042 Rennes Cedex, France},
abstract={Product comparison matrices (PCMs) provide a convenient way to document the discriminant features of a family of related products and now abound on the internet. Despite their apparent simplicity, the information present in existing PCMs can be very heterogeneous, partial, ambiguous, hard to exploit by users who desire to choose an appropriate product. Variability Models (VMs) can be employed to formulate in a more precise way the semantics of PCMs and enable automated reasoning such as assisted configuration. Yet, the gap between PCMs and VMs should be precisely understood and automated techniques should support the transition between the two. In this paper, we propose variability patterns that describe PCMs content and conduct an empirical analysis of 300+ PCMs mined from Wikipedia. Our findings are a first step toward better engineering techniques for maintaining and configuring PCMs. © 2013 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Zhang2013669,
author={Zhang, Z.a  and Guo, H.b },
title={Quality performance monitor: A server performance visualization tool},
journal={Communications in Computer and Information Science},
year={2013},
volume={373},
number={PART I},
pages={669-672},
doi={10.1007/978-3-642-39473-7_133},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891505164&partnerID=40&md5=35db043d4a00e1728f49e0900823d5ce},
affiliation={Peking University, School of Software and Microelectronics, China; Nanyang Technological University, Wee Kim Wee School of Communication and Information, Singapore},
abstract={Thousands of companies have deployed servers and it is necessary to measure, analyze and evaluate the performance of the servers through performance test. Generally, we mainly analyze performance data by drawing different performance charts. First, performance test is time-consuming, including calculating and drawing chart. And it is difficult to combine new performance data with history performance data to draw chart for analysis. Besides, various mistakes may be made by analyzing huge amount of performance data. Another challenge is to support performance test of every new projects and collaborative work in different teams like QA, Development and DBA in the companies. This paper presents a web-based tool called Quality Performance Monitor (QPM) for server performance monitor, supporting visualization of performance test, and demonstrates its superiority to traditional performance test. © Springer-Verlag Berlin Heidelberg 2013.},
author_keywords={Data Analysis;  Functional Design;  Performance test;  Visualization},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sayyad2013465,
author={Sayyad, A.S. and Ingram, J. and Menzies, T. and Ammar, H.},
title={Scalable product line configuration: A straw to break the camel's back},
journal={2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings},
year={2013},
pages={465-474},
doi={10.1109/ASE.2013.6693104},
art_number={6693104},
note={cited By 8},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84893626659&partnerID=40&md5=e9b2bd52b54b13d433f13407d8f0694a},
affiliation={Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, United States},
abstract={Software product lines are hard to configure. Techniques that work for medium sized product lines fail for much larger product lines such as the Linux kernel with 6000+ features. This paper presents simple heuristics that help the Indicator-Based Evolutionary Algorithm (IBEA) in finding sound and optimum configurations of very large variability models in the presence of competing objectives. We employ a combination of static and evolutionary learning of model structure, in addition to utilizing a pre-computed solution used as a 'seed' in the midst of a randomly-generated initial population. The seed solution works like a single straw that is enough to break the camel's back -given that it is a feature-rich seed. We show promising results where we can find 30 sound solutions for configuring upward of 6000 features within 30 minutes. © 2013 IEEE.},
author_keywords={automated configuration;  evolutionary algorithms;  multiobjective optimization;  SMT solvers;  Variability models},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Karataş20132295,
author={Karataş, A.S. and Oǧuztüzün, H. and Doǧru, A.},
title={From extended feature models to constraint logic programming},
journal={Science of Computer Programming},
year={2013},
volume={78},
number={12},
pages={2295-2312},
doi={10.1016/j.scico.2012.06.004},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884673259&partnerID=40&md5=ef7960b6ad46281b0c7d4276345f983c},
affiliation={Middle East Technical University, Department of Computer Engineering, Ankara, Turkey},
abstract={Since feature models for realistic product families may be quite complicated, the automated analysis of feature models is desirable. Although several approaches reported in the literature address this issue, complex cross-tree relationships involving attributes in extended feature models have not been handled. In this article, we introduce a mapping from extended feature models to constraint logic programming over finite domains. This mapping is used to translate into constraint logic programs; basic, cardinality-based and extended feature models, which can include complex cross-tree relationships involving attributes. This translation enables the use of off-the-shelf constraint solvers for the automated analysis of extended feature models involving such complex relationships. We also present the performance results of some well-known analysis operations on an example translated model. © 2012 Elsevier B.V. All rights reserved.},
author_keywords={Constraint logic programming;  Extended feature model;  Feature attribute;  Variability modeling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Gümmer2013109,
author={Gümmer, R.a  and Junk, C.b  and Rock, G.c },
title={A Variant management based methodology for the requirements-engineering process of mechanical parts},
journal={Advanced Concurrent Engineering},
year={2013},
pages={109-120},
doi={10.1007/978-1-4471-4426-7-10},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894066278&partnerID=40&md5=9c17894d16ab13f12b72d7534d1397b0},
affiliation={Volkswagen AG Dept EAMS/7, 38436 Wolfsburg, Germany; PROSTEP AG, Major-Hirst-Strase 11, 38442 Wolfsburg, Germany; Computer Science Department, University of Applied Science Trier, 54208 Trier, Germany},
abstract={The value of software or functionality that is realized using software within modern cars is about 35% of the value of the car itself. We typically have more than 70 ECU in a car with functionality realized and controlled by software. Although most of the current research is focused on software engineering issues, the problems addressed in the software area also occur in the development of mechanical components. Globalization is not limited to software, it also impacts the development departments of OEMs (Original Equipment Manufacturers) with components requested and produced all over the world. Additionally, variability of hardware components used to customize cars is drastically increasing and can be compared to the variability growth in software. Therefore, the efficient and effective handling of requirements for mechanical parts is one of the key factors for a sustainable success within automobile industry. To be able to cope with the expected complexity, Volkswagen decided to introduce a new product line based requirements management methodology. The paper describes the developed methodology and experience made when introducing such a methodology. © Springer-Verlag London 2013.},
author_keywords={Knowledge based engineering;  Product line methodology;  Requirements management;  Variant management},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang2013206,
author={Wang, R. and Dagli, C.H.},
title={Developing a holistic modeling approach for search-based system architecting},
journal={Procedia Computer Science},
year={2013},
volume={16},
pages={206-215},
doi={10.1016/j.procs.2013.01.022},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84898732857&partnerID=40&md5=7e6e8f472fbc3d3b5d384935b896efca},
affiliation={Engineering Management and Systems Engineering, Missouri University of Science and Technology, 600 W 14th St., Rolla, MO, 65401, United States},
abstract={This paper proposes a holistic modeling approach that combines the capabilities of Object Process Methodology (OPM), Colored Petri Net (CPN), and feature model. The resultant holistic model not only can capture the structural, behavioral, and dynamic aspects of a system, allowing simulation and strong analysis methods to be applied, it can also specify the architectural design space. This modeling approach is developed to facilitate the implementation of search-based system architecting where search algorithms are used to explore design trade space for good architecture alternatives. Such architecting approach integrates certain model construction, alternative generation, simulation, and assessment processes into a coherent and automated framework. Both the proposed holistic modeling approach and the search-based architecting framework are generic. They are targeted at systems that can be specified by conceptual models using object-oriented or process-oriented paradigms. The broad applicability of the proposed approach is demonstrated with the configuration of reconfigurable manufacturing systems (RMSs) under multiobjective optimization as an example. The test results showed that the proposed modeling approach could cover a huge number of architecture alternatives and supported the assessment of several performance measures. A set of quality results was obtained after running the optimization algorithm following the proposed search-based architecting framework. © 2013 The authors. Published by Elsevier B.V.},
author_keywords={Object oriented modeling;  Simulation;  System analysis and design;  System architecting},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lopez-Herrejon2013,
author={Lopez-Herrejon, R.E. and Egyed, A.},
title={Towards interactive visualization support for pairwise testing software product lines},
journal={2013 1st IEEE Working Conference on Software Visualization - Proceedings of VISSOFT 2013},
year={2013},
doi={10.1109/VISSOFT.2013.6650543},
art_number={6650543},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891518152&partnerID=40&md5=ce096120e66070711098ed95bdf019d7},
affiliation={Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Software Product Lines (SPLs) are families of related software products. SPL practices have proven substantial technological and economical benefits such as improved software reuse and reduced time to market. Software testing is a key development activity in SPLs, and it is uniquely challenging because of the usually large number of feature combinations present in typical SPLs. Pairwise testing is a combinatorial testing technique that aims at selecting products to test based on the pairs of feature combinations such products provide. Our previous work on evolutionary approaches for SPL testing and their comparative analysis has yielded a large amount of data that prompted us to explore ways by which to convey and represent this information. In this paper we present our early results in this effort. We describe three basic visualization applications to pairwise testing and highlight some of the open questions that we foresee. But most importantly, our driving goal is both to raise the awareness of the visualization problems in this area and to spark the interest of the software visualization community. © 2013 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Rößger2013333,
author={Rößger, R. and Rock, G.},
title={A framework and generator for large parameterized feature models},
journal={20th ISPE International Conference on Concurrent Engineering, CE 2013 - Proceedings},
year={2013},
pages={333-342},
doi={10.3233/978-1-61499-302-5-333},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891670876&partnerID=40&md5=404dacc54fe6d84fad46f0617041a3ec},
affiliation={Trier University of Applied Sciences, Schneidershof, Trier, Germany},
abstract={The customer oriented individualization of products is getting more and more important for the production industry. Especially in car manufacturing industry we can observe a dramatically increasing number of product variants not only related to different car concepts but also concerning different functionality as for example in car entertainment. In order to cope with this increasing complexity in terms of product features and their interrelationships, manufacturers more and more build on a formal approach called feature modeling that allows for a formal analysis of the specified variability artifacts with the help of specialized proving engines as for example SAT-solvers. The development of such proving engines and their test is quite complicated also due to the fact that manufacturers do not disclose the real development data for understandable reasons. Thus, a framework is needed that enables the proving engine developers to test their engines on nearly real data and to show the potential and possibilities of their engines without having the real development data at hand. This paper presents a framework for generating especially large parameterized feature models used for load testing and benchmarking feature model analysis tools, as well as two usage scenarios: the first one runs a typical benchmark with large feature models on two versions of the theorem prover SPASS, the second shows the integration of the generator in a client-server environment where its functionality is hosted on a website, i.e. using the browser as a frontend working on tablets and modern smartphones. © 2013 The Authors and IOS Press.},
author_keywords={benchmark;  feature model;  generator;  parameterized;  product line engineering;  variability management},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Khalfaoui2013347,
author={Khalfaoui, K.a  and Chaoui, A.b  and Foudil, C.c  and Kerkouche, E.a },
title={Automatic generation of SPL structurally valid products using graph transformations approach},
journal={Studies in Computational Intelligence},
year={2013},
volume={488},
pages={347-356},
doi={10.1007/978-3-319-00560-7_38},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84893067315&partnerID=40&md5=4a3ac2de39923f1409c212a8602ce00b},
affiliation={Department of Computer Science, University of Jijel, Jijel, Algeria; Department of Computer Science and its Application, University Constantine 2, Algeria; Department of Computer Science, University of Biskra, Biskra, Algeria},
abstract={A Software Product Line is a set of software products that share a number of core properties but also differ in others. Differences and commonalities between products are typically described in terms of features. A software product line is usually modeled with a feature diagram, describing the set of features and specifying the constraints and relationships between these features. Each product is defined as a set of features. In this area of research, a key challenge is to ensure correctness and safety of these products. There is an increasing need for automatic tools that can support feature diagram analysis, particularly with a large number of features that modern software systems may have. In this paper, we propose using model transformations an automatic framework to generate all valid products according to the feature diagram. We first introduce the basic idea behind our approach. Then, we present the used graph grammar to perform automatically this task using the AToM3 tool. Finally, we show the feasibility of our proposal by means of running example. © Springer International Publishing Switzerland 2013.},
author_keywords={Feature diagram;  Graph transformations;  Software product lines;  Valid products;  Variability modelling},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dhungana2013551,
author={Dhungana, D.a  and Tang, C.H.b  and Weidenbach, C.b  and Wischnewski, P.c },
title={Automated verification of interactive rule-based configuration systems},
journal={2013 28th IEEE/ACM International Conference on Automated Software Engineering, ASE 2013 - Proceedings},
year={2013},
pages={551-561},
doi={10.1109/ASE.2013.6693112},
art_number={6693112},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84893559434&partnerID=40&md5=059874ca651a60945b174397b4d72e30},
affiliation={Siemens AG Österreich, Vienna, Austria; Max Planck Institute for Informatics, Saarbrücken, Germany; Logic4Business GmbH, Saarbrücken, Germany},
abstract={Rule-based specifications of systems have again become common in the context of product line variability modeling and configuration systems. In this paper, we define a logical foundation for rule-based specifications that has enough expressivity and operational behavior to be practically useful and at the same time enables decidability of important overall properties such as consistency or cycle-freeness. Our logic supports rule-based interactive user transitions as well as the definition of a domain theory via rule transitions. As a running example, we model DOPLER, a rule-based configuration system currently in use at Siemens. © 2013 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Kästner2013346,
author={Kästner, C.a  and Apel, S.b },
title={Feature-oriented software development a short tutorial on feature-oriented programming, virtual separation of concerns, and variability-aware analysis},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7680 LNCS},
pages={346-382},
doi={10.1007/978-3-642-35992-7_10},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894201602&partnerID=40&md5=55513c817745269de68afe20fc932fd8},
affiliation={Philipps University Marburg, Germany; University of Passau, Germany},
abstract={Feature-oriented software development is a paradigm for the construction, customization, and synthesis of large-scale and variable software systems, focusing on structure, reuse and variation. In this tutorial, we provide a gentle introduction to software product lines, feature oriented programming, virtual separation of concerns, and variability aware analysis. We provide an overview, show connections between the different lines of research, and highlight possible future research directions. © Springer-Verlag Berlin Heidelberg 2013.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Anjorin2013441,
author={Anjorin, A. and Saller, K. and Reimund, I. and Oster, S. and Zorcic, I. and Schürr, A.},
title={Model-driven rapid prototyping with programmed graph transformations},
journal={Journal of Visual Languages and Computing},
year={2013},
volume={24},
number={6},
pages={441-462},
doi={10.1016/j.jvlc.2013.08.001},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84888819910&partnerID=40&md5=e4ef6b3def54c1b82bae31533a036a91},
affiliation={Real-Time Systems Lab, Technische Universität Darmstadt, Germany},
abstract={Modern software systems are constantly increasing in complexity and supporting the rapid prototyping of such systems has become crucial to check the feasibility of extensions and optimizations, thereby reducing risks and, consequently, the cost of development. As modern software systems are also expected to be reused, extended, and adapted over a much longer lifetime than ever before, ensuring the maintainability of such systems is equally gaining relevance. In this paper, we present the development, optimization and maintenance of MoSo-PoLiTe, a framework for Software Product Line (SPL) testing, as a novel case study for rapid prototyping via metamodelling and programmed graph transformations. The first part of the case study evaluates the use of programmed graph transformations for optimizing an existing, hand-written system (MoSo-PoLiTe) via rapid prototyping of various strategies. In the second part, we present a complete re-engineering of the hand-written system with programmed graph transformations and provide a critical comparison of both implementations.Our results and conclusions indicate that metamodelling and programmed graph transformation are not only suitable techniques for rapid prototyping, but also lead to more maintainable systems. © 2013 Elsevier Ltd.},
author_keywords={Metamodelling;  Model-driven testing;  Programmed graph transformations;  Rapid prototyping;  Software product lines},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Kumara2013567,
author={Kumara, I. and Han, J. and Colman, A. and Nguyen, T. and Kapuruge, M.},
title={Sharing with a difference: Realizing service-based SaaS applications with runtime sharing and variation in dynamic software product lines},
journal={Proceedings - IEEE 10th International Conference on Services Computing, SCC 2013},
year={2013},
pages={567-574},
doi={10.1109/SCC.2013.30},
art_number={6649742},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84891942196&partnerID=40&md5=3ead6c02d9bea75cd5f8e46f4160bce9},
affiliation={Faculty of Information and Communication Technologies, Swinburne University of Technology, Melbourne, VIC, Australia},
abstract={A single-instance multi-tenant (SIMT) SaaS application enables a SaaS provider to achieve economies of scale through runtime sharing. However, runtime sharing can make tenant-specific variations difficult to achieve in such an application. In this paper, we propose an approach to realizing SIMT SaaS applications, which is based on Dynamic Software Product Lines (DSPL) and supports runtime sharing and variation. With the collaboration among a subset of services as the unit of composition, the commonality among the tenants' requirements is realized in the DSPL architecture by sharing collaboration units, and their variability is realized by composing different collaboration units, all at runtime. In addition, we adopt a feature-based high-level representation of the commonality and variability between the tenants' requirements to facilitate the runtime creation and reconfiguration of their application variants. We compare our approach with two alternative approaches in terms of development effort and degree of sharing. We further quantify the runtime overhead incurred by our multi-tenancy support. © 2013 IEEE.},
author_keywords={compositional;  multi-tenancy;  SaaS;  SPL;  variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wang2013237,
author={Wang, S.a  b  and Gotlieb, A.a  and Ali, S.a  and Liaaen, M.c },
title={Automated test case selection using feature model: An industrial case study},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={8107 LNCS},
pages={237-253},
doi={10.1007/978-3-642-41533-3_15},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886852777&partnerID=40&md5=0007dece672533bd305a8866bbef0d43},
affiliation={Certus Software V and V Center, Simula Research Laboratory, Norway; Department of Informatics, University of Oslo, Norway; Cisco Systems Inc., Norway},
abstract={Automated test case selection for a new product in a product line is challenging due to several reasons. First, the variability within the product line needs to be captured in a systematic way; second, the reusable test cases from the repository are required to be identified for testing a new product. The objective of such automated process is to reduce the overall effort for selection (e.g., selection time), while achieving an acceptable level of the coverage of testing functionalities. In this paper, we propose a systematic and automated methodology using a Feature Model for Testing (FM-T) to capture commonalities and variabilities of a product line and a Component Family Model for Testing (CFM-T) to capture the overall structure of test cases in the repository. With our methodology, a test engineer does not need to manually go through the repository to select a relevant set of test cases for a new product. Instead, a test engineer only needs to select a set of relevant features using FM-T at a higher level of abstraction for a product and a set of relevant test cases will be selected automatically. We applied our methodology to a product line of video conferencing systems called Saturn developed by Cisco and the results show that our methodology can reduce the selection effort significantly. Moreover, we conducted a questionnaire-based study to solicit the views of test engineers who were involved in developing FM-T and CFM-T. The results show that test engineers are positive about adapting our methodology and models (FM-T and CFM-T) in their current practice. © 2013 Springer-Verlag.},
author_keywords={Component Family Model;  Feature Model;  Product Line;  Test Case Selection},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Acher2013352,
author={Acher, M.a  and Combemale, B.a  and Collet, P.b  and Barais, O.a  and Lahire, P.b  and France, R.B.c },
title={Composing your compositions of variability models},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={8107 LNCS},
pages={352-369},
doi={10.1007/978-3-642-41533-3_22},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886848093&partnerID=40&md5=3e3498bf852e92c1af3378cd8142ed98},
affiliation={University of Rennes 1, Inria/Irisa, France; I3S Laboratory CNRS, University of Nice Sophia Antipolis, France; Colorado State University, United States},
abstract={Modeling and managing variability is a key activity in a growing number of software engineering contexts. Support for composing variability models is arising in many engineering scenarios, for instance, when several subsystems or modeling artifacts, each coming with their own variability and possibly developed by different stakeholders, should be combined together. In this paper, we consider the problem of composing feature models (FMs), a widely used formalism for representing and reasoning about a set of variability choices. We show that several composition operators can actually be defined, depending on both matching/ merging strategies and semantic properties expected in the composed FM. We present four alternative forms and their implementations. We discuss their relative trade-offs w.r.t. reasoning, customizability, traceability, composability and quality of the resulting feature diagram. We summarize these findings in a reading grid which is validated by revisiting some relevant existing works. Our contribution should assist developers in choosing and implementing the right composition operators. © 2013 Springer-Verlag.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Andrés20131925,
author={Andrés, C. and Camacho, C. and Llana, L.},
title={A formal framework for software product lines},
journal={Information and Software Technology},
year={2013},
volume={55},
number={11},
pages={1925-1947},
doi={10.1016/j.infsof.2013.05.005},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884156122&partnerID=40&md5=9af156eaabde52f3319079116dd147d4},
affiliation={Departamento de Sistemas Informáticos y Computación, Universidad Complutense de Madrid, Madrid, Spain},
abstract={Context A Software Product Line is a set of software systems that are built from a common set of features. These systems are developed in a prescribed way and they can be adapted to fit the needs of customers. Feature models specify the properties of the systems that are meaningful to customers. A semantics that models the feature level has the potential to support the automatic analysis of entire software product lines. Objective The objective of this paper is to define a formal framework for Software Product Lines. This framework needs to be general enough to provide a formal semantics for existing frameworks like FODA (Feature Oriented Domain Analysis), but also to be easily adaptable to new problems. Method We define an algebraic language, called SPLA, to describe Software Product Lines. We provide the semantics for the algebra in three different ways. The approach followed to give the semantics is inspired by the semantics of process algebras. First we define an operational semantics, next a denotational semantics, and finally an axiomatic semantics. We also have defined a representation of the algebra into propositional logic. Results We prove that the three semantics are equivalent. We also show how FODA diagrams can be automatically translated into SPLA. Furthermore, we have developed our tool, called AT, that implements the formal framework presented in this paper. This tool uses a SAT-solver to check the satisfiability of an SPL. Conclusion This paper defines a general formal framework for software product lines. We have defined three different semantics that are equivalent; this means that depending on the context we can choose the most convenient approach: operational, denotational or axiomatic. The framework is flexible enough because it is closely related to process algebras. Process algebras are a well-known paradigm for which many extensions have been defined. © 2013 Elsevier B.V. All rights reserved.},
author_keywords={Feature models;  Formal methods;  Software product lines},
document_type={Article},
source={Scopus},
}

@ARTICLE{Varela-Vaca20131948,
author={Varela-Vaca, A.J. and Gasca, R.M.},
title={Towards the automatic and optimal selection of risk treatments for business processes using a constraint programming approach},
journal={Information and Software Technology},
year={2013},
volume={55},
number={11},
pages={1948-1973},
doi={10.1016/j.infsof.2013.05.007},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884155582&partnerID=40&md5=245e12280bdbeecb5e3c0ca5ce8b14a7},
affiliation={Department of Computer Languages and Systems, ETS Ingeniería Informática, University of Seville, Avda. Reina Mercedes S/N, 41012 Sevilla, Spain},
abstract={Context The use of Business Process Management Systems (BPMS) has emerged in the IT arena for the automation of business processes. In the majority of cases, the issue of security is overlooked by default in these systems, and hence the potential cost and consequences of the materialization of threats could produce catastrophic loss for organizations. Therefore, the early selection of security controls that mitigate risks is a real and important necessity. Nevertheless, there exists an enormous range of IT security controls and their configuration is a human, manual, time-consuming and error-prone task. Furthermore, configurations are carried out separately from the organization perspective and involve many security stakeholders. This separation makes difficult to ensure the effectiveness of the configuration with regard to organizational requirements. Objective In this paper, we strive to provide security stakeholders with automated tools for the optimal selection of IT security configurations in accordance with a range of business process scenarios and organizational multi-criteria. Method An approach based on feature model analysis and constraint programming techniques is presented, which enable the automated analysis and selection of optimal security configurations. Results A catalogue of feature models is determined by analyzing typical IT security controls for BPMSs for the enforcement of the standard goals of security: integrity, confidentiality, availability, authorization, and authentication. These feature models have been implemented through constraint programs, and Constraint Programming techniques based on optimized and non-optimized searches are used to automate the selection and generation of configurations. In order to compare the results of the determination of configuration a comparative analysis is given. Conclusion In this paper, we present innovative tools based on feature models, Constraint Programming and multi-objective techniques that enable the agile, adaptable and automatic selection and generation of security configurations in accordance with the needs of the organization. © 2013 Elsevier B.V. All rights reserved.},
author_keywords={Business process;  Business process management systems;  Constraint programming;  Feature model;  Risk treatments;  Security},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Sayyad2013492,
author={Sayyad, A.S. and Menzies, T. and Ammar, H.},
title={On the value of user preferences in search-based software engineering: A case study in software product lines},
journal={Proceedings - International Conference on Software Engineering},
year={2013},
pages={492-501},
doi={10.1109/ICSE.2013.6606595},
art_number={6606595},
note={cited By 15},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886494195&partnerID=40&md5=b0c8ff32e95ccba5bf1a4128ff1d0627},
affiliation={Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, United States},
abstract={Software design is a process of trading off competing objectives. If the user objective space is rich, then we should use optimizers that can fully exploit that richness. For example, this study configures software product lines (expressed as feature maps) using various search-based software engineering methods. As we increase the number of optimization objectives, we find that methods in widespread use (e.g. NSGA-II, SPEA2) perform much worse than IBEA (Indicator-Based Evolutionary Algorithm). IBEA works best since it makes most use of user preference knowledge. Hence it does better on the standard measures (hypervolume and spread) but it also generates far more products with 0% violations of domain constraints. Our conclusion is that we need to change our methods for search-based software engineering, particularly when studying complex decision spaces. © 2013 IEEE.},
author_keywords={Feature Models;  Indicator-Based Evolutionary Algorithm;  Multiobjective Optimization;  Optimal Feature Selection;  Search-Based Software Engineering;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Henard20131245,
author={Henard, C.a  and Papadakis, M.a  and Perrouin, G.b  and Klein, J.a  and Le Traon, Y.a },
title={Towards automated testing and fixing of re-engineered Feature Models},
journal={Proceedings - International Conference on Software Engineering},
year={2013},
pages={1245-1248},
doi={10.1109/ICSE.2013.6606689},
art_number={6606689},
note={cited By 7},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883876633&partnerID=40&md5=ca2deec8377515002d5e908795ebf51c},
affiliation={Interdisciplinary Centre for Security, Reliability and Trust (SnT), University of Luxembourg, Luxembourg; Precise Research Center in Software Engineering (PReCISE), University of Namur, Namur, Belgium},
abstract={Mass customization of software products requires their efficient tailoring performed through combination of features. Such features and the constraints linking them can be represented by Feature Models (FMs), allowing formal analysis, derivation of specific variants and interactive configuration. Since they are seldom present in existing systems, techniques to re-engineer FMs have been proposed. There are nevertheless error-prone and require human intervention. This paper introduces an automated search-based process to test and fix FMs so that they adequately represent actual products. Preliminary evaluation on the Linux kernel FM exhibit erroneous FM constraints and significant reduction of the inconsistencies. © 2013 IEEE.},
author_keywords={Feature Model;  Fixing;  Search-based;  Testing},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Millo2013109,
author={Millo, J.-V.a  b  and Ramesh, S.b  and Krishna, S.N.c  and Narwane, G.K.d },
title={Compositional verification of software product lines},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7940 LNCS},
pages={109-123},
doi={10.1007/978-3-642-38613-8_8},
note={cited By 3},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886007576&partnerID=40&md5=302fba3a2d679475d367d589b1fefbcb},
affiliation={EPI AOSTE, INRIA Sophia-Antipolis, France; Global General Motors RandD, TCI Bangalore, India; Department of CSE, IIT Bombay, Mumbai, India; Homi Bhabha National Institute, Mumbai, India},
abstract={This paper presents a novel approach to the design verification of Software Product Lines (SPL). The proposed approach assumes that the requirements and designs at the feature level are modeled as finite state machines with variability information. The variability information at the requirement and design levels are expressed differently and at different levels of abstraction. Also the proposed approach supports verification of SPL in which new features and variability may be added incrementally. Given the design and requirements of an SPL, the proposed design verification method ensures that every product at the design level behaviourally conforms to a product at the requirement level. The conformance procedure is compositional in the sense that the verification of an entire SPL consisting of multiple features is reduced to the verification of the individual features. The method has been implemented and demonstrated in a prototype tool SPLEnD (SPL Engine for Design Verification) on a couple of fairly large case studies. © 2013 Springer-Verlag Berlin Heidelberg.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Simmonds201333,
author={Simmonds, J.a  and Bastarrica, M.C.b  and Silvestre, L.b  and Quispe, A.b },
title={Variability in software process models: Requirements for adoption in industrial settings},
journal={2013 4th International Workshop on Product LinE Approaches in Software Engineering, PLEASE 2013 - Proceedings},
year={2013},
pages={33-36},
doi={10.1109/PLEASE.2013.6608661},
art_number={6608661},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886048448&partnerID=40&md5=2b794407dad4b0ef29205856915914d4},
affiliation={Informatics Department, Univ. Téc. F. Santa María, Chile; CS Department, Univ. de Chile, Chile},
abstract={It is an increasing trend to apply Software Product Line (SPL) concepts and techniques for software process tailoring, generating a Software PRocess Line (SPrL). However, there are several aspects that must be addressed before SPrLs can be fully adopted by industry, a key aspect being how software process variability is specified and managed. In the literature, there are several general-purpose as well as domain-specific proposals for specifying process variability. In this paper, we analyze the benefits and drawbacks of two general-purpose (feature models and OVM) and two domain-specific (SPEM variability primitives and vSPEM) approaches, as well as discuss what hinders industry adoption in each case. © 2013 IEEE.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Urli201313,
author={Urli, S. and Mosser, S. and Blay-Fornarino, M. and Collet, P.},
title={How to exploit domain knowledge in Multiple Software Product Lines?},
journal={2013 4th International Workshop on Product LinE Approaches in Software Engineering, PLEASE 2013 - Proceedings},
year={2013},
pages={13-16},
doi={10.1109/PLEASE.2013.6608656},
art_number={6608656},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886059707&partnerID=40&md5=541e5688d4900d0da43f418da9605d9a},
affiliation={Université Nice-Sophia Antipolis, I3S Laboratory, UMR CNRS UNS 7271, France},
abstract={As Software Product Lines (SPL) are inevitably moving towards a multiple form to tackle issues of reuse and complexity, variability management across the composed SPLs is still addressed with basic inter-constraints. Based on two disjoint case studies (digital signage and cloud computing), we identified this challenging problem for the SPL community. In this paper we describe how the domain knowledge needs to be exploited to support a more complete definition of Multiple Software Product Lines (MSPL). Such an exploitation implies the definition of a domain-driven definition of configuration and an order independent configuration process. © 2013 IEEE.},
author_keywords={Cloud Computing;  Digital Signage;  Domain Model;  Feature Modeling;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang201375,
author={Wang, S.a  b  and Ali, S.a  and Yue, T.a  and Liaaen, M.c },
title={Using feature model to support model-based testing of product lines: An industrial case study},
journal={Proceedings of the International Symposium on the Physical and Failure Analysis of Integrated Circuits, IPFA},
year={2013},
pages={75-84},
doi={10.1109/QSIC.2013.51},
art_number={6605911},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84885621372&partnerID=40&md5=1b7cd0454bafc3a14b4bb1394a90a18b},
affiliation={Certus Software VandV Center, Simula Research Laboratory, Oslo, Norway; Department of Informatics, University of Oslo, Oslo, Norway; Cisco Systems, Oslo, Norway},
abstract={In the context of Model-Based Testing (MBT) of product lines, effort required to develop models can be significantly reduced by applying systematic product line modeling and configuration methodologies. In our previous work, we developed such a methodology to capture variability in configurable UML state machines and aspect state machines. For each product, these state machines are to be configured for generating executable test cases. In this paper, we extended this methodology using Feature Model for Testing (FM-T) and Component Family Model for Behaviors (CFM-B). FM-T captures variable testing functionalities of a product line, whereas CFM-B provides an abstraction layer on top of the configurable state machines. With our current methodology, a test engineer doesn't need to acquire expertise on behavioral modeling and can simply configure models for a product by selecting features in FM-T and configuring provided attributes in CFM-B. The configured models are then given input to our model-based testing tool, TRansformation-based tool for Uml-baSed Testing (TRUST) for executable test case generation. We applied our extended methodology to a product line of video conferencing system developed by Cisco Systems, Norway. Results show that the methodology significantly reduces the complexity of configuration, thereby significantly reducing required effort and cost (e.g., in terms of training). In addition, it does not require test engineers to have expertise in UML modeling, aspect-oriented modeling, and OCL specification and therefore eases the adoption of MBT in industry. © 2013 IEEE.},
author_keywords={Aspect State Machines;  Component Family Model;  Feature Model;  Model-Based Testing;  Product Line},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Pascual201373,
author={Pascual, G.G. and Pinto, M. and Fuentes, L.},
title={Run-time adaptation of mobile applications using genetic algorithms},
journal={ICSE Workshop on Software Engineering for Adaptive and Self-Managing Systems},
year={2013},
pages={73-82},
doi={10.1109/SEAMS.2013.6595494},
art_number={6595494},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84885017665&partnerID=40&md5=9728779ad397165cfd2b9fdac5bd79c1},
affiliation={University of Málaga, CAOSD Group, Málaga, Spain},
abstract={Mobile applications run in environments where the context is continuously changing. Therefore, it is necessary to provide support for the run-time adaptation of these applications. This support is usually achieved by middleware platforms that offer a context-aware dynamic reconfiguration service. However, the main shortcoming of existing approaches is that both the list of possible configurations and the plans to adapt the application to a new configuration are usually specified at design-time. In this paper we present an approach that allows the automatic generation at run-time of application configurations and of reconfiguration plans. Moreover, the generated configurations are optimal regarding the provided functionality and, more importantly, without exceeding the available resources (e.g. battery). This is performed by: (1) having the information about the application variability available at runtime using feature models, and (2) using a genetic algorithm that allows generating an optimal configuration at runtime. We have specified a case study and evaluated our approach, and the results show that it is efficient enough as to be used on mobile devices without introducing an excessive overhead. © 2013 IEEE.},
author_keywords={Autonomic Computing;  Context;  Dynamic Reconfiguration;  Feature Models;  Genetic Algorithms;  Middleware},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Pascual2013127,
author={Pascual, G.G. and Pinto, M. and Fuentes, L.},
title={Automatic analysis of software architectures with variability},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7925 LNCS},
pages={127-143},
doi={10.1007/978-3-642-38977-1_9},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884887810&partnerID=40&md5=1fce8f5a910fda8b85625b2fd83b7f4c},
affiliation={Departamento de Lenguajes y Ciencias de la Computación, CAOSD Group, University of Málaga, Spain},
abstract={Software Product Line Engineering is successfully applied in the development of families of related products. Basically, it allows reusing the software artifacts that are common to all the products, and adding/removing the variable ones. There are two alternatives to manage variability, one that models the commonalities and variabilities separately from the software product line architecture (SPLA), using, for instance, feature models (FM), and another one that models the variability as part of the SPLA. These two alternatives have both benefits and limitations. Our approach picks the best of both alternatives and, on the one hand, models variability as part of the SPLA (as in the second alternative), but, on the other hand, maps the SPLA with variability into an FM, generating an Architectural FM. By doing this our approach takes advantage of the FM tools and formal reasoning (as in the first alternative) to provide the automatic support that it is not available in other SPLA with variability approaches to: (i) check the consistency of architectural variability specifications, (ii) generate valid architectural configurations, and (iii) reason about variability at the architectural level. © 2013 Springer-Verlag Berlin Heidelberg.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Benavides2013160,
author={Benavides, D.a  and Felfernig, A.b  and Galindo, J.A.a  and Reinfrank, F.b },
title={Automated analysis in feature modelling and product configuration},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7925 LNCS},
pages={160-175},
doi={10.1007/978-3-642-38977-1_11},
note={cited By 5},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884859116&partnerID=40&md5=dddead80143677a50d05882fa92d67ae},
affiliation={University of Seville, Av. de la Reina Mercedes S/N, 41012 Sevilla, Spain; Institute for Software Technology, Graz University of Technology, Inffeldgasse 16b/II, Graz, Austria},
abstract={The automated analysis of feature models is one of the thriving topics of research in the software product line and variability management communities that has attracted more attention in the last years. A recent literature review reported that more than 30 analysis operations have been identified and different analysis mechanisms have been proposed. Product configuration is a well established research field with more than 30 years of successful applications in different industrial domains. Our hypothesis, that is not really new, is that these two independent areas of research have interesting synergies that have not been fully explored. To try to explore the potential synergies systematically, in this paper we provide a rapid review to bring together these previously disparate streams of work. We define a set of research questions and give a preliminary answer to some of them. We conclude that there are many research opportunities in the synergy of these independent areas. © 2013 Springer-Verlag Berlin Heidelberg.},
author_keywords={Feature Models;  Knowledge-based Systems;  Product Configuration;  Rapid Review;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Mohabbati2014535,
author={Mohabbati, B.a  and Asadi, M.a  and Gašević, D.a  b  and Lee, J.c },
title={Software product line engineering to develop variant-rich web services},
journal={Web Services Foundations},
year={2014},
volume={9781461475187},
pages={535-562},
doi={10.1007/978-1-4614-7518-7_21},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84929676299&partnerID=40&md5=4aa1ac821f62d3f36729dffe5ea2de7f},
affiliation={Simon Fraser University, Burnaby, Canada; Athabasca University, Burnaby, Canada; Lancaster University, Lancaster, United Kingdom},
abstract={Service-Oriented Architecture (SOA) enables enterprise for distributed and flexible software development. SOA aims at promoting effective software asset reuse by means of encapsulating functionalities as reusable services accessible through well-defined interfaces. However, one of the challenging problems for the realization of this vision is an need for design and management of variants of SOA-based solutions. Such SOA-based solutions require customization to meet stakeholders' individual functional and non-functional requirements. In this chapter, a methodological foundation for modeling and developing variant-rich SOA-solutions by incorporating the principles of Software Product Line Engineering (SPLE) into the SOA development life cycle. © 2014 Springer Science+Business Media New York. All rights are reserved.},
document_type={Book Chapter},
source={Scopus},
}

@BOOK{Nguyen2014507,
author={Nguyen, T. and Colman, A. and Han, J.},
title={Comprehensive variability modeling and management for customizable process-based service compositions},
journal={Web Services Foundations},
year={2014},
volume={9781461475187},
pages={507-533},
doi={10.1007/978-1-4614-7518-7_20},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84929671516&partnerID=40&md5=876380e630bee37353466d8d4351b563},
affiliation={Faculty of Information and Communication Technology, Swinburne University of Technology, Melbourne, Australia},
abstract={Variability in process-based service compositions needs to be explicitly modeled and managed in order to facilitate service/process customization and increase reuse in service/process development. While related work has been able to capture variability and variability dependencies within a composition, these approaches fail to capture variability dependencies between the composition and partner services. Consequently, these approaches cannot address the situation when a customizable composite service is orchestrated from partner services which themselves are customizable. In this article, we describe a feature-based approach that is able to effectively model variability within and across compositions. The approach is supported by a process development methodology that enables the systematic reuse and management of variability. A prototype system supporting extended BPMN 2.0 is used to demonstrate the feasibility of the approach. © 2014 Springer Science+Business Media New York. All rights are reserved.},
document_type={Book Chapter},
source={Scopus},
}

@ARTICLE{Heradio20131177,
author={Heradio, R.a  and Fernandez-Amoros, D.b  and Cerrada, J.A.a  and Abad, I.a },
title={A literature review on feature diagram product counting and its usage in software product line economic models},
journal={International Journal of Software Engineering and Knowledge Engineering},
year={2013},
volume={23},
number={8},
pages={1177-1204},
doi={10.1142/S0218194013500368},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84894146091&partnerID=40&md5=3ece08b132f3394d4e8e2c74ab186e26},
affiliation={Department of Software Engineering and Computer Systems, Spanish Open University, Juan del Rosal 16, Madrid 28040, Spain; Department of Languages and Computer Systems, Spanish Open University, Juan del Rosal 16, Madrid 28040, Spain},
abstract={In software product line engineering, feature diagrams are a popular means to represent the similarities and differences within a family of related systems. In addition, feature diagrams implicitly model valuable information that can be used in economic models to estimate the cost savings of a product line. In particular, this paper reviews existing proposals on computing the total number of products modeled with a feature diagram and, given a feature, the number of products that implement it. This paper also reviews the economic information that can be estimated when such numbers are known. Thus, this paper contributes by bringing together previously-disparate streams of work: the automated analysis of feature diagrams and economic models for product lines. © 2013 World Scientific Publishing Company.},
author_keywords={economic model;  feature diagram;  model counting;  Software product line},
document_type={Article},
source={Scopus},
}

@CONFERENCE{García-Galán2013416,
author={García-Galán, J.a  and Rana, O.b  and Trinidad, P.a  and Ruiz-Cortés, A.a },
title={Migrating to the Cloud: A software product line based analysis},
journal={CLOSER 2013 - Proceedings of the 3rd International Conference on Cloud Computing and Services Science},
year={2013},
pages={416-426},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884494029&partnerID=40&md5=dac2d699636ba6e55d0c5217c7e3f9c4},
affiliation={ETS Ingeniería Informática, Universidad de Sevilla, Seville, Spain; School of Computer Science and Informatics, Cardiff University, Cardiff, United Kingdom},
abstract={Identifying which part of a local system should be migrated to a public Cloud environment is often a difficult and error prone process. With the significant (and increasing) number of commercial Cloud providers, choosing a provider whose capability best meets requirements is also often difficult. Most Cloud service providers offer large amounts of configurable resources, which can be combined in a number of different ways. In the case of small and medium companies, finding a suitable configuration with the minimum cost is often an essential requirement to migrate, or even to initiate the decision process for migration. We interpret this need as a problem associated with variability management and analysis. Variability techniques and models deal with large configuration spaces, and have been proposed previously to support configuration processes in industrial cases. Furthermore, this is a mature field which has a large catalog of analysis operations to extract valuable information in an automated way. Some of these operations can be used and tailored for Cloud environments. We focus in this work on Amazon Cloud services, primarily due to the large number of possible configurations available by this service provider and its popularity. Our approach can also be adapted to other providers offering similar capabilities.},
author_keywords={Automated analysis;  AWS;  Cloud;  Feature model;  IaaS;  Modelling;  Variability management},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Wieber2013205,
author={Wieber, M. and Schürr, A.},
title={Systematic Testing of Graph Transformations: A Practical Approach Based on Graph Patterns},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7909 LNCS},
pages={205-220},
doi={10.1007/978-3-642-38883-5_18},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84884333076&partnerID=40&md5=a40620eb470884503ac04a70004b6e3c},
affiliation={Technische Universität Darmstadt, Real-Time Systems Lab., Merckstraße 25, 64283 Darmstadt, Germany},
abstract={Correctness is an essential property of model transformations. Although testing is a well-accepted method for assuring software quality in general, the properties of declarative transformation languages often prevent a direct application of testing strategies from imperative programming languages. A key challenge of transformation testing concerns limiting the testing effort by a good stop criterion. In this work, we tackle this issue for programmed graph transformations, and present a practical methodology to derive sufficient test suites based on a new coverage notion inspired by mutation analysis. We systematically generate requirement (graph) patterns from the transformation under test, applying different requirement construction strategies, and analyze the approach in terms of practicability, test suite quality and the ability to guide and support test case construction. © 2013 Springer-Verlag.},
author_keywords={Coverage;  Programmed Graph Transformations;  Testing},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Eichelberger201312,
author={Eichelberger, H. and Schmid, K.},
title={A systematic analysis of textual variability modeling languages},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={12-21},
doi={10.1145/2491627.2491652},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883877671&partnerID=40&md5=530658501070a002d977786550f7af46},
affiliation={University of Hildesheim, Marienburger Platz 22, 31141 Hildesheim, Germany},
abstract={Industrial variability models tend to grow in size and complexity due to ever-increasing functionality and complexity of software systems. Some authors report on variability models specifying several thousands of variabilities. However, traditional variability modeling approaches do not seem to scale adequately to cope with size and complexity of such models. Recently, textual variability modeling languages have been advocated as one scalable solution. In this paper, we provide a systematic analysis of the capabilities of current textual variability modeling languages, in particular regarding variability management in the large. Towards this aim, we define a classification schema consisting of five dimensions, classify ten different textual variability modeling languages using the classification schema and provide an analysis. In summary, some textual variability modeling languages go beyond textual representations of traditional variability modeling approaches and provide sophisticated modeling concepts and constraint languages. Three textual variability modeling approaches already support mechanisms for large-scale variability modeling such as model composition, modularization, or evolution support. © 2013 ACM.},
author_keywords={scalability;  software product lines;  textual variability modeling;  variability management;  variability modeling in the large},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Quinton2013162,
author={Quinton, C. and Romero, D. and Duchien, L.},
title={Cardinality-based feature models with constraints: A pragmatic approach},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={162-166},
doi={10.1145/2491627.2491638},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883865735&partnerID=40&md5=26f60053ac6893cabc0c49f39e08ab38},
affiliation={INRIA Lille - Nord Europe, LIFL UMR CNRS 8022, University Lille 1, France},
abstract={Feature models originating from Software Product Line Engineering are a well-known approach to variability modeling. In many situations, the variability does not apply only on features but also on the number of times these features can be cloned. In such a case, cardinality-based feature models are used to specify the number of clones for a given feature. Although previous works already investigated approaches for feature modeling with cardinality, there is still a lack of support for constraints in the presence of clones. To overcome this limitation, we present an abstract model to define constraints in cardinality-based feature models and propose a formal semantics for this kind of constraints. We illustrate the practical usage of our approach with examples from our recent experiences on cloud computing platform configuration. © 2013 ACM.},
author_keywords={cardinality;  constraint;  feature model;  modeling;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Henard201362,
author={Henard, C.a  and Papadakis, M.a  and Perrouin, G.b  and Klein, J.a  and Le Traon, Y.a },
title={Multi-objective test generation for software product lines},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={62-71},
doi={10.1145/2491627.2491635},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883893596&partnerID=40&md5=a0e24b953e4c82521fabaa276a307fdd},
affiliation={SnT, University of Luxembourg, Luxembourg, Luxembourg; PReCISE, University of Namur, Namur, Belgium},
abstract={Software Products Lines (SPLs) are families of products sharing common assets representing code or functionalities of a software product. These assets are represented as features, usually organized into Feature Models (FMs) from which the user can configure software products. Generally, few features are sufficient to allow configuring millions of software products. As a result, selecting the products matching given testing objectives is a difficult problem. The testing process usually involves multiple and potentially conflicting testing objectives to fulfill, e.g. maximizing the number of optional features to test while at the same time both minimizing the number of products and minimizing the cost of testing them. However, most approaches for generating products usually target a single objective, like testing the maximum amount of feature interactions. While focusing on one objective may be sufficient in certain cases, this practice does not reflect real-life testing situations. The present paper proposes a genetic algorithm to handle multiple conflicting objectives in test generation for SPLs. Experiments conducted on FMs of different sizes demonstrate the effectiveness, feasibility and practicality of the introduced approach. © 2013 ACM.},
author_keywords={feature models;  genetic algorithms;  multi-objective optimization;  software product lines;  test generation},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dumitrescu2013254,
author={Dumitrescu, C.a  and Mazo, R.b  and Salinesi, C.b  and Dauron, A.a },
title={Bridging the gap between product lines and systems engineering. An experience in variability management for automotive model based systems engineering},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={254-263},
doi={10.1145/2491627.2491655},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883861666&partnerID=40&md5=150994ab8eb57eb766e6e47085809ad4},
affiliation={Technocentre Renault, 1 avenue du Golf, 78288 Guyancourt, France; Université Paris 1, Centre de Recherche en Informatique, 90 rue de Tolbiac, 75013 Paris, France},
abstract={We present in this paper an experience in modeling a family of parking brake systems, with shared assets and alternative solutions, and relate them to the needs of Renault in terms of variability management. The models are realized using a set of customized tools for model based systems engineering and variability management, based on SysML models. The purpose is to present an industrial context that requires the adoption of a product line approach and of variability modeling techniques, outside of a pure-software domain. At Renault, the interest is in identifying variations and reuse opportunities early in the product development cycle, as well as in preparing vehicle configuration specifications during the systems engineering process. This would lead to lowering the engineering effort and to higher quality and confidence in carry-over and carry across based solutions. We advocate for a tight integration of variability management with the model based systems engineering approach, which needs to address methodological support, modeling techniques and efficient tools for interactive configuration, adapted for engineering activities. © 2013 ACM.},
author_keywords={systems engineering;  variability management},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{FerreiraFilho201372,
author={Ferreira Filho, J.B.a  and Barais, O.a  and Acher, M.a  and Baudry, B.b  c  and Le Noir, J.d },
title={Generating counterexamples of model-based software product lines: An exploratory study},
journal={ACM International Conference Proceeding Series},
year={2013},
pages={72-81},
doi={10.1145/2491627.2491639},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883860009&partnerID=40&md5=f7dff0229339f2debcef7a7d68d8222a},
affiliation={INRIA, IRISA, Université Rennes 1, France; INRIA, SIMULA, Research Lab., Rennes, France; INRIA, SIMULA, Research Lab., Lysaker, Norway; Thales Research and Technology, Palaiseau, France},
abstract={Model-based Software Product Line (MSPL) engineering aims at deriving customized models corresponding to individual products of a family. MSPL approaches usually promote the joint use of a variability model, a base model expressed in a specific formalism, and a realization layer that maps variation points to model elements. The design space of an MSPL is extremely complex to manage for the engineer, since the number of variants may be exponential and the derived product models have to be conformant to numerous well-formedness and business rules. In this paper, the objective is to provide a way to generate MSPLs, called counterexamples, that can produce invalid product models despite a valid configuration in the variability model. We provide a systematic and automated process, based on the Common Variability Language (CVL), to randomly search the space of MSPLs for a specific formalism. We validate the effectiveness of this process for three formalisms at different scales (up to 247 metaclasses and 684 rules). We also explore and discuss how counterexamples could guide practitioners when customizing derivation engines, when implementing checking rules that prevent early incorrect CVL models, or simply when specifying an MSPL. © 2013 ACM.},
author_keywords={D.2.13 [Software Engineering]: Reusable Software - Domain engineering and Reuse models},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Davril2013290,
author={Davril, J.-M.a  and Delfosse, E.a  and Hariri, N.b  and Acher, M.c  and Cleland-Huang, J.b  and Heymans, P.a },
title={Feature model extraction from large collections of informal product descriptions},
journal={2013 9th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2013 - Proceedings},
year={2013},
pages={290-300},
doi={10.1145/2491411.2491455},
note={cited By 13},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883681764&partnerID=40&md5=4ea806c99b37984fe8c8d316cf2d32bc},
affiliation={Faculty of Computer Science, University of Namur, Belgium; School of Computing, DePaul University, Chicago, United States; INRIA / Irisa, Unviersity of Rennes 1, France},
abstract={Feature Models (FMs) are used extensively in software product line engineering to help generate and validate individual product configurations and to provide support for domain analysis. As FM construction can be tedious and time-consuming, researchers have previously developed techniques for extracting FMs from sets of formally specified individual configurations, or from software requirements specifications for families of existing products. However, such artifacts are often not available. In this paper we present a novel, automated approach for constructing FMs from publicly available product descriptions found in online product repositories and marketing websites such as SoftPedia and CNET. While each individual product description provides only a partial view of features in the domain, a large set of descriptions can provide fairly comprehensive coverage. Our approach utilizes hundreds of partial product descriptions to construct an FM and is described and evaluated against antivirus product descriptions mined from SoftPedia.},
author_keywords={Domain analysis;  Feature models;  Product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Calvagna2013338,
author={Calvagna, A.a  and Gargantini, A.b  and Vavassori, P.b },
title={Combinatorial testing for feature models using CitLab},
journal={Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013},
year={2013},
pages={338-347},
doi={10.1109/ICSTW.2013.45},
art_number={6571651},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883313200&partnerID=40&md5=d97c45e0f970cb144e208012c7a578e5},
affiliation={Dip. di Matematica e Informatica, University of Catania, Italy; Dip. di Ingegneria, University of Bergamo, Italy},
abstract={Feature models are commonly used to represent product lines and systems with a set of features interrelated each others. Test generation from feature models, i.e. generating a valid and representative subset of all the possible product configurations, is still an open challenge. A common approach is to build combinatorial interaction test suites, for instance achieving pair wise coverage among the features. In this paper we show how standard feature models can be translated to combinatorial interaction models in our framework CitLab, with all the advantages of having a combinatorial testing environment (in terms of a clear semantics, editing facilities, language for seeds and test goals, and generation algorithms). We present our translation which gives a precise semantics to feature models and it tries to minimize the number of parameter and constraints while preserving the original semantics of the feature model. Experiments show the advantages of our approach. © 2013 IEEE.},
author_keywords={combinatorial testing;  feature models;  software product line;  SPL testing},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Henard2013188,
author={Henard, C.a  and Papadakis, M.a  and Perrouin, G.b  and Klein, J.a  and Traon, Y.L.a },
title={Assessing software product line testing via model-based mutation: An application to similarity testing},
journal={Proceedings - IEEE 6th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2013},
year={2013},
pages={188-197},
doi={10.1109/ICSTW.2013.30},
art_number={6571629},
note={cited By 6},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883324123&partnerID=40&md5=0fec58f78eff332e9fcd6cb7249d7278},
affiliation={Interdisciplinary Centre for Security, Reliability and Trust (SnT), University of Luxembourg, Luxembourg, Luxembourg; Precise Research Center in Software Engineering (PReCISE), University of Namur, Namur, Belgium},
abstract={Needs for mass customization and economies of scale have pushed engineers to develop Software Product Lines (SPLs). SPLs are families of products sharing commonalities and exhibiting differences, built by reusing software assets abstractly represented by features. Feature models describe the constraints that link the features and allow the configuration of tailored software products. Common SPLs involve hundreds, even thousands of features, leading to billions of possible software products. As a result, testing a product line is challenging due to the enormous size of the possible products. Existing techniques focus on testing based on the product line's feature model by selecting a limited set of products to test. Being created manually or reverse-engineered, feature models are prone to errors impacting the generated test suites. In this paper, we examine ability of test suites to detect such errors. In particular, we propose two mutation operators to derive erroneous feature models (mutants) from an original feature model and assess the capability of the generated original test suite to kill the mutants. Experimentation on real feature models demonstrate that dissimilar tests suites have a higher mutant detection ability than similar ones, thus validating the relevance of similarity-driven product line testing. © 2013 IEEE.},
author_keywords={Feature Models;  Mutation;  Similarity;  Software Product Lines;  Testing},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang20131493,
author={Wang, S. and Ali, S. and Gotlieb, A.},
title={Minimizing test suites in software product lines using weight-based genetic algorithms},
journal={GECCO 2013 - Proceedings of the 2013 Genetic and Evolutionary Computation Conference},
year={2013},
pages={1493-1500},
doi={10.1145/2463372.2463545},
note={cited By 11},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883059783&partnerID=40&md5=f8d42edd905a11f90b67ddb08cd95978},
affiliation={Certus Software V and V Center, Simula Research Laboratory, University of Oslo, P.O. Box 134, Lysaker, Norway},
abstract={Test minimization techniques aim at identifying and eliminating redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. In the context of software product line, we can save effort and cost in the selection and minimization of test cases for testing a specific product by modeling the product line. However, minimizing the test suite for a product requires addressing two potential issues: 1) the minimized test suite may not cover all test requirements compared with the original suite; 2) the minimized test suite may have less fault revealing capability than the original suite. In this paper, we apply weight-based Genetic Algorithms (GAs) to minimize the test suite for testing a product, while preserving fault detection capability and testing coverage of the original test suite. The challenge behind is to define an appropriate fitness function, which is able to preserve the coverage of complex testing criteria (e.g., Combinatorial Interaction Testing criterion). Based on the defined fitness function, we have empirically evaluated three different weight-based GAs on an industrial case study provided by Cisco Systems, Inc. Norway. We also presented our results of applying the three weight-based GAs on five existing case studies from the literature. Based on these case studies, we conclude that among the three weight-based GAs, Random-Weighted GA (RWGA) achieved significantly better performance than the other ones. Copyright © 2013 ACM.},
author_keywords={Fault detection capability;  Feature pairwise coverage;  Test minimization;  Weight-based GAs},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Zhang20131,
author={Zhang, W.a  b  and Yi, L.a  b  and Zhao, H.Y.a  b  and Jin, Z.a  b },
title={Feature-oriented stigmergy-based collaborative requirements modeling: An exploratory approach for requirements elicitation and evolution based on web-enabled collective intelligence},
journal={Science China Information Sciences},
year={2013},
volume={56},
number={8},
pages={1-18},
doi={10.1007/s11432-013-4912-8},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84883219397&partnerID=40&md5=f54305214a47de9ac0a5ddbb0bc1d570},
affiliation={Key Laboratory of High Confidence Software Technologies (Peking University), Ministry of Education, Beijing, 100871, China; Software Institute, School of Electronics Engineering and Computer Science, Peking University, Beijing, 100871, China},
abstract={Compared with traditional software applications, the requirements problem of Internetware applications exhibits a set of new characteristics that cannot be resolved by traditional engineer-centered face-to-face requirements methods. In this paper, we present an exploratory approach to the requirements elicitation and evolution problem of Internetware applications, based on the concept of web-enable collective intelligence, to accommodate the situation of large-scale user communities of Internetware applications with diverse and constantly evolving requirements. In particular, we propose a feature-oriented stigmergy-based collaborative requirements modeling method that combines feature-oriented requirements modeling with web-enabled stigmergy-based collaboration to support large-scale collaborative requirements eliciting and evolving activities for Internetware applications. Two experiments are introduced to show the feasibility and effectiveness of this approach. © 2013 Science China Press and Springer-Verlag Berlin Heidelberg.},
author_keywords={collective intelligence;  feature model;  Internetware;  requirements modelling;  stigmergy},
document_type={Article},
source={Scopus},
}

@ARTICLE{Hubaux2013,
author={Hubaux, A.a  and Tun, T.T.a  b  and Heymans, P.a },
title={Separation of concerns in feature diagram languages: A systematic survey},
journal={ACM Computing Surveys},
year={2013},
volume={45},
number={4},
doi={10.1145/2501654.2501665},
art_number={2501665},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84885220291&partnerID=40&md5=954c05149edd6f2b59184be6c4abbbc9},
affiliation={PReCISE Research Centre, Faculty of Computer Science, University of Namur, Belgium; Open University, United Kingdom},
abstract={The need for flexible customization of large feature-rich software systems, according to requirements of various stakeholders, has become an important problem in software development. Among the many software engineering approaches dealing with variability management, the notion of Software Product Line (SPL) has emerged as a major unifying concept. Drawing from established disciplines of manufacturing, SPL approaches aim to design repertoires of software artifacts, from which customized software systems for specific stakeholder requirements can be developed. A major difficulty SPL approaches attempt to address is the modularization of software artifacts, which reconciles the user's needs for certain features and the development and technical constraints. Towards this end, many SPL approaches use feature diagrams to describe possible configurations of a feature set. There have been several proposals for feature diagram languages with varying degrees of expressiveness, intuitiveness, and precision. However, these feature diagram languages have limited scalability when applied to realistic software systems. This article provides a systematic survey of various concerns of feature diagrams and ways in which concerns have been separated. The survey shows how the uncertainty in the purpose of feature diagram languages creates both conceptual and practical limitations to scalability of those languages. © 2013 ACM.},
author_keywords={Feature diagram;  Separation of concerns;  Software product line;  Variability},
document_type={Article},
source={Scopus},
}

@ARTICLE{Trinidad2013,
author={Trinidad, P. and Ruiz-Cortés, A.},
title={Evolving the automated analysis of feature models},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7908 LNCS},
pages={XXI-XXII},
doi={10.1007/978-3-642-38709-8},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84879865824&partnerID=40&md5=9beddc5b6f2b266a81ad3155225ddd7b},
affiliation={Applied Software Engineering Research Group, University of Seville, Spain},
abstract={The automated analysis of feature models (AAFM) is a mature topic in software product lines research that provides over 30 different analysis operations to extract relevant information from feature models. In this tutorial, we present the basis of the AAFM and propose a unification of feature models and configurations in a unique model resulting in an evolution of the AAFM that simplifies the catalogue of operations, reducing the formalization, implementation and testing efforts in the development of analysis engines. © 2013 Springer-Verlag.},
author_keywords={automated reasoning;  feature models;  model analysis;  software product lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hubaux2013641,
author={Hubaux, A.a  and Heymans, P.a  b  and Schobbens, P.-Y.a  and Deridder, D.c  and Abbasi, E.K.a },
title={Supporting multiple perspectives in feature-based configuration},
journal={Software and Systems Modeling},
year={2013},
volume={12},
number={3},
pages={641-663},
doi={10.1007/s10270-011-0220-1},
note={cited By 5},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84879788174&partnerID=40&md5=dee1ff6a27f859c32d424a1528d81ada},
affiliation={PReCISE Research Centre, Faculty of Computer Science, University of Namur, Namur, Belgium; INRIA Lille-Nord Europe, Université de Lille 1 - LIFL - CNRS, Lille, France; Smals vzw, Software Languages Lab, Vrije Universiteit Brussel, Brussels, Belgium},
abstract={Feature diagrams have become commonplace in software product line engineering as a means to document variability early in the life cycle. Over the years, their application has also been extended to assist stakeholders in the configuration of software products. However, existing feature-based configuration techniques offer little support for tailoring configuration views to the profiles of the various stakeholders. In this paper, we propose a lightweight, yet formal and flexible, mechanism to leverage multidimensional separation of concerns in feature-based configuration. We propose a technique to specify concerns in feature diagrams and to generate automatically concern-specific configuration views. Three alternative visualisations are proposed. Our contributions are motivated and illustrated through excerpts from a real web-based meeting management application which was also used for a preliminary evaluation. We also report on the progress made in the development of a tool supporting multi-view feature-based configuration. © 2011 Springer-Verlag.},
author_keywords={Feature diagram;  Feature-based configuration;  Multi-view;  Separation of concerns;  Software product line engineering},
document_type={Article},
source={Scopus},
}

@ARTICLE{Acher2013657,
author={Acher, M.a  b  and Collet, P.c  and Lahire, P.c  and France, R.B.d },
title={FAMILIAR: A domain-specific language for large scale management of feature models},
journal={Science of Computer Programming},
year={2013},
volume={78},
number={6},
pages={657-681},
doi={10.1016/j.scico.2012.12.004},
note={cited By 14},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84875729938&partnerID=40&md5=022b272cc23e29c8097a00646802ead0},
affiliation={University of Namur, PReCISE Research Centre, Belgium; University of Rennes 1, IRISA, INRIA, France; University of Nice Sophia Antipolis, I3S Laboratory, CNRS UMR 6070, France; Colorado State University, Department of Computer Science, United States},
abstract={The feature model formalism has become the de facto standard for managing variability in software product lines (SPLs). In practice, developing an SPL can involve modeling a large number of features representing different viewpoints, sub-systems or concerns of the software system. This activity is generally tedious and error-prone. In this article, we present FAMILIAR a Domain-Specific Language (DSL) that is dedicated to the large scale management of feature models and that complements existing tool support. The language provides a powerful support for separating concerns in feature modeling, through the provision of composition and decomposition operators, reasoning facilities and scripting capabilities with modularization mechanisms. We illustrate how an SPL consisting of medical imaging services can be practically managed using reusable FAMILIAR scripts that implement reasoning mechanisms. We also report on various usages and applications of FAMILIAR and its operators, to demonstrate their applicability to different domains and use for different purposes. © 2012 Elsevier B.V. All rights reserved.},
author_keywords={Domain-specific language;  Feature model;  Model management;  Software product lines;  Variability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Zhang20131,
author={Zhang, G. and Ye, H. and Lin, Y.},
title={An approach for validating feature models in software product lines},
journal={Journal of Software Engineering},
year={2013},
volume={7},
number={1},
pages={1-29},
doi={10.3923/jse.2013.1.29},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84877649899&partnerID=40&md5=200732cbb83433d22dbb137711e33293},
affiliation={School of Electrical Engineering and Computer Science, University of Newcastle, Callaghan 2308, NSW, Australia},
abstract={In a Software Product Line (SPL), a feature model is widely used to represent the commonalities and variabilities of a family of software products. In the process of establishing feature models, the incorrect and inaccurate feature relationships will lead to feature model errors which prevent the effective product configuration. The feature model validation aims to identify the errors existing in a feature model and find the solutions of resolving the errors. The current validation approaches transformed a feature model into a Constraint Satisfaction Problem (CSP) and used off-the-shelf solvers to reason on the CSP. However, the use of solvers might take an infeasible amount of time for validating large scale feature models, as CSP exhibits the exponential complexity and requires a combination of heuristics and combinational search methods. This study developed an efficient validation approach based on the contradictory feature relationships behind the errors. As the contradictory feature relationships were found based on feature relationship propagation, the solvers were not required by this approach. The performance and correctness of this proposed approach were evaluated by comparing with the CSP based approach based on a set of predesigned feature models and a number of large-scale feature models. © 2013 Academic Journals Inc.},
author_keywords={Constraint satisfaction problem;  Feature model errors;  Feature model validation;  Propagation;  Software product line},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Lopez-Herrejon2013441,
author={Lopez-Herrejon, R.E. and Egyed, A.},
title={SBSE4VM: Search based software engineering for variability management},
journal={Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR},
year={2013},
pages={441-444},
doi={10.1109/CSMR.2013.67},
art_number={6498506},
note={cited By 3},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84877289563&partnerID=40&md5=48045dcb2d08e36f437ee87ced3b1816},
affiliation={Systems Engineering and Automation, Johannes Kepler University Linz, Austria},
abstract={SBSE4VM is an ongoing Lise Meitner Fellowship project sponsored by the Austrian Science Fund (FWF) that runs for two years. The driving goal of the project is to explore the application of Search Based Software Engineering techniques to reverse engineer, evolve, and fix inconsistencies in systems with variability. © 2013 IEEE.},
author_keywords={Feature Orientation;  Fixing Inconsistencies;  Product Line Evolution;  Search Based Software Engineering;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Sabouri2013207,
author={Sabouri, H.a  and Khosravi, R.a  b },
title={Modeling and verification of reconfigurable actor families},
journal={Journal of Universal Computer Science},
year={2013},
volume={19},
number={2},
pages={207-232},
note={cited By 2},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84876494130&partnerID=40&md5=5f83f63dfcfe00a4d2492e1329a31e94},
affiliation={School of Electrical and Computer Engineering, University of Tehran, Tehran, Iran; School of Computer Science, Institute for Research in Fundamental Sciences (IPM), Tehran, Iran},
abstract={Software product line engineering enables proactive reuse among a set of related products through explicit modeling of commonalities and differences among them. Features are usually used to distinguish different products as a product is identified by its supported feature set that is represented by a configuration. Dynamic product lines enhance flexibility of a product by allowing run-time reconfiguration. In this paper, we focus on modeling and verification of families of concurrent and distributed systems that are reconfigurable. To this end, we introduce the notion of variability in actor models to achieve family of reconfigurable actors. Then, we present our methodology to model this concept using the actor-based modeling language Rebeca. The model checking backbone of Rebeca enables us to ensure establishment of certain constraints on reconfigurations. We show the applicability and effectiveness of our approach by applying it on a set of case studies. © J.UCS.},
author_keywords={Actor models;  Dynamic software product lines;  Model checking;  Reconfiguration},
document_type={Article},
source={Scopus},
}

@ARTICLE{Ryssel201321,
author={Ryssel, U. and Ploennigs, J. and Kabitzsch, K.},
title={Reasoning of feature models from derived features},
journal={ACM SIGPLAN Notices},
year={2013},
volume={48},
number={3},
pages={21-30},
doi={10.1145/2480361.2371405},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84877880973&partnerID=40&md5=8354b0d46f0ca13822013f3552b57662},
affiliation={Institute for Applied Computer Science, Dresden University of Technology, Dresden, Germany},
abstract={When using product lines, whose variability models are based on derived features, e.g., Simulink variant objects, the dependencies among the features are only described implicitly. This makes it difficult to verify the mapping of the features to the solution space and to create a comprehensive overview of the feature dependencies like in a feature model. In this paper, an OWL-based approach is presented, which permits the automatic verification of the feature mapping and an automatic feature model synthesis for derived features using OWL reasoning and formal concept analysis. Copyright 2012 ACM.},
author_keywords={Derived feature;  Feature model synthesis;  Formal concept analysis;  OWL;  Reasoning;  Variant object},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Haslinger201353,
author={Haslinger, E.N. and Lopez-Herrejon, R.E. and Egyed, A.},
title={On extracting feature models from sets of valid feature combinations},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7793 LNCS},
pages={53-67},
doi={10.1007/978-3-642-37057-1_5},
note={cited By 6},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874390625&partnerID=40&md5=b80cd688c04950cd15598f41a2224e97},
affiliation={Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Rather than developing individual systems, Software Product Line Engineering develops families of systems. The members of the software family are distinguished by the features they implement and Feature Models (FMs) are the de facto standard for defining which feature combinations are considered valid members. This paper presents an algorithm to automatically extract a feature model from a set of valid feature combinations, an essential development step when companies, for instance, decide to convert their existing product variations portfolio into a Software Product Line. We performed an evaluation on 168 publicly available feature models, with 9 to 38 features and up to 147456 feature combinations. From the generated feature combinations of each of these examples, we reverse engineered an equivalent feature model with a median performance in the low milliseconds. © 2013 Springer-Verlag.},
author_keywords={Feature;  Feature Models;  Feature Set;  Reverse Engineering;  Software Product Lines;  Variability Modeling},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Salay201321,
author={Salay, R. and Gorzny, J. and Chechik, M.},
title={Change propagation due to uncertainty change},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={7793 LNCS},
pages={21-36},
doi={10.1007/978-3-642-37057-1_3},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874388236&partnerID=40&md5=34b556242e58eeb4f22f3a44816f1e62},
affiliation={Department of Computer Science, University of Toronto, Toronto, ON, Canada},
abstract={Uncertainty is ubiquitous in software engineering; however, it has been typically handled in adhoc and informal ways within software models. Automated change propagation is recognized as a key tool for managing the accidental complexity that comes with multiple interrelated models. In this paper, we address change propagation in the context of model uncertainty and consider the case where changes in the level of uncertainty in a model can be propagated to related models. We define such uncertainty change propagation using our earlier formalization and develop automated propagation algorithms using an SMT solver. A preliminary evaluation shows that the approach is feasible. © 2013 Springer-Verlag.},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Guana2013541,
author={Guana, V.a  and Correal, D.b },
title={Improving software product line configuration: A quality attribute-driven approach},
journal={Information and Software Technology},
year={2013},
volume={55},
number={3},
pages={541-562},
doi={10.1016/j.infsof.2012.09.007},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84872930912&partnerID=40&md5=5837e1a20dd180bc4128bd0a3d29ddc0},
affiliation={Department of Computing Science, University of Alberta, Edmonton, AB T6G 2E8, Canada; Systems and Computer Engineering Department, Universidad de Los Andes, Cra 1E N 19A-40 Bogota, DC, Colombia},
abstract={Context: During the definition of software product lines (SPLs) it is necessary to choose the components that appropriately fulfil a product's intended functionalities, including its quality requirements (i.e., security, performance, scalability). The selection of the appropriate set of assets from many possible combinations is usually done manually, turning this process into a complex, time-consuming, and error-prone task. Objective: Our main objective is to determine whether, with the use of modeling tools, we can simplify and automate the definition process of a SPL, improving the selection process of reusable assets. Method: We developed a model-driven strategy based on the identification of critical points (sensitivity points) inside the SPL architecture. This strategy automatically selects the components that appropriately match the product's functional and quality requirements. We validated our approach experimenting with different real configuration and derivation scenarios in a mobile healthcare SPL where we have worked during the last three years. Results: Through our SPL experiment, we established that our approach improved in nearly 98% the selection of reusable assets when compared with the unassisted analysis selection. However, using our approach there is an increment in the time required for the configuration corresponding to the learning curve of the proposed tools. Conclusion: We can conclude that our domain-specific modeling approach significantly improves the software architect's decision making when selecting the most suitable combinations of reusable components in the context of a SPL. © 2012 Elsevier B.V. All rights reserved.},
author_keywords={Domain specific modeling;  Model driven-software product lines;  Quality evaluation;  Sensitivity points;  Software architecture;  Variability management},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dhungana2013,
author={Dhungana, D.a  and Seichter, D.b  and Botterweck, G.b  and Rabiser, R.c  and Grünbacher, P.c  and Benavides, D.d  and Galindo, J.A.d },
title={Integrating heterogeneous variability modeling approaches with invar},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430514},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874017231&partnerID=40&md5=a43d770b1732afbbf9789664178076a3},
affiliation={Siemens AG Österreich, Corporate Technology, Vienna, Austria; Lero, Irish Software Engineering Research Center, Limerick, Ireland; Christian Doppler Lab. for Automated Software Engineering, JKU Linz, Austria; Department of Computer Languages and Systems, University of Seville, Seville, Spain},
abstract={There have been several proposals to describe the variability of software product lines by using modeling languages. In larger organizations or projects (e.g., multi product line environments) this can lead to a situation where multiple variability modeling techniques are used simultaneously. Rather than enforcing a single modeling language, we present an integrative infrastructure that provides a unified perspective for users configuring products in such multi product line environments, regardless of the different modeling methods and tools used internally. In this tool demonstration paper, we present a prototypical implementation of our framework based on Web services. So far, the prototype has been used with a feature-based, an OVM-style and a decision-oriented variability modeling approach. © 2013 ACM.},
author_keywords={integrated tool;  product configuration;  variability modeling;  web service},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Schröter2013,
author={Schröter, R. and Thüm, T. and Siegmund, N. and Saake, G.},
title={Automated analysis of dependent feature models},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430515},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874008284&partnerID=40&md5=b7bb6a58c80c41015e32db21f658b23b},
affiliation={University of Magdeburg, Magdeburg, Germany},
abstract={Feature models specify valid combinations of features in software product lines. With dependent feature models (DFMs), we apply separation of concerns to feature models for two main benefits. First, we can modularize feature models into parts relevant to groups of stakeholders. Second, we are able to model dependencies between different software product lines in a multi-product-line scenario. To ensure consistency and correctness of DFMs, we have to apply analyses, such as dead-feature detection. We discuss why DFMs challenge the detection of inconsistencies, present how to reuse existing analyses for DFMs, and propose new analyses to supplement existing ones. We apply automated analyses in five steps and evaluate the approach using DFMs specified in VELVET by our prototype VeAnalyzer. © 2013 ACM.},
author_keywords={D.2.13 [Software Engineering]: Reusable Software - Domain engineering;  Design;  Verification},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Haslinger2013,
author={Haslinger, E.N. and Lopez-Herrejon, R.E. and Egyed, A.},
title={Using feature model knowledge to speed up the generation of covering arrays},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430524},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874008197&partnerID=40&md5=0b36841a4144305251621e47c365fea7},
affiliation={Institute for Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Combinatorial Interaction Testing has shown great potential for effectively testing Software Product Lines (SPLs). An important part of this type of testing is determining a subset of SPL products in which interaction errors are more likely to occur. Such sets of products are obtained by computing a so called t-wise Covering Array (tCA), whose computation is known to be NP-complete. Recently, the ICPL algorithm has been proposed to compute these covering arrays. In this research-in-progress paper, we propose a set of rules that exploit basic feature model knowledge to reduce the number of elements (i.e. t-sets) required by ICPL without weakening the strength of the generated arrays. We carried out a comparison of runtime performance that shows a significant reduction of the needed execution time for the majority of our SPL case studies. © 2013 ACM.},
author_keywords={combinatorial testing;  evaluation;  feature model-based testing;  pairwise testing;  product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kolesnikov2013,
author={Kolesnikov, S.S.a  and Apel, S.a  and Siegmund, N.b  and Sobernig, S.c  and Kästner, C.d  and Senkaya, S.e },
title={Predicting quality attributes of software product lines using software and network measures and sampling},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430511},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874009093&partnerID=40&md5=eccad1b4924efac565828abbc9bbb1cb},
affiliation={University of Passau, Germany; University of Magdeburg, Germany; Vienna University of Economics and Business, Austria; Carnegie Mellon University, United States; University of Munich, Germany},
abstract={Software product-line engineering aims at developing families of related products that share common assets to provide customers with tailor-made products. Customers are often interested not only in particular functionalities (i.e., features), but also in non-functional quality attributes, such as performance, reliability, and footprint. Measuring quality attributes of all products of a product line usually does not scale. In this research-in-progress report, we propose a systematic approach aiming at efficient and scalable prediction of quality attributes of products. To this end, we establish predictors for certain categories of quality attributes (e.g., a predictor for high memory consumption) based on software and network measures, and receiver operating characteristic analysis. We use these predictors to guide a sampling process that takes the assets of a product line as input and determines the products that fall into the category denoted by the given predictor (e.g., products with high memory consumption). We propose to use predictors to make the process of finding "acceptable" products more efficient. We discuss and compare several strategies to incorporate predictors in the sampling process. © 2013 ACM.},
author_keywords={metrics;  prediction;  quality attributes;  sampling;  software product lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wulf-Hadash2013,
author={Wulf-Hadash, O. and Reinhartz-Berger, I.},
title={Cross product line analysis},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430531},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874010340&partnerID=40&md5=739a34620c7877f9fcc015f9c51a7ef8},
affiliation={Department of Information Systems, University of Haifa, Haifa 31905, Israel},
abstract={Due to increase in market competition and merger and acquisition of companies, different software product lines (SPLs) may exist under the same roof. These SPLs may be developed applying different domain analysis processes, but are likely not disjoint. Cross product line analysis aims to examine the common and variable aspects of different SPLs for improving maintenance and future development of related SPLs. Currently different SPL artifacts, or more accurately feature models, are compared, matched, and merged for supporting scalability, increasing modularity and reuse, synchronizing feature model versions, and modeling multiple SPLs for software supply chains. However, in all these cases the focus is on creating valid merged models from the input feature models. Furthermore, the terminology used in all the input feature models is assumed to be the same, namely similar features are named the same. As a result these methods cannot be simply applied to feature models that represent different SPLs. In this work we offer adapting similarity metrics and text clustering techniques in order to enable cross product line analysis. This way analysis of feature models that use different terminologies in the same domain can be done in order to improve the management of the involved SPLs. Preliminary results reveal that the suggested method helps systematically analyze the commonality and variability between related SPLs, potentially suggesting improvements to existing SPLs and to the maintenance of sets of SPLs. © 2013 ACM.},
author_keywords={empirical evaluation;  feature clustering;  feature diagram matching;  feature diagram merging;  feature similarity},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Acher2013,
author={Acher, M.a  and Baudry, B.a  and Heymans, P.b  and Cleve, A.b  and Hainaut, J.-L.b },
title={Support for reverse engineering and maintaining feature models},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430530},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874010410&partnerID=40&md5=08603984be8fc0de83a58e5dc7ed5545},
affiliation={University of Rennes 1, Irisa/INRIA, France; PReCISE Research Centre, University of Namur, Belgium},
abstract={Feature Models (FMs) are a popular formalism for modelling and reasoning about commonality and variability of a system. In essence, FMs aim to define a set of valid combinations of features, also called configurations. In this paper, we tackle the problem of synthesising an FM from a set of configurations. The main challenge is that numerous candidate FMs can be extracted from the same input configurations, yet only a few of them are meaningful and maintainable. We first characterise the different meanings of FMs and identify the key properties allowing to discriminate between them. We then develop a generic synthesis procedure capable of restituting the intended meanings of FMs based on inferred or user-specified knowledge. Using tool support, we show how the integration of knowledge into FM synthesis can be realized in different practical application scenarios that involve reverse engineering and maintaining FMs. © 2013 ACM.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Passos2013,
author={Passos, L.a  and Czarnecki, K.a  and Apel, S.b  and Wa̧sowski, A.c  and Kästner, C.d  and Guo, J.a },
title={Feature-oriented software evolution},
journal={ACM International Conference Proceeding Series},
year={2013},
doi={10.1145/2430502.2430526},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84874011398&partnerID=40&md5=e2fc468eefab09a5b324ff8eb702fad4},
affiliation={University of Waterloo, Canada; University of Passau, Germany; IT University, Denmark; Carnegie Mellon University, United States},
abstract={In this paper, we develop a vision of software evolution based on a feature-oriented perspective. From the fact that features provide a common ground to all stakeholders, we derive a hypothesis that changes can be effectively managed in a feature-oriented manner. Assuming that the hypothesis holds, we argue that feature-oriented software evolution relying on automatic traceability, analyses, and recommendations reduces existing challenges in understanding and managing evolution. We illustrate these ideas using an automotive example and raise research questions for the community. © 2013 ACM.},
author_keywords={analysis;  feature-oriented development;  recommendation;  software evolution;  traceability},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Nöhrer2013265,
author={Nöhrer, A. and Egyed, A.},
title={C2O configurator: A tool for guided decision-making},
journal={Automated Software Engineering},
year={2013},
volume={20},
number={2},
pages={265-296},
doi={10.1007/s10515-012-0117-4},
note={cited By 4},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84879502708&partnerID=40&md5=3bebca6fc76f2134ddb5e1c54a63f520},
affiliation={Institute for Systems Engineering and Automation, Johannes Kepler University, Linz, Austria},
abstract={Decision models are widely used in software engineering to describe and restrict decision-making (e.g., deriving a product from a product-line). Since decisions are typically interdependent, it is often neither obvious which decisions have the most significant impact nor which decisions might ultimately conflict. Unfortunately, the current state-of-the-art provides little support for dealing with such situations. On the one hand, some conflicts can be avoided by providing more freedom in which order decisions are made (i.e., most important decisions first). On the other hand, conflicts are unavoidable at times, and living with conflicts may be preferable over forcing the user to fix them right away - particularly because fixing conflicts becomes easier as more is known about a user's intentions. This paper introduces the C2O (Configurator 2.0) tool for guided decision-making. The tool allows the user to answer questions in an arbitrary order - with and without the presence of inconsistencies. While giving users those freedoms, it still supports and guides them by (i) rearranging the order of questions according to their potential to minimize user input, (ii) providing guidance to avoid follow-on conflicts, and (iii) supporting users in fixing conflicts at a later time. © 2013 Springer Science+Business Media New York.},
document_type={Article},
source={Scopus},
}

@ARTICLE{Del-Río-Ortega2013470,
author={Del-Río-Ortega, A. and Resinas, M. and Cabanillas, C. and Ruiz-Cortés, A.},
title={On the definition and design-time analysis of process performance indicators},
journal={Information Systems},
year={2013},
volume={38},
number={4},
pages={470-490},
doi={10.1016/j.is.2012.11.004},
note={cited By 10},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84872148430&partnerID=40&md5=f9c02dd03f4daec7169ae180713b5029},
affiliation={Dpto. de Lenguajes y Sistemas Informáticos, University of Seville, Av. Reina Mercedes s/n, 41012 Seville, Spain},
abstract={A key aspect in any process-oriented organisation is the evaluation of process performance for the achievement of its strategic and operational goals. Process Performance Indicators (PPIs) are a key asset to carry out this evaluation, and, therefore, having an appropriate definition of these PPIs is crucial. After a careful review of the literature related and a study of the current picture in different real organisations, we conclude that there not exists any proposal that allows to define PPIs in a way that is unambiguous and highly expressive, understandable by technical and non-technical users and traceable with the Business Process (BP). In addition, like other activities carried out during the BP lifecycle, the management of PPIs is considered time-consuming and error-prone. Therefore, providing an automated support for them is very appealing from a practical point of view. In this paper, we propose the PPINOT metamodel, which allows such an advanced definition of PPIs and is independent of the language used to model the business process. Furthermore, we provide an automatic semantic mapping from the metamodel to Description Logics (DL) that allows the implementation of design-time analysis operations in such a way that DL reasoners' facilities can be leveraged. These operations provide information that can assist process analysts in the definition and instrumentation of PPIs. Finally, to validate the usefulness of our proposal, we have used the PPINOT metamodel at the core of a software tool called the PPINOT Tool Suite and we have applied it in several real scenarios. © 2012 Elsevier Ltd.},
author_keywords={Automated analysis;  Business process management;  PPINOT;  Process performance indicators;  Process performance measurement},
document_type={Article},
source={Scopus},
}

@CONFERENCE{Schmid2013215,
author={Schmid, K.a  and Koschke, R.b  and Kröher, C.a  and Lüdemann, D.b },
title={Towards identifying evolution smells in Software Product Lines},
journal={Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)},
year={2013},
volume={P-215},
pages={215-219},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84922738691&partnerID=40&md5=859dbc28352f162554937fabcb2107ce},
affiliation={University of Hildesheim, Institute of Computer Science, Software Systems Engineering, Marienburger Platz 22, Hildesheim, Germany; University of Bremen, Institute of Computer Science, Softwaretechnik, Am Fallturm 1, Bremen, Germany},
abstract={As more and more companies shift to a product line approach, supporting the evolution of software product lines becomes increasingly important. While today already significant work exists along the lines of quality analysis for software product lines, there is much less work that addresses the evolution scenario. In this paper, we briefly describe different categories of approaches for identifying problems in product lines. Based on this we describe a new research direction for identifying problems in product line evolution scenarios. © Gesellschaft für Informatik, Bonn 2013.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sanchez201339,
author={Sanchez, L.E.a  and Moisan, S.b  and Rigault, J.-P.b },
title={Metrics on feature models to optimize configuration adaptation at run time},
journal={2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering, CMSBSE 2013 - Proceedings},
year={2013},
pages={39-44},
doi={10.1109/CMSBSE.2013.6604435},
art_number={6604435},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84886492908&partnerID=40&md5=1d0c9bd2e2676d3cd2349b6a87410506},
affiliation={Universidad Nacional Del Centro de la Provincia de Buenos Aires, Tandil, Argentina; INRIA Sophia Antipolis Méditerrannée, Route des Lucioles, 06902 cedex, France},
abstract={Feature models are widely used to capture variability, commonalities and configuration rules of software systems. We apply this technique to model component-based systems with many variants during specification, implementation, or run time. This representation allows us to determine the set of valid configurations befitting a given context, especially at run time. A key challenge is to determine the configuration most suitable, especially with respect to non-functional aspects: quality of service, performance, reconfiguration time. We propose an algorithm for selecting the configuration that optimizes a given quality metrics. This algorithm is a variant of the Best-First Search algorithm, a heuristic technique suitable for feature model optimization. The algorithm is parameterized with several strategies and heuristics on feature models leading to different optimality and efficiency properties. We discuss the algorithm, its strategies and heuristics, and we present experimental results showing that the algorithm meets the requirements for our real time systems. © 2013 IEEE.},
author_keywords={feature model optimization;  heuristic search in graphs;  real time adaptation;  search-based software engineering;  software metrics},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Del-Río-Ortega201357,
author={Del-Río-Ortega, A. and Resinas, M. and Cabanillas, C. and Ruiz-Cortés, A.},
title={Defining and analysing resource-aware process performance indicators},
journal={CEUR Workshop Proceedings},
year={2013},
volume={998},
pages={57-64},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924325072&partnerID=40&md5=fa21b6432d9f244d5848c60edb0267b6},
affiliation={Universidad de Sevilla, Spain},
abstract={A key aspect to identify improvement points of the business processes (BP) of an organisation is to conduct performance management, which involves defining appropriate PPIs (Process Performance Indicators). Up to date, existing approaches to define and analyse PPIs usually focus on time and control flow aspects, leaving disregarded the organisational perspective. In this paper we extend PPINOT, a PPI metamodel, to support the definition of resource-aware PPIs in BPs enriched with resource information. Furthermore, leveraging the formal foundation of PPINOT, we introduce automated operations that relate PPIs to the people that may have an influence on them.},
author_keywords={Key performance indicator;  Performance management;  Process performance indicator;  Resource aware business process},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Kramer201313,
author={Kramer, D. and Sauer, C. and Roth-Berghofer, T.},
title={Towards explanation generation using feature models in software product lines},
journal={CEUR Workshop Proceedings},
year={2013},
volume={1070},
pages={13-23},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924333732&partnerID=40&md5=927eb54be8075206929004ae3d0243bc},
affiliation={School of Computing and Technology, University of West London, St Mary's Road, London, United Kingdom},
abstract={Dynamic Software Product Line (DSPL) Engineering has gained interest through its promise of being able to unify software adaptation whereby software can be configured at compile time and runtime. Just like conventional adaptive software, software dynamism can confuse the user, and lower user trust. Variability knowledge expressed in a feature model though may not be understandable to the end user. Explanations have been shown to improve intelligibility of the software, and improve user trust. In this work, we consider how explanations can be used in DSPLs, by adding explanatory knowledge to feature models that can be used to generate explanations at runtime.},
author_keywords={Dynamic software product lines;  Explanation generation;  Feature models},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang201356,
author={Wang, S. and Ali, S. and Gotlieb, A.},
title={Automated product line methodologies to support model-based testing},
journal={CEUR Workshop Proceedings},
year={2013},
volume={1115},
pages={56-60},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84921918318&partnerID=40&md5=702bd0b0b2d44d5173b4419cab1d139d},
affiliation={Certus Software VandV Center, Simula Research Laboratory, Norway},
abstract={Testing products in a cost-efficient way remains an attractive topic for Model-Based Testing (MBT) of product lines in both academia and industry, which can be addressed by employing systematic and automated approaches based on models (such as feature models and UML models). Cost-effective testing products can be divided into three main problems, i.e., test selection, test generation, and test minimization. Driven by the needs of our industrial problems for testing Video Conferencing Systems (VCSs) product line developed by Cisco, Norway, this paper presents Product Line Model-based Testing Methodologies (PL-MTM) to tackle the above-mentioned three problems for cost-effective testing a product in product line, which includes: 1) an systematic and automated test selection methodology; 2) an automated test minimization approach; and 3) an automated and systematic test generation methodology.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Lillacka2013185,
author={Lillacka, M. and Müllerb, J. and Eiseneckera, U.W.},
title={Improved prediction of non-functional properties in Software Product Lines with domain context},
journal={Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)},
year={2013},
volume={P-213},
pages={185-198},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84922707665&partnerID=40&md5=54c26ec6127b77b87871663fe02acf05},
abstract={Software Product Lines (SPLs) enable software reuse by systematically managing commonalities and variability. Usually, commonalities and variability are expressed by features. Functional requirements of a software product are met by selecting appropriate features. However, selecting features also influences non-functional properties. To satisfy non-functional requirements of a software product, as well, the effect of a feature selection on non-functional properties has to be known. Often an SPL allows a vast number of valid products, which renders a test of non-functional properties on the basis of all valid products impractical. Recent research offers a solution to this problem: the effect of features on non-functional properties of software products is predicted by measuring in advance. A sample of feature configurations is generated, executed with a predefined benchmark, and then non-functional properties are measured. Based on these data a model is created that allows to predict non-functional properties of a software product before actually building it. However, in some domains contextual influences, such as input data, can heavily affect nonfunctional properties. We argue that the measurement of the effect of features on non-functional properties can be drastically improved by considering contextual influences of a domain. We study this assumption on input data as an example for a contextual influence and using an artificial but intuitive case study from the domain of compression algorithms. Our study shows that prediction accuracy of non-functional properties can be significantly improved.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sayyad201384,
author={Sayyad, A.S. and Goseva-Popstojanova, K. and Menzies, T. and Ammar, H.},
title={On parameter tuning in search based software engineering: A replicated empirical study},
journal={Proceedings - 2013 3rd International Workshop on Replication in Empirical Software Engineering Research, RESER 2013},
year={2013},
pages={84-90},
doi={10.1109/RESER.2013.6},
art_number={6664735},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84892585373&partnerID=40&md5=a67761327d823b9ac950c24aa8342df0},
affiliation={Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, United States},
abstract={Multiobjective Evolutionary Algorithms are increasingly used to solve optimization problems in software engineering. The choice of parameters for those algorithms usually follows the "default" settings, often accepted as "rule of thumb" or common wisdom. The fact is that each algorithms needs to be tuned for the problem at hand. Previous work [Arcuri and Fraser, 2011] has shown that variations in parameter values had large effects on the performance of the algorithms. This project seeks to partially replicate the statistical analysis performed by Arcuri and Fraser. We seek to investigate the effects of parameter tuning on the performance of the two algorithms: Indicator-Based Evolutionary Algorithm (IBEA), and Nondominated Sorting Genetic Algorithm (NSGA-II) when applied to the problem of configuring Software Product Lines (SPLs) in the presence of stakeholder preferences such as cost and reliability. The results of this study confirm and strengthen the findings in the original study by Arcuri and Fraser. © 2013 IEEE.},
author_keywords={Parameter Tuning;  Search Based Software Engineering;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Felfernig2013117,
author={Felfernig, A.a  and Benavides, D.b  and Galindo, J.b  and Reinfrank, F.a },
title={Towards anomaly explanation in feature models},
journal={CEUR Workshop Proceedings},
year={2013},
volume={1128},
pages={117-124},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84908258724&partnerID=40&md5=7d947c63372c05cef06a7a8eb82124bb},
affiliation={Graz University of Technology, Graz, Austria; University of Seville, Spain},
abstract={Feature models are a wide-spread approach to variability and commonality management in software product lines. Due to the increasing size and complexity of feature models, anomalies in terms of inconsistencies and redundancies can occur which lead to increased efforts related to feature model development and maintenance. In this paper we introduce knowledge representations which serve as a basis for the explanation of anomalies in feature models. On the basis of these representations we show how explanation algorithms can be applied. The results of a performance analysis show the applicability of these algorithms for anomaly detection in feature models. We conclude the paper with a discussion of future research issues.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Wang2013,
author={Wang, S. and Ali, S.},
title={Modeling bCMS product line using feature model, component family model and UML},
journal={CEUR Workshop Proceedings},
year={2013},
volume={1076},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84924276203&partnerID=40&md5=4f8410300d408bdc1dd12bd2ba181c0c},
affiliation={Certus Software v and v Center, Simula Research Laboratory, Norway},
abstract={In the context of Model-Based Engineering (MBE) of product lines, effort required to develop models can be significantly reduced by applying systematic product line modeling and configuration methodologies. Our previous work presented models of bCMS developed using AspectSM, a UML profile for Aspect-Oriented Modeling (AOM), which was defined to model crosscutting behaviors using extended UML state machines, with the objectives of minimizing modeling effort and the learning curve for modeling crosscutting behavior. However, such approach still requires users to be familiar with specific expertise and concepts on various UML behavior models. In this paper, we extend our previous work using Feature Model (FM) and Component Family Model (CFM) to model bCMS product line. More specifically, a FM is designed and developed to capture all variations points for bCMS product line and a CFM is built to provide an abstraction layer on top of the configurable state machines. With our current methodology, a user doesn't need to acquire expertise on behavioral modeling and can simply configure models for a product by selecting features in FM and configuring provided attributes in CFM.},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Collet201313,
author={Collet, P. and Lahire, P.},
title={Feature modeling and separation of concerns with FAMILIAR},
journal={2013 3rd International Workshop on Comparing Requirements Modeling Approaches, CMA@RE 2013 - Proceedings},
year={2013},
pages={13-18},
doi={10.1109/CMA-RE.2013.6664179},
art_number={6664179},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84892583365&partnerID=40&md5=3fa5ceca359412d12cbbfa152bb2b684},
affiliation={Univ. Nice Sophia Antipolis, CNRS, UMR 7271, France},
abstract={This paper presents a feature-oriented approach to requirement and design modeling using the FAMILIAR Domain Specific Language. This language is aimed at being used within different phases of software development, from early requirement definition to high-level design and in certain cases until runtime. Some experiments also demonstrate its usage when reverse engineering domain or technical variability information from various software artifacts. We illustrate the approach by capturing and composing variability descriptions of several concerns in the bCMS-SPL and by showing how it could be related to some implementation concerns with technical variability. FAMILIAR is available at http://familiar-project.github.io, with associated documentation and references to papers describing innovative operators, the language itself, as well as applications and results from case studies. © 2013 IEEE.},
author_keywords={FAMILIAR;  Feature Modeling;  Separation of Concerns;  Software Product Lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Hasu201351,
author={Hasu, T. and Bagge, A.H. and Haveraaen, M.},
title={Inferring required permissions for statically composed programs},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2013},
volume={8208 LNCS},
pages={51-66},
doi={10.1007/978-3-642-41488-6_4},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84890884527&partnerID=40&md5=b8f523e8925f1fa6c06a1d86792d9115},
affiliation={Bergen Language Design Laboratory, Department of Informatics, University of Bergen, Norway},
abstract={Permission-based security models are common in smartphone operating systems. Such models implement access control for sensitive APIs, introducing an additional concern for application developers. It is important for the correct set of permissions to be declared for an application, as too small a set is likely to result in runtime errors, whereas too large a set may needlessly worry users. Unfortunately, not all platform vendors provide tools support to assist in determining the set of permissions that an application requires. We present a language-based solution for permission management. It entails the specification of permission information within a collection of source code, and allows for the inference of permission requirements for a chosen program composition. Our implementation is based on Magnolia, a programming language demonstrating characteristics that are favorable for this use case. A language with a suitable component system supports permission management also in a cross-platform codebase, allowing abstraction over different platform-specific implementations and concrete permission requirements. When the language also requires any "wiring" of components to be known at compile time, and otherwise makes design tradeoffs that favor ease of static analysis, then accurate inference of permission requirements becomes possible. © 2013 Springer-Verlag.},
author_keywords={language-based security;  platform security architectures;  security management;  software engineering},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Felfernig2012311,
author={Felfernig, A. and Reinfrank, F. and Ninaus, G.},
title={Resolving anomalies in configuration knowledge bases},
journal={Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
year={2012},
volume={7661 LNAI},
pages={311-320},
doi={10.1007/978-3-642-34624-8_36},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84870916032&partnerID=40&md5=2e75b8a3e6bf2e8e5965d6f92040bbe3},
affiliation={Institute for Software Technology, Graz University of Technology, Inffeldgasse 16b, 8020 Graz, Austria},
abstract={Configuration technologies are well established in different product domains such as financial services, cars, and railway interlocking stations. In many cases the underlying configuration knowledge bases are large and complex have a high change frequency. In the context of configuration knowledge base development and maintenance, different types of knowledge base anomalies emerge, for example, inconsistencies and redundancies. In this paper we provide an overview of techniques and algorithms which can help knowledge engineers and domain experts to tackle the challenges of anomaly detection and elimination. Furthermore, we show the integration of the presented approaches in the ICONE configuration knowledge base development and maintenance environment. © 2012 Springer-Verlag.},
author_keywords={Anomaly Detection;  Configuration Knowledge Engineering;  Evaluation},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Streitferdt201299,
author={Streitferdt, D. and Mansoor, A.},
title={Experiences of a product line migration project},
journal={Proceedings - International Computer Software and Applications Conference},
year={2012},
pages={99-104},
doi={10.1109/COMPSAC.2012.19},
art_number={6340131},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84870838338&partnerID=40&md5=0f7d4503c47d45ed1a0fc45d1726c552},
affiliation={Software Architectures and Product Line Group, Ilmenau University of Technology, Ilmenau, Germany},
abstract={Product lines are a specialized type of software architecture with a very good reuse potential and an improved quality for software systems based on the customized mass production concept. Many software companies own several projects and have extensive experiences with single product developments. Here, any further automation of the software development process and enhancements in the quality of the resulting product are very tempting promises to move from single product development to product lines. The migration of existing software products towards a product line is subject of this paper. Based on two student projects resulting in two cycle computers, the migration to a cycle computer product line is presented, analyzed as well as compared with the industrial experiences available so far. The results of this analysis are lessons learned on the technical side and challenges of the organizational migration facets. The paper summarizes the migration process to give the reader a supporting view on his own migration projects and enable the early detection of upcoming challenges and avoid possible pitfalls. © 2012 IEEE.},
author_keywords={Product line migration;  Software architecture},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Dayba2012105,
author={Dayba, O.a  and Oĝuztüzün, H.b },
title={Kutulu: A domain-specific language for feature-driven product derivation},
journal={Proceedings - International Computer Software and Applications Conference},
year={2012},
pages={105-110},
doi={10.1109/COMPSAC.2012.20},
art_number={6340132},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84870856743&partnerID=40&md5=3c3f64f8c0bccc35f98dd1e1e5b5bc1b},
affiliation={Department of Software Engineering, SST-MD Aselsan Inc., Ankara, Turkey; Department of Computer Engineering, Middle East Technical University, Ankara, Turkey},
abstract={Software Product Line Engineering (SPLE) defines processes to facilitate the development of a family of products in a pre-defined market more effectively. Its success depends on implementation of these processes utilizing best practices with proper tool support. This paper describes how to enhance domain design and variation management processes of SPLE with a domain-specific language (DSL), namely "Kutulu". It also introduces novel modeling tools and dependency injection-based realization approach that are well-suited for product derivation in SPL. Our DSL definition, developed tools and their position in the product line context are put forth in this paper. © 2012 IEEE.},
author_keywords={Component;  Dependency injection;  Domain-specific language;  Feature-component binding;  Software product line;  Variability management},
document_type={Conference Paper},
source={Scopus},
}

@CONFERENCE{Sabouri2012680,
author={Sabouri, H.a  and Jaghoori, M.M.b  and De Boer, F.b  and Khosravi, R.a  c },
title={Scheduling and analysis of real-time software families},
journal={Proceedings - International Computer Software and Applications Conference},
year={2012},
pages={680-689},
doi={10.1109/COMPSAC.2012.95},
art_number={6340226},
note={cited By 1},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84870814776&partnerID=40&md5=61601aca105eb156125d59588481e731},
affiliation={University of Tehran, Tehran, Iran; CWI, Amsterdam, Netherlands; Institute for Research in Fundamental Sciences (IPM), School of Computer Science, Tehran, Iran},
abstract={A software product line describes explicitly the commonalities of and differences between different products in a family of (software) systems. A formalization of these commonalities and differences amounts to reduced development, analysis and maintenance costs in the practice of software engineering. An important feature common to next-generation real-time software systems is the need of application-level control over scheduling for optimized utilization of resources provided by for example many-core and cloud infrastructures. In this paper, we introduce a formal model of real-time software product lines which supports variability in scheduling policies and rigorous and efficient techniques for modular schedulability analysis. © 2012 IEEE.},
author_keywords={Application-level scheduling;  Automata theory;  Formal methods;  Real-time;  Software product lines},
document_type={Conference Paper},
source={Scopus},
}

@ARTICLE{Voronov2012182,
author={Voronov, A.a  and Tidstam, A.b  and Åkesson, K.a  and Malmqvist, J.b },
title={Verification of item usage rules in product configuration},
journal={IFIP Advances in Information and Communication Technology},
year={2012},
volume={388 AICT},
pages={182-191},
doi={10.1007/978-3-642-35758-9_16},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84872729115&partnerID=40&md5=7f07a899d4aadf251caad451805dc97e},
affiliation={Dept. of Signals and Systems, Chalmers University of Technology, Sweden; Dept. of Product and Production Development, Chalmers University of Technology, Sweden},
abstract={In the development of complex products product configuration systems are often used to support the development process. Item Usage Rules (IURs) are conditions for including specific items in products bills of materials based on a high-level product description. Large number of items and significant complexity of IURs make it difficult to maintain and analyze IURs manually. In this paper we present an automated approach for verifying IURs, which guarantees the presence of exactly one item from a predefined set in each product, as well as that an IUR can be reformulated without changing the set of products for which the item was included. © 2012 International Federation for Information Processing.},
document_type={Conference Paper},
source={Scopus},
}

@BOOK{Turner201282,
author={Turner, H.a  and White, J.a  and Reed, J.a  and Galindo, J.b  and Porter, A.d  and Marathe, M.c  and Vullikanti, A.e  and Gokhale, A.f },
title={Building a cloud-based mobile application testbed},
journal={Software Testing in the Cloud: Perspectives on an Emerging Discipline},
year={2012},
pages={82-403},
doi={10.4018/978-1-4666-2536-5.ch018},
note={cited By 0},
url={http://www.scopus.com/inward/record.url?eid=2-s2.0-84898177911&partnerID=40&md5=d017cdbce716bfd9ce41f96530168bb8},
affiliation={Bradley Department of Electrical Computer Engineering, Virginia Tech, Virginia Polytechnic Institute, United States; Virginia Tech, Virginia Polytechnic Institute, United States; Network Dynamics and Simulation Science Laboratory, Virginia Tech, Virginia Polytechnic Institute, United States; Department of Computer Science, Institute for Advanced Computer Studies, University of Maryland, United States; Department of Computer Science, Virginia Bioinformatics Institute, Virginia Polytechnic Institute, Virginia Tech, United States; EECS Department, Institute for Software Intensive Systems, Vanderbilt University, United States},
abstract={A proliferation of mobile smartphone platforms, including Android devices, has triggered a rise in mobile application development for a diverse set of situations. Testing of these smartphone applications can be exceptionally difficult, due to the challenges of orchestrating production-scale quantities of smartphones such as difficulty in managing thousands of sensory inputs to each individual smartphone device. This work presents the Android Tactical Application Assessment and Knowledge (ATAACK) Cloud, which utilizes a cloud computing environment to allow smartphone-based security, sensing, and social networking researchers to rapidly use model-based tools to provision experiments with a combination of 1,000+ emulated smartphone instances and tens of actual devices. The ATAACK Cloud provides a large-scale smartphone application research testbed. © 2013, IGI Global.},
document_type={Book Chapter},
source={Scopus},
}
